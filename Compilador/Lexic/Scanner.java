/* The following code was generated by JFlex 1.7.0 */

/**
  Per poder compilar aquest fitxer s'ha d'haver instalÂ·lat JFlex

  Lloc: https://www.jflex.de/download.html
  Compilar (ubuntu): jflex nom_archiu.jflex
  (windows) : ni idea


 **/  

package Compilador.Lexic;
import java.io.*;

import java_cup.runtime.*;

import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;

import Compilador.Sintactic.ParserSym;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\65\1\66\2\0\1\66\22\0\1\65\1\47\1\45\2\0"+
    "\1\32\1\0\1\46\1\36\1\37\1\30\1\26\1\53\1\27\1\52"+
    "\1\31\1\16\11\25\1\34\1\40\1\50\1\33\1\51\1\35\1\0"+
    "\1\24\1\15\1\17\1\15\1\55\1\57\5\15\1\60\1\15\1\21"+
    "\1\20\2\15\1\56\1\22\1\23\1\15\1\54\4\15\1\41\1\0"+
    "\1\42\1\0\1\15\1\0\1\10\1\13\1\5\1\4\1\1\1\64"+
    "\2\15\1\6\2\15\1\11\1\7\1\2\1\14\1\62\1\15\1\12"+
    "\1\63\1\3\1\61\5\15\1\43\1\67\1\44\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\10\2\1\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\1\1\24\1\1"+
    "\1\25\1\26\1\27\6\2\1\24\1\30\1\24\10\2"+
    "\1\0\1\2\1\4\1\31\1\32\1\33\1\34\1\35"+
    "\1\0\1\36\1\0\1\30\1\37\1\40\1\41\6\2"+
    "\1\42\2\2\1\43\2\2\1\44\1\45\1\46\5\2"+
    "\1\47\1\2\1\50\1\51\2\2\1\52\4\2\1\53"+
    "\5\2\1\54\1\2\1\55\4\2\1\56\2\2\1\57"+
    "\3\2\1\60\10\2\1\61\6\2\1\62\1\63\1\2"+
    "\1\64\3\2\1\65\1\66\1\67\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\70"+
    "\0\70\0\70\0\u0348\0\70\0\70\0\70\0\70\0\70"+
    "\0\70\0\70\0\70\0\70\0\u0380\0\u03b8\0\u03f0\0\u0428"+
    "\0\u0460\0\70\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578\0\u05b0"+
    "\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738\0\u0770"+
    "\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0\0\u08f8\0\70"+
    "\0\70\0\70\0\70\0\u0380\0\70\0\u0930\0\70\0\70"+
    "\0\70\0\70\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48\0\u0a80"+
    "\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b98\0\u0bd0\0\250\0\250"+
    "\0\250\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0850\0\u0d20"+
    "\0\70\0\250\0\u0d58\0\u0d90\0\250\0\u0dc8\0\u0e00\0\u0e38"+
    "\0\u0e70\0\250\0\u0ea8\0\u0ee0\0\u0f18\0\u0f50\0\u0f88\0\250"+
    "\0\u0fc0\0\250\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\250\0\u10d8"+
    "\0\u1110\0\250\0\u1148\0\u1180\0\u11b8\0\250\0\u11f0\0\u1228"+
    "\0\u1260\0\u1298\0\u12d0\0\u1308\0\u1340\0\u1378\0\250\0\u13b0"+
    "\0\u13e8\0\u1420\0\u1458\0\u1490\0\u14c8\0\250\0\250\0\u1500"+
    "\0\250\0\u1538\0\u1570\0\u15a8\0\250\0\250\0\250\0\250"+
    "\0\250";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\4\1\10"+
    "\1\11\2\4\1\12\2\4\1\13\1\14\5\4\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\2\1\42\1\43\1\4"+
    "\1\44\1\45\2\4\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\71\0\1\4\1\54\23\4\26\0\11\4\4\0"+
    "\25\4\26\0\11\4\4\0\25\4\26\0\5\4\1\55"+
    "\3\4\4\0\1\56\24\4\26\0\11\4\4\0\7\4"+
    "\1\57\15\4\26\0\11\4\4\0\1\60\6\4\1\61"+
    "\15\4\26\0\11\4\4\0\4\4\1\62\20\4\26\0"+
    "\11\4\4\0\13\4\1\63\11\4\26\0\11\4\55\0"+
    "\1\64\16\0\17\4\1\65\5\4\26\0\11\4\21\0"+
    "\1\66\6\0\1\66\24\0\1\64\43\0\1\67\4\0"+
    "\1\70\63\0\1\71\3\0\1\72\67\0\1\73\35\0"+
    "\25\74\17\0\1\75\6\0\11\74\4\0\25\76\12\0"+
    "\1\77\5\0\1\53\5\0\11\76\1\51\1\52\1\53"+
    "\33\0\1\100\67\0\1\101\67\0\1\102\35\0\25\4"+
    "\26\0\1\4\1\103\7\4\4\0\25\4\26\0\1\4"+
    "\1\104\7\4\4\0\23\4\1\105\1\4\26\0\11\4"+
    "\4\0\1\106\2\4\1\107\21\4\26\0\11\4\4\0"+
    "\1\110\4\4\1\111\5\4\1\112\11\4\26\0\11\4"+
    "\4\0\1\113\24\4\26\0\11\4\51\0\1\51\16\0"+
    "\1\51\1\0\1\51\40\0\1\77\5\0\1\52\17\0"+
    "\2\52\40\0\1\77\5\0\1\53\16\0\1\51\1\52"+
    "\1\53\1\0\2\4\1\114\22\4\26\0\11\4\4\0"+
    "\25\4\26\0\6\4\1\115\2\4\4\0\4\4\1\116"+
    "\20\4\26\0\11\4\4\0\3\4\1\117\5\4\1\120"+
    "\13\4\26\0\7\4\1\121\1\4\4\0\1\4\1\122"+
    "\1\123\22\4\26\0\11\4\4\0\5\4\1\124\17\4"+
    "\26\0\11\4\4\0\7\4\1\125\15\4\26\0\11\4"+
    "\4\0\13\4\1\126\11\4\26\0\11\4\21\0\1\127"+
    "\6\0\1\127\43\0\20\4\1\130\4\4\26\0\11\4"+
    "\21\0\1\66\6\0\1\66\70\0\1\67\107\0\1\131"+
    "\22\0\25\4\26\0\2\4\1\132\6\4\4\0\22\4"+
    "\1\133\2\4\26\0\11\4\4\0\25\4\26\0\4\4"+
    "\1\134\4\4\4\0\11\4\1\135\13\4\26\0\11\4"+
    "\4\0\1\136\24\4\26\0\11\4\4\0\10\4\1\137"+
    "\14\4\26\0\11\4\4\0\1\4\1\140\23\4\26\0"+
    "\11\4\4\0\11\4\1\141\13\4\26\0\11\4\4\0"+
    "\11\4\1\142\13\4\26\0\11\4\4\0\11\4\1\143"+
    "\13\4\26\0\11\4\4\0\10\4\1\144\14\4\26\0"+
    "\11\4\4\0\5\4\1\145\17\4\26\0\11\4\4\0"+
    "\2\4\1\146\22\4\26\0\11\4\4\0\13\4\1\147"+
    "\11\4\26\0\11\4\4\0\1\4\1\150\23\4\26\0"+
    "\11\4\4\0\12\4\1\151\12\4\26\0\11\4\4\0"+
    "\10\4\1\152\14\4\26\0\11\4\4\0\21\4\1\153"+
    "\3\4\26\0\11\4\4\0\17\4\1\154\5\4\26\0"+
    "\11\4\4\0\21\4\1\132\3\4\26\0\11\4\4\0"+
    "\25\4\26\0\10\4\1\155\4\0\1\156\24\4\26\0"+
    "\11\4\4\0\13\4\1\157\11\4\26\0\11\4\4\0"+
    "\2\4\1\160\22\4\26\0\11\4\4\0\7\4\1\161"+
    "\15\4\26\0\11\4\4\0\7\4\1\162\15\4\26\0"+
    "\11\4\4\0\6\4\1\163\16\4\26\0\11\4\4\0"+
    "\11\4\1\164\13\4\26\0\11\4\4\0\3\4\1\165"+
    "\21\4\26\0\11\4\4\0\7\4\1\166\15\4\26\0"+
    "\11\4\4\0\22\4\1\167\2\4\26\0\11\4\4\0"+
    "\25\4\26\0\2\4\1\170\6\4\4\0\1\171\24\4"+
    "\26\0\11\4\4\0\4\4\1\172\20\4\26\0\11\4"+
    "\4\0\5\4\1\173\17\4\26\0\11\4\4\0\3\4"+
    "\1\174\21\4\26\0\11\4\4\0\7\4\1\175\15\4"+
    "\26\0\11\4\4\0\1\176\24\4\26\0\11\4\4\0"+
    "\1\177\24\4\26\0\11\4\4\0\23\4\1\200\1\4"+
    "\26\0\11\4\4\0\20\4\1\201\4\4\26\0\11\4"+
    "\4\0\4\4\1\202\20\4\26\0\11\4\4\0\4\4"+
    "\1\203\20\4\26\0\11\4\4\0\3\4\1\204\21\4"+
    "\26\0\11\4\4\0\7\4\1\205\15\4\26\0\11\4"+
    "\4\0\10\4\1\206\14\4\26\0\11\4\4\0\25\4"+
    "\26\0\7\4\1\207\1\4\4\0\20\4\1\210\4\4"+
    "\26\0\11\4\4\0\23\4\1\211\1\4\26\0\11\4"+
    "\4\0\2\4\1\212\22\4\26\0\11\4\4\0\5\4"+
    "\1\213\17\4\26\0\11\4\4\0\7\4\1\214\15\4"+
    "\26\0\11\4\4\0\21\4\1\215\3\4\26\0\11\4"+
    "\4\0\22\4\1\216\2\4\26\0\11\4\4\0\1\217"+
    "\24\4\26\0\11\4\4\0\13\4\1\220\11\4\26\0"+
    "\11\4\4\0\21\4\1\221\3\4\26\0\11\4\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5600];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\15\1\3\11\1\1\11\11\5\1\1\11"+
    "\21\1\1\0\3\1\4\11\1\0\1\11\1\0\4\11"+
    "\26\1\1\11\70\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    /*
    public static void main(String[] args) {
      try{
        FileReader fitxer = new FileReader("/home/perejoan/Documentos/GitHub/Compilador/Compilador/Lexic/prova.txt");
        Scanner scanner = new Scanner(fitxer);
        scanner.next_token();
      }catch(Exception e) {
            System.err.println("error: "+e);
            e.printStackTrace(System.err);
      }
    }*/


    private ComplexSymbol symbol(int type) {
        // Sumar 1 per a que la primera lÃ­nia i columna no sigui 0.
        Location esquerra = new Location(yyline+1, yycolumn+1);
        Location dreta = new Location(yyline+1, yycolumn+yytext().length()+1);

        return new ComplexSymbol(ParserSym.terminalNames[type], type, esquerra, dreta);
    }
    
    /**
     ConstrucciÃ³ d'un symbol amb un atribut associat.
     **/
    private Symbol symbol(int type, Object value) {
        // Sumar 1 per a que la primera lÃ­nia i columna no sigui 0.
        Location esquerra = new Location(yyline+1, yycolumn+1);
        Location dreta = new Location(yyline+1, yycolumn+yytext().length()+1);

        return new ComplexSymbol(ParserSym.terminalNames[type], type, esquerra, dreta, value);
    }




  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 188) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("ERROR");
            } 
            // fall through
          case 58: break;
          case 2: 
            { return symbol(ParserSym.ID,this.yytext());
            } 
            // fall through
          case 59: break;
          case 3: 
            { return symbol(ParserSym.enter,0);
            } 
            // fall through
          case 60: break;
          case 4: 
            { return symbol(ParserSym.venter,Integer.parseInt(this.yytext()));
            } 
            // fall through
          case 61: break;
          case 5: 
            { return symbol(ParserSym.ADD);
            } 
            // fall through
          case 62: break;
          case 6: 
            { return symbol(ParserSym.SUB);
            } 
            // fall through
          case 63: break;
          case 7: 
            { return symbol(ParserSym.MULT);
            } 
            // fall through
          case 64: break;
          case 8: 
            { return symbol(ParserSym.DIV);
            } 
            // fall through
          case 65: break;
          case 9: 
            { return symbol(ParserSym.MOD);
            } 
            // fall through
          case 66: break;
          case 10: 
            { return symbol(ParserSym.ASSIGN);
            } 
            // fall through
          case 67: break;
          case 11: 
            { return symbol(ParserSym.DOSPUNTS);
            } 
            // fall through
          case 68: break;
          case 12: 
            { return symbol(ParserSym.INTERROG);
            } 
            // fall through
          case 69: break;
          case 13: 
            { return symbol(ParserSym.LPAREN);
            } 
            // fall through
          case 70: break;
          case 14: 
            { return symbol(ParserSym.RPAREN);
            } 
            // fall through
          case 71: break;
          case 15: 
            { return symbol(ParserSym.PUNTICOMA);
            } 
            // fall through
          case 72: break;
          case 16: 
            { return symbol(ParserSym.LCORCH);
            } 
            // fall through
          case 73: break;
          case 17: 
            { return symbol(ParserSym.RCORCH);
            } 
            // fall through
          case 74: break;
          case 18: 
            { return symbol(ParserSym.LCLAUDAT);
            } 
            // fall through
          case 75: break;
          case 19: 
            { return symbol(ParserSym.RCLAUDAT);
            } 
            // fall through
          case 76: break;
          case 20: 
            { /* No fer res amb els espais */
            } 
            // fall through
          case 77: break;
          case 21: 
            { return symbol(ParserSym.MENOR);
            } 
            // fall through
          case 78: break;
          case 22: 
            { return symbol(ParserSym.MAJOR);
            } 
            // fall through
          case 79: break;
          case 23: 
            { return symbol(ParserSym.COMA);
            } 
            // fall through
          case 80: break;
          case 24: 
            { 
            } 
            // fall through
          case 81: break;
          case 25: 
            { return symbol(ParserSym.AUTOSUM);
            } 
            // fall through
          case 82: break;
          case 26: 
            { return symbol(ParserSym.SUMAHI);
            } 
            // fall through
          case 83: break;
          case 27: 
            { return symbol(ParserSym.AUTOSUB);
            } 
            // fall through
          case 84: break;
          case 28: 
            { return symbol(ParserSym.RESTAHI);
            } 
            // fall through
          case 85: break;
          case 29: 
            { return symbol(ParserSym.IGIG);
            } 
            // fall through
          case 86: break;
          case 30: 
            { return symbol(ParserSym.vcadena,this.yytext());
            } 
            // fall through
          case 87: break;
          case 31: 
            { return symbol(ParserSym.DIF);
            } 
            // fall through
          case 88: break;
          case 32: 
            { return symbol(ParserSym.MENORI);
            } 
            // fall through
          case 89: break;
          case 33: 
            { return symbol(ParserSym.MAJORI);
            } 
            // fall through
          case 90: break;
          case 34: 
            { return symbol(ParserSym.si);
            } 
            // fall through
          case 91: break;
          case 35: 
            { return symbol(ParserSym.enter);
            } 
            // fall through
          case 92: break;
          case 36: 
            { return symbol(ParserSym.cadena);
            } 
            // fall through
          case 93: break;
          case 37: 
            { return symbol(ParserSym.caracter);
            } 
            // fall through
          case 94: break;
          case 38: 
            { return symbol(ParserSym.cas);
            } 
            // fall through
          case 95: break;
          case 39: 
            { return symbol(ParserSym.vdecimal,Double.parseDouble(this.yytext()));
            } 
            // fall through
          case 96: break;
          case 40: 
            { return symbol(ParserSym.vcaracter,this.yytext());
            } 
            // fall through
          case 97: break;
          case 41: 
            { return symbol(ParserSym.vlogic,Boolean.parseBoolean(this.yytext()));
            } 
            // fall through
          case 98: break;
          case 42: 
            { return symbol(ParserSym.per);
            } 
            // fall through
          case 99: break;
          case 43: 
            { return symbol(ParserSym.fer);
            } 
            // fall through
          case 100: break;
          case 44: 
            { return symbol(ParserSym.main);
            } 
            // fall through
          case 101: break;
          case 45: 
            { return symbol(ParserSym.logic);
            } 
            // fall through
          case 102: break;
          case 46: 
            { return symbol(ParserSym.sino);
            } 
            // fall through
          case 103: break;
          case 47: 
            { return symbol(ParserSym.tupla);
            } 
            // fall through
          case 104: break;
          case 48: 
            { return symbol(ParserSym.acaba);
            } 
            // fall through
          case 105: break;
          case 49: 
            { return symbol(ParserSym.metode);
            } 
            // fall through
          case 106: break;
          case 50: 
            { return symbol(ParserSym.decimal);
            } 
            // fall through
          case 107: break;
          case 51: 
            { return symbol(ParserSym.mentres);
            } 
            // fall through
          case 108: break;
          case 52: 
            { return symbol(ParserSym.retur);
            } 
            // fall through
          case 109: break;
          case 53: 
            { return symbol(ParserSym.entradaS);
            } 
            // fall through
          case 110: break;
          case 54: 
            { return symbol(ParserSym.constant,0);
            } 
            // fall through
          case 111: break;
          case 55: 
            { return symbol(ParserSym.pdefecte);
            } 
            // fall through
          case 112: break;
          case 56: 
            { return symbol(ParserSym.seleccio);
            } 
            // fall through
          case 113: break;
          case 57: 
            { return symbol(ParserSym.sortidaS);
            } 
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
