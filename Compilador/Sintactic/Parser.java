
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Compilador.Sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import Compilador.Lexic.Scanner.Token;
import java.io.PrintStream;
import java.util.HashMap;
import Compilador.TSimbols.Taula;
import Compilador.TSimbols.DT.*;
import Compilador.TSimbols.TD.*;
import Compilador.Sintactic.Simbols.*;
import Compilador.Sintactic.Simbols.SimbolValsTupla.KeyValue;
import java.util.Iterator;
import java.util.Stack;
import java.util.ArrayList;
import Compilador.TSimbols.Dada1;
import Compilador.TSimbols.Dada2;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\066\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\003\000\002\065\002" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\007\004\000\002\007\004\000\002" +
    "\016\004\000\002\016\002\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\004\000" +
    "\002\027\004\000\002\004\012\000\002\004\014\000\002" +
    "\024\004\000\002\025\003\000\002\005\015\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\023\003\000\002\023\002\000" +
    "\002\026\005\000\002\026\003\000\002\031\004\000\002" +
    "\017\012\000\002\020\012\000\002\033\013\000\002\033" +
    "\006\000\002\033\002\000\002\022\013\000\002\041\016" +
    "\000\002\041\014\000\002\042\003\000\002\042\002\000" +
    "\002\045\010\000\002\046\006\000\002\047\007\000\002" +
    "\047\007\000\002\071\004\000\002\071\006\000\002\071" +
    "\006\000\002\073\004\000\002\073\005\000\002\061\003" +
    "\000\002\061\006\000\002\061\005\000\002\070\005\000" +
    "\002\070\003\000\002\067\003\000\002\067\003\000\002" +
    "\067\004\000\002\067\004\000\002\067\004\000\002\063" +
    "\003\000\002\063\005\000\002\062\005\000\002\062\007" +
    "\000\002\062\003\000\002\062\005\000\002\064\012\000" +
    "\002\064\010\000\002\051\004\000\002\052\005\000\002" +
    "\052\005\000\002\052\002\000\002\053\004\000\002\054" +
    "\004\000\002\054\004\000\002\054\004\000\002\054\004" +
    "\000\002\054\004\000\002\054\004\000\002\054\002\000" +
    "\002\055\004\000\002\056\005\000\002\056\005\000\002" +
    "\056\002\000\002\057\004\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\060\002\000\002\050\005" +
    "\000\002\050\003\000\002\050\004\000\002\050\004\000" +
    "\002\050\003\000\002\050\004\000\002\050\004\000\002" +
    "\050\003\000\002\050\004\000\002\050\004\000\002\050" +
    "\003\000\002\050\003\000\002\050\004\000\002\050\004" +
    "\000\002\050\003\000\002\050\006\000\002\050\004\000" +
    "\002\050\004\000\002\050\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\024\003\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\067\ufffc\072\ufffc\001\002\000\004" +
    "\002\u0109\001\002\000\024\003\021\050\014\051\017\052" +
    "\010\053\012\054\015\055\026\067\013\072\020\001\002" +
    "\000\004\027\u0108\001\002\000\004\002\000\001\002\000" +
    "\006\004\uffe3\036\uffe3\001\002\000\004\002\ufffd\001\002" +
    "\000\006\004\uffe2\036\uffe2\001\002\000\020\004\220\050" +
    "\014\051\017\052\010\053\012\054\015\075\221\001\002" +
    "\000\006\004\uffe5\036\uffe5\001\002\000\006\004\uffe1\036" +
    "\uffe1\001\002\000\024\003\021\050\014\051\017\052\010" +
    "\053\012\054\015\055\026\067\013\072\020\001\002\000" +
    "\006\004\uffe4\036\uffe4\001\002\000\014\050\014\051\017" +
    "\052\010\053\012\054\015\001\002\000\004\027\211\001" +
    "\002\000\004\027\210\001\002\000\024\003\021\050\014" +
    "\051\017\052\010\053\012\054\015\055\026\067\013\072" +
    "\020\001\002\000\004\004\166\001\002\000\004\027\164" +
    "\001\002\000\004\004\027\001\002\000\004\017\030\001" +
    "\002\000\004\020\031\001\002\000\004\021\032\001\002" +
    "\000\006\004\033\017\035\001\002\000\124\003\uffc8\004" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\154" +
    "\020\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\034\uffc8\035\155\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\050" +
    "\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056\uffc8" +
    "\064\uffc8\065\uffc8\066\uffc8\067\uffc8\072\uffc8\073\uffc8\074" +
    "\uffc8\001\002\000\004\027\uffb7\001\002\000\026\004\033" +
    "\005\036\006\052\007\040\010\041\011\050\012\043\013" +
    "\046\017\053\047\051\001\002\000\066\003\uff9d\012\uff9d" +
    "\013\uff9d\014\uff9d\015\uff9d\016\uff9d\020\uff9d\026\uff9d\027" +
    "\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d" +
    "\044\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d\052\uff9d\053" +
    "\uff9d\054\uff9d\055\uff9d\067\uff9d\072\uff9d\001\002\000\040" +
    "\003\uffb3\020\uffb3\026\uffb3\027\uffb3\036\uffb3\045\147\046" +
    "\145\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\067\uffb3\072\uffb3\001\002\000\066\003\uff93\012\uff93\013" +
    "\uff93\014\uff93\015\uff93\016\uff93\020\uff93\026\uff93\027\uff93" +
    "\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\050\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\055\uff93\067\uff93\072\uff93\001\002\000\066\003" +
    "\uff97\012\uff97\013\uff97\014\uff97\015\uff97\016\uff97\020\uff97" +
    "\026\uff97\027\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\067\uff97\072\uff97\001" +
    "\002\000\066\003\uff96\012\uff96\013\uff96\014\uff96\015\uff96" +
    "\016\uff96\020\uff96\026\uff96\027\uff96\036\uff96\037\uff96\040" +
    "\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\067" +
    "\uff96\072\uff96\001\002\000\012\004\033\005\141\006\142" +
    "\011\144\001\002\000\004\020\140\001\002\000\054\003" +
    "\uffab\020\uffab\026\uffab\027\uffab\036\uffab\037\125\040\123" +
    "\041\124\042\131\043\130\044\126\045\uffab\046\uffab\050" +
    "\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\067\uffab" +
    "\072\uffab\001\002\000\014\004\033\005\114\006\115\011" +
    "\117\017\120\001\002\000\060\003\uffa7\012\107\013\105" +
    "\020\uffa7\026\uffa7\027\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\067\uffa7\072" +
    "\uffa7\001\002\000\066\003\uff9a\012\uff9a\013\uff9a\014\uff9a" +
    "\015\uff9a\016\uff9a\020\uff9a\026\uff9a\027\uff9a\036\uff9a\037" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a" +
    "\046\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\067\uff9a\072\uff9a\001\002\000\010\004\033\007\101" +
    "\017\102\001\002\000\066\003\uffa0\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\020\uffa0\026\uffa0\027\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\067\uffa0\072\uffa0\001\002\000\026\004\033\005" +
    "\036\006\052\007\040\010\041\011\050\012\043\013\046" +
    "\017\053\047\051\001\002\000\066\003\uffa2\012\uffa2\013" +
    "\uffa2\014\065\015\066\016\064\020\uffa2\026\uffa2\027\uffa2" +
    "\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044" +
    "\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\054\uffa2\055\uffa2\067\uffa2\072\uffa2\001\002\000\010\020" +
    "\uffba\026\057\036\056\001\002\000\026\004\033\005\036" +
    "\006\052\007\040\010\041\011\050\012\043\013\046\017" +
    "\053\047\051\001\002\000\004\004\060\001\002\000\006" +
    "\020\uffb9\036\061\001\002\000\026\004\033\005\036\006" +
    "\052\007\040\010\041\011\050\012\043\013\046\017\053" +
    "\047\051\001\002\000\004\020\uffbb\001\002\000\004\020" +
    "\uffbc\001\002\000\026\004\033\005\036\006\052\007\040" +
    "\010\041\011\050\012\043\013\046\017\053\047\051\001" +
    "\002\000\026\004\033\005\036\006\052\007\040\010\041" +
    "\011\050\012\043\013\046\017\053\047\051\001\002\000" +
    "\026\004\033\005\036\006\052\007\040\010\041\011\050" +
    "\012\043\013\046\017\053\047\051\001\002\000\060\003" +
    "\uffa6\012\uffa6\013\uffa6\020\uffa6\026\uffa6\027\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\067\uffa6\072\uffa6\001\002\000\066\003\uffa2\012" +
    "\uffa2\013\uffa2\014\065\015\066\016\064\020\uffa2\026\uffa2" +
    "\027\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043" +
    "\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2" +
    "\053\uffa2\054\uffa2\055\uffa2\067\uffa2\072\uffa2\001\002\000" +
    "\060\003\uffa4\012\uffa4\013\uffa4\020\uffa4\026\uffa4\027\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4" +
    "\054\uffa4\055\uffa4\067\uffa4\072\uffa4\001\002\000\066\003" +
    "\uffa2\012\uffa2\013\uffa2\014\065\015\066\016\064\020\uffa2" +
    "\026\uffa2\027\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042" +
    "\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2" +
    "\052\uffa2\053\uffa2\054\uffa2\055\uffa2\067\uffa2\072\uffa2\001" +
    "\002\000\060\003\uffa5\012\uffa5\013\uffa5\020\uffa5\026\uffa5" +
    "\027\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\067\uffa5\072\uffa5\001\002\000" +
    "\066\003\uffa2\012\uffa2\013\uffa2\014\065\015\066\016\064" +
    "\020\uffa2\026\uffa2\027\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\067\uffa2\072" +
    "\uffa2\001\002\000\060\003\uffa3\012\uffa3\013\uffa3\020\uffa3" +
    "\026\uffa3\027\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3" +
    "\052\uffa3\053\uffa3\054\uffa3\055\uffa3\067\uffa3\072\uffa3\001" +
    "\002\000\004\020\077\001\002\000\066\003\uffa1\012\uffa1" +
    "\013\uffa1\014\uffa1\015\uffa1\016\uffa1\020\uffa1\026\uffa1\027" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\067\uffa1\072\uffa1\001\002\000\066" +
    "\003\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\020" +
    "\uff90\026\uff90\027\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\050\uff90\051" +
    "\uff90\052\uff90\053\uff90\054\uff90\055\uff90\067\uff90\072\uff90" +
    "\001\002\000\066\003\uff91\012\uff91\013\uff91\014\uff91\015" +
    "\uff91\016\uff91\020\uff91\026\uff91\027\uff91\036\uff91\037\uff91" +
    "\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046" +
    "\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054\uff91\055\uff91" +
    "\067\uff91\072\uff91\001\002\000\026\004\033\005\036\006" +
    "\052\007\040\010\041\011\050\012\043\013\046\017\053" +
    "\047\051\001\002\000\004\020\104\001\002\000\066\003" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f" +
    "\026\uff8f\027\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\067\uff8f\072\uff8f\001" +
    "\002\000\026\004\033\005\036\006\052\007\040\010\041" +
    "\011\050\012\043\013\046\017\053\047\051\001\002\000" +
    "\054\003\uffaa\020\uffaa\026\uffaa\027\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\067\uffaa\072\uffaa\001\002\000\026\004\033\005\036\006" +
    "\052\007\040\010\041\011\050\012\043\013\046\017\053" +
    "\047\051\001\002\000\060\003\uffa7\012\107\013\105\020" +
    "\uffa7\026\uffa7\027\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7\051" +
    "\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\067\uffa7\072\uffa7" +
    "\001\002\000\054\003\uffa9\020\uffa9\026\uffa9\027\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\067\uffa9\072\uffa9\001\002\000\060\003\uffa7" +
    "\012\107\013\105\020\uffa7\026\uffa7\027\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7" +
    "\046\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055" +
    "\uffa7\067\uffa7\072\uffa7\001\002\000\054\003\uffa8\020\uffa8" +
    "\026\uffa8\027\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\042" +
    "\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\050\uffa8\051\uffa8" +
    "\052\uffa8\053\uffa8\054\uffa8\055\uffa8\067\uffa8\072\uffa8\001" +
    "\002\000\066\003\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b" +
    "\016\uff9b\020\uff9b\026\uff9b\027\uff9b\036\uff9b\037\uff9b\040" +
    "\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b" +
    "\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\067" +
    "\uff9b\072\uff9b\001\002\000\066\003\uff9f\012\uff9f\013\uff9f" +
    "\014\uff9f\015\uff9f\016\uff9f\020\uff9f\026\uff9f\027\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\067\uff9f\072\uff9f\001\002\000\066\003\uff95" +
    "\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\020\uff95\026" +
    "\uff95\027\uff95\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95" +
    "\043\uff95\044\uff95\045\uff95\046\uff95\050\uff95\051\uff95\052" +
    "\uff95\053\uff95\054\uff95\055\uff95\067\uff95\072\uff95\001\002" +
    "\000\066\003\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016" +
    "\uff98\020\uff98\026\uff98\027\uff98\036\uff98\037\uff98\040\uff98" +
    "\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\067\uff98" +
    "\072\uff98\001\002\000\026\004\033\005\036\006\052\007" +
    "\040\010\041\011\050\012\043\013\046\017\053\047\051" +
    "\001\002\000\004\020\122\001\002\000\066\003\uff92\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\020\uff92\026\uff92" +
    "\027\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\044\uff92\045\uff92\046\uff92\050\uff92\051\uff92\052\uff92" +
    "\053\uff92\054\uff92\055\uff92\067\uff92\072\uff92\001\002\000" +
    "\026\004\033\005\036\006\052\007\040\010\041\011\050" +
    "\012\043\013\046\017\053\047\051\001\002\000\026\004" +
    "\033\005\036\006\052\007\040\010\041\011\050\012\043" +
    "\013\046\017\053\047\051\001\002\000\026\004\033\005" +
    "\036\006\052\007\040\010\041\011\050\012\043\013\046" +
    "\017\053\047\051\001\002\000\026\004\033\005\036\006" +
    "\052\007\040\010\041\011\050\012\043\013\046\017\053" +
    "\047\051\001\002\000\040\003\uffb2\020\uffb2\026\uffb2\027" +
    "\uffb2\036\uffb2\045\uffb2\046\uffb2\050\uffb2\051\uffb2\052\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\067\uffb2\072\uffb2\001\002\000" +
    "\026\004\033\005\036\006\052\007\040\010\041\011\050" +
    "\012\043\013\046\017\053\047\051\001\002\000\026\004" +
    "\033\005\036\006\052\007\040\010\041\011\050\012\043" +
    "\013\046\017\053\047\051\001\002\000\040\003\uffac\020" +
    "\uffac\026\uffac\027\uffac\036\uffac\045\uffac\046\uffac\050\uffac" +
    "\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\067\uffac\072" +
    "\uffac\001\002\000\040\003\uffaf\020\uffaf\026\uffaf\027\uffaf" +
    "\036\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf\052\uffaf\053" +
    "\uffaf\054\uffaf\055\uffaf\067\uffaf\072\uffaf\001\002\000\040" +
    "\003\uffae\020\uffae\026\uffae\027\uffae\036\uffae\045\uffae\046" +
    "\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae" +
    "\067\uffae\072\uffae\001\002\000\040\003\uffb0\020\uffb0\026" +
    "\uffb0\027\uffb0\036\uffb0\045\uffb0\046\uffb0\050\uffb0\051\uffb0" +
    "\052\uffb0\053\uffb0\054\uffb0\055\uffb0\067\uffb0\072\uffb0\001" +
    "\002\000\040\003\uffad\020\uffad\026\uffad\027\uffad\036\uffad" +
    "\045\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053\uffad\054" +
    "\uffad\055\uffad\067\uffad\072\uffad\001\002\000\040\003\uffb1" +
    "\020\uffb1\026\uffb1\027\uffb1\036\uffb1\045\uffb1\046\uffb1\050" +
    "\uffb1\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\067\uffb1" +
    "\072\uffb1\001\002\000\004\027\uffb8\001\002\000\066\003" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\016\uff9c\020\uff9c" +
    "\026\uff9c\027\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042" +
    "\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\067\uff9c\072\uff9c\001" +
    "\002\000\066\003\uff9e\012\uff9e\013\uff9e\014\uff9e\015\uff9e" +
    "\016\uff9e\020\uff9e\026\uff9e\027\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\067" +
    "\uff9e\072\uff9e\001\002\000\066\003\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\020\uff94\026\uff94\027\uff94\036" +
    "\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054" +
    "\uff94\055\uff94\067\uff94\072\uff94\001\002\000\066\003\uff99" +
    "\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\020\uff99\026" +
    "\uff99\027\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\050\uff99\051\uff99\052" +
    "\uff99\053\uff99\054\uff99\055\uff99\067\uff99\072\uff99\001\002" +
    "\000\026\004\033\005\036\006\052\007\040\010\041\011" +
    "\050\012\043\013\046\017\053\047\051\001\002\000\034" +
    "\003\uffb6\020\uffb6\026\uffb6\027\uffb6\036\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\067\uffb6\072\uffb6" +
    "\001\002\000\026\004\033\005\036\006\052\007\040\010" +
    "\041\011\050\012\043\013\046\017\053\047\051\001\002" +
    "\000\040\003\uffb3\020\uffb3\026\uffb3\027\uffb3\036\uffb3\045" +
    "\147\046\145\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3" +
    "\055\uffb3\067\uffb3\072\uffb3\001\002\000\034\003\uffb4\020" +
    "\uffb4\026\uffb4\027\uffb4\036\uffb4\050\uffb4\051\uffb4\052\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\067\uffb4\072\uffb4\001\002\000" +
    "\040\003\uffb3\020\uffb3\026\uffb3\027\uffb3\036\uffb3\045\147" +
    "\046\145\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\055" +
    "\uffb3\067\uffb3\072\uffb3\001\002\000\034\003\uffb5\020\uffb5" +
    "\026\uffb5\027\uffb5\036\uffb5\050\uffb5\051\uffb5\052\uffb5\053" +
    "\uffb5\054\uffb5\055\uffb5\067\uffb5\072\uffb5\001\002\000\026" +
    "\004\033\005\036\006\052\007\040\010\041\011\050\012" +
    "\043\013\046\017\053\047\051\001\002\000\004\004\156" +
    "\001\002\000\120\003\uffc6\004\uffc6\012\uffc6\013\uffc6\014" +
    "\uffc6\015\uffc6\016\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\034\uffc6\036\uffc6\037" +
    "\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6" +
    "\046\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\064\uffc6\065\uffc6\066\uffc6\067\uffc6\072\uffc6" +
    "\073\uffc6\074\uffc6\001\002\000\004\020\163\001\002\000" +
    "\006\020\uffbe\036\161\001\002\000\026\004\033\005\036" +
    "\006\052\007\040\010\041\011\050\012\043\013\046\017" +
    "\053\047\051\001\002\000\004\020\uffbd\001\002\000\120" +
    "\003\uffc7\004\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7\041" +
    "\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\072\uffc7\073\uffc7\074\uffc7" +
    "\001\002\000\044\003\ufffa\004\ufffa\034\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\064\ufffa" +
    "\065\ufffa\066\ufffa\067\ufffa\072\ufffa\073\ufffa\074\ufffa\001" +
    "\002\000\006\021\171\027\uffcd\001\002\000\010\021\uffc4" +
    "\027\uffc4\036\167\001\002\000\004\004\166\001\002\000" +
    "\006\021\uffc5\027\uffc5\001\002\000\026\004\033\005\036" +
    "\006\052\007\040\010\041\011\050\012\043\013\046\017" +
    "\053\047\051\001\002\000\050\012\uff96\013\uff96\014\uff96" +
    "\015\uff96\016\uff96\021\201\022\176\023\177\024\200\025" +
    "\202\027\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\001\002\000\004\027\uffcb\001" +
    "\002\000\004\027\uffcc\001\002\000\004\027\uffca\001\002" +
    "\000\004\027\uffc3\001\002\000\004\027\uffc2\001\002\000" +
    "\026\004\033\005\036\006\052\007\040\010\041\011\050" +
    "\012\043\013\046\017\053\047\051\001\002\000\026\004" +
    "\033\005\036\006\052\007\040\010\041\011\050\012\043" +
    "\013\046\017\053\047\051\001\002\000\026\004\033\005" +
    "\036\006\052\007\040\010\041\011\050\012\043\013\046" +
    "\017\053\047\051\001\002\000\004\027\uffc0\001\002\000" +
    "\004\027\uffc9\001\002\000\004\027\uffbf\001\002\000\004" +
    "\027\uffc1\001\002\000\004\002\ufffe\001\002\000\044\003" +
    "\ufffb\004\ufffb\034\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\064\ufffb\065\ufffb\066\ufffb\067" +
    "\ufffb\072\ufffb\073\ufffb\074\ufffb\001\002\000\044\003\ufff8" +
    "\004\ufff8\034\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054" +
    "\ufff8\055\ufff8\056\ufff8\064\ufff8\065\ufff8\066\ufff8\067\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\001\002\000\004\004\166\001" +
    "\002\000\004\021\214\001\002\000\026\004\033\005\036" +
    "\006\052\007\040\010\041\011\050\012\043\013\046\017" +
    "\053\047\051\001\002\000\004\027\uffce\001\002\000\004" +
    "\027\uffcf\001\002\000\004\002\uffff\001\002\000\004\017" +
    "\u0102\001\002\000\004\017\371\001\002\000\004\004\223" +
    "\001\002\000\004\017\224\001\002\000\016\020\uffdf\050" +
    "\014\051\017\052\010\053\012\054\015\001\002\000\006" +
    "\020\uffdd\036\367\001\002\000\004\020\232\001\002\000" +
    "\004\004\231\001\002\000\004\020\uffe0\001\002\000\006" +
    "\020\uffdc\036\uffdc\001\002\000\004\033\233\001\002\000" +
    "\042\003\021\004\033\034\ufff4\050\014\051\017\052\010" +
    "\053\012\054\015\055\026\056\256\064\257\065\244\066" +
    "\255\072\020\073\245\074\234\001\002\000\004\017\364" +
    "\001\002\000\004\027\363\001\002\000\054\003\uffe7\004" +
    "\uffe7\021\201\022\176\023\177\024\200\025\202\034\uffe7" +
    "\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056" +
    "\uffe7\064\uffe7\065\uffe7\066\uffe7\072\uffe7\073\uffe7\074\uffe7" +
    "\001\002\000\042\003\ufff2\004\ufff2\034\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\064\ufff2" +
    "\065\ufff2\066\ufff2\072\ufff2\073\ufff2\074\ufff2\001\002\000" +
    "\042\003\021\004\033\034\ufff4\050\014\051\017\052\010" +
    "\053\012\054\015\055\026\056\256\064\257\065\244\066" +
    "\255\072\020\073\245\074\234\001\002\000\042\003\uffef" +
    "\004\uffef\034\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054" +
    "\uffef\055\uffef\056\uffef\064\uffef\065\uffef\066\uffef\072\uffef" +
    "\073\uffef\074\uffef\001\002\000\004\027\361\001\002\000" +
    "\042\003\ufff1\004\ufff1\034\ufff1\050\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\072\ufff1\073\ufff1\074\ufff1\001\002\000\004\033\351" +
    "\001\002\000\004\017\344\001\002\000\004\027\343\001" +
    "\002\000\042\003\ufff3\004\ufff3\034\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\054\ufff3\055\ufff3\056\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\072\ufff3\073\ufff3\074\ufff3\001\002\000\042" +
    "\003\uffee\004\uffee\034\uffee\050\uffee\051\uffee\052\uffee\053" +
    "\uffee\054\uffee\055\uffee\056\uffee\064\uffee\065\uffee\066\uffee" +
    "\072\uffee\073\uffee\074\uffee\001\002\000\004\027\342\001" +
    "\002\000\004\034\336\001\002\000\042\003\uffed\004\uffed" +
    "\034\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055" +
    "\uffed\056\uffed\064\uffed\065\uffed\066\uffed\072\uffed\073\uffed" +
    "\074\uffed\001\002\000\042\003\ufff0\004\ufff0\034\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\064\ufff0\065\ufff0\066\ufff0\072\ufff0\073\ufff0\074\ufff0\001" +
    "\002\000\004\017\312\001\002\000\004\017\267\001\002" +
    "\000\004\017\260\001\002\000\026\004\033\005\036\006" +
    "\052\007\040\010\041\011\050\012\043\013\046\017\053" +
    "\047\051\001\002\000\004\020\262\001\002\000\004\065" +
    "\263\001\002\000\004\033\264\001\002\000\042\003\021" +
    "\004\033\034\ufff4\050\014\051\017\052\010\053\012\054" +
    "\015\055\026\056\256\064\257\065\244\066\255\072\020" +
    "\073\245\074\234\001\002\000\004\034\266\001\002\000" +
    "\042\003\uffdb\004\uffdb\034\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\072\uffdb\073\uffdb\074\uffdb\001\002\000\026\004\033" +
    "\005\036\006\052\007\040\010\041\011\050\012\043\013" +
    "\046\017\053\047\051\001\002\000\004\020\271\001\002" +
    "\000\004\033\272\001\002\000\042\003\021\004\033\034" +
    "\ufff4\050\014\051\017\052\010\053\012\054\015\055\026" +
    "\056\256\064\257\065\244\066\255\072\020\073\245\074" +
    "\234\001\002\000\004\034\274\001\002\000\044\003\uffd7" +
    "\004\uffd7\034\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\057\275\064\uffd7\065\uffd7\066\uffd7" +
    "\072\uffd7\073\uffd7\074\uffd7\001\002\000\006\033\300\056" +
    "\277\001\002\000\042\003\uffda\004\uffda\034\uffda\050\uffda" +
    "\051\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\064" +
    "\uffda\065\uffda\066\uffda\072\uffda\073\uffda\074\uffda\001\002" +
    "\000\004\017\303\001\002\000\042\003\021\004\033\034" +
    "\ufff4\050\014\051\017\052\010\053\012\054\015\055\026" +
    "\056\256\064\257\065\244\066\255\072\020\073\245\074" +
    "\234\001\002\000\004\034\302\001\002\000\042\003\uffd8" +
    "\004\uffd8\034\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\064\uffd8\065\uffd8\066\uffd8\072\uffd8" +
    "\073\uffd8\074\uffd8\001\002\000\026\004\033\005\036\006" +
    "\052\007\040\010\041\011\050\012\043\013\046\017\053" +
    "\047\051\001\002\000\004\020\305\001\002\000\004\033" +
    "\306\001\002\000\042\003\021\004\033\034\ufff4\050\014" +
    "\051\017\052\010\053\012\054\015\055\026\056\256\064" +
    "\257\065\244\066\255\072\020\073\245\074\234\001\002" +
    "\000\004\034\310\001\002\000\044\003\uffd7\004\uffd7\034" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\275\064\uffd7\065\uffd7\066\uffd7\072\uffd7\073" +
    "\uffd7\074\uffd7\001\002\000\042\003\uffd9\004\uffd9\034\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056" +
    "\uffd9\064\uffd9\065\uffd9\066\uffd9\072\uffd9\073\uffd9\074\uffd9" +
    "\001\002\000\016\027\313\050\014\051\017\052\010\053" +
    "\012\054\015\001\002\000\030\004\033\005\036\006\052" +
    "\007\040\010\041\011\050\012\043\013\046\017\053\027" +
    "\uffd2\047\051\001\002\000\004\004\166\001\002\000\004" +
    "\027\316\001\002\000\030\004\033\005\036\006\052\007" +
    "\040\010\041\011\050\012\043\013\046\017\053\027\uffd2" +
    "\047\051\001\002\000\004\027\321\001\002\000\006\020" +
    "\uffd3\027\uffd3\001\002\000\030\004\033\005\036\006\052" +
    "\007\040\010\041\011\050\012\043\013\046\017\053\020" +
    "\uffd2\047\051\001\002\000\004\020\323\001\002\000\004" +
    "\033\324\001\002\000\040\003\021\004\033\050\014\051" +
    "\017\052\010\053\012\054\015\055\026\056\256\064\257" +
    "\065\244\066\255\072\020\073\245\074\234\001\002\000" +
    "\004\034\326\001\002\000\042\003\uffd5\004\uffd5\034\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\064\uffd5\065\uffd5\066\uffd5\072\uffd5\073\uffd5\074\uffd5" +
    "\001\002\000\004\027\330\001\002\000\030\004\033\005" +
    "\036\006\052\007\040\010\041\011\050\012\043\013\046" +
    "\017\053\020\uffd2\047\051\001\002\000\004\020\332\001" +
    "\002\000\004\033\333\001\002\000\040\003\021\004\033" +
    "\050\014\051\017\052\010\053\012\054\015\055\026\056" +
    "\256\064\257\065\244\066\255\072\020\073\245\074\234" +
    "\001\002\000\004\034\335\001\002\000\042\003\uffd4\004" +
    "\uffd4\034\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\064\uffd4\065\uffd4\066\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\001\002\000\004\070\340\001\002\000\024" +
    "\003\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\067\uffe9\072\uffe9\001\002\000\026\004\033\005\036" +
    "\006\052\007\040\010\041\011\050\012\043\013\046\017" +
    "\053\047\051\001\002\000\024\003\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\055\uffe8\067\uffe8\072\uffe8\001" +
    "\002\000\042\003\ufff7\004\ufff7\034\ufff7\050\ufff7\051\ufff7" +
    "\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\072\ufff7\073\ufff7\074\ufff7\001\002\000\042" +
    "\003\uffeb\004\uffeb\034\uffeb\050\uffeb\051\uffeb\052\uffeb\053" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\064\uffeb\065\uffeb\066\uffeb" +
    "\072\uffeb\073\uffeb\074\uffeb\001\002\000\014\050\014\051" +
    "\017\052\010\053\012\054\015\001\002\000\004\036\346" +
    "\001\002\000\004\004\033\001\002\000\004\020\350\001" +
    "\002\000\004\027\uffd1\001\002\000\042\003\021\004\033" +
    "\034\ufff4\050\014\051\017\052\010\053\012\054\015\055" +
    "\026\056\256\064\257\065\244\066\255\072\020\073\245" +
    "\074\234\001\002\000\004\034\353\001\002\000\004\064" +
    "\354\001\002\000\004\017\355\001\002\000\002\001\002" +
    "\000\004\020\357\001\002\000\004\027\360\001\002\000" +
    "\042\003\uffd6\004\uffd6\034\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\064\uffd6\065\uffd6\066" +
    "\uffd6\072\uffd6\073\uffd6\074\uffd6\001\002\000\042\003\uffec" +
    "\004\uffec\034\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\064\uffec\065\uffec\066\uffec\072\uffec" +
    "\073\uffec\074\uffec\001\002\000\004\034\ufff5\001\002\000" +
    "\042\003\ufff6\004\ufff6\034\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\055\ufff6\056\ufff6\064\ufff6\065\ufff6\066" +
    "\ufff6\072\ufff6\073\ufff6\074\ufff6\001\002\000\026\004\033" +
    "\005\036\006\052\007\040\010\041\011\050\012\043\013" +
    "\046\017\053\047\051\001\002\000\004\020\366\001\002" +
    "\000\004\027\uffd0\001\002\000\014\050\014\051\017\052" +
    "\010\053\012\054\015\001\002\000\004\020\uffde\001\002" +
    "\000\004\053\372\001\002\000\004\004\373\001\002\000" +
    "\004\031\374\001\002\000\004\032\375\001\002\000\004" +
    "\020\376\001\002\000\004\033\377\001\002\000\042\003" +
    "\021\004\033\034\ufff4\050\014\051\017\052\010\053\012" +
    "\054\015\055\026\056\256\064\257\065\244\066\255\072" +
    "\020\073\245\074\234\001\002\000\004\034\u0101\001\002" +
    "\000\004\002\uffe6\001\002\000\016\020\uffdf\050\014\051" +
    "\017\052\010\053\012\054\015\001\002\000\004\020\u0104" +
    "\001\002\000\004\033\u0105\001\002\000\042\003\021\004" +
    "\033\034\ufff4\050\014\051\017\052\010\053\012\054\015" +
    "\055\026\056\256\064\257\065\244\066\255\072\020\073" +
    "\245\074\234\001\002\000\004\034\u0107\001\002\000\024" +
    "\003\uffea\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055" +
    "\uffea\067\uffea\072\uffea\001\002\000\044\003\ufff9\004\ufff9" +
    "\034\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055" +
    "\ufff9\056\ufff9\064\ufff9\065\ufff9\066\ufff9\067\ufff9\072\ufff9" +
    "\073\ufff9\074\ufff9\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0107\000\006\065\004\066\003\001\001\000\002\001" +
    "\001\000\022\002\006\003\015\004\022\005\010\047\005" +
    "\064\021\071\024\072\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\002\216\003\015\004\022\005\010" +
    "\047\005\064\021\071\024\072\023\001\001\000\002\001" +
    "\001\000\004\072\211\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\206\003\015\004\022\005\010\047" +
    "\005\064\021\071\024\072\023\001\001\000\004\070\164" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\050" +
    "\053\051\054\053\036\055\044\057\046\061\041\062\043" +
    "\001\001\000\002\001\001\000\004\052\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\142\001\001\000\002\001\001\000\004\054\126\001" +
    "\001\000\004\061\115\001\001\000\004\056\105\001\001" +
    "\000\002\001\001\000\004\061\077\001\001\000\002\001" +
    "\001\000\016\050\053\051\075\053\036\055\044\057\046" +
    "\061\041\001\001\000\004\060\066\001\001\000\002\001" +
    "\001\000\020\050\053\051\054\053\036\055\044\057\046" +
    "\061\041\062\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\050\053\051\054\053\036\055\044\057\046" +
    "\061\041\062\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\050\073\061\041\001\001\000\006\050\071" +
    "\061\041\001\001\000\006\050\067\061\041\001\001\000" +
    "\002\001\001\000\004\060\070\001\001\000\002\001\001" +
    "\000\004\060\072\001\001\000\002\001\001\000\004\060" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\050" +
    "\053\051\102\053\036\055\044\057\046\061\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\050\053\057" +
    "\111\061\041\001\001\000\002\001\001\000\010\050\053" +
    "\057\107\061\041\001\001\000\004\056\110\001\001\000" +
    "\002\001\001\000\004\056\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\050\053\051\120\053\036\055\044" +
    "\057\046\061\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\050\053\055\136\057\046\061\041\001\001" +
    "\000\012\050\053\055\135\057\046\061\041\001\001\000" +
    "\012\050\053\055\134\057\046\061\041\001\001\000\012" +
    "\050\053\055\133\057\046\061\041\001\001\000\002\001" +
    "\001\000\012\050\053\055\132\057\046\061\041\001\001" +
    "\000\012\050\053\055\131\057\046\061\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\050\053\053\151\055\044\057" +
    "\046\061\041\001\001\000\002\001\001\000\014\050\053" +
    "\053\147\055\044\057\046\061\041\001\001\000\004\052" +
    "\150\001\001\000\002\001\001\000\004\052\152\001\001" +
    "\000\002\001\001\000\020\050\053\051\157\053\036\055" +
    "\044\057\046\061\041\063\156\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\050\053\051\157\053\036\055\044\057\046\061\041" +
    "\063\161\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\070\167\001\001\000\002\001\001\000\020\050\053\051" +
    "\173\053\036\055\044\057\046\061\171\073\172\001\001" +
    "\000\004\067\174\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\050\053\051\205\053\036\055\044\057\046\061" +
    "\041\001\001\000\020\050\053\051\204\053\036\055\044" +
    "\057\046\061\171\073\203\001\001\000\016\050\053\051" +
    "\202\053\036\055\044\057\046\061\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\070\212\001\001\000\002\001\001\000\020\050" +
    "\053\051\215\053\036\055\044\057\046\061\171\073\214" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\225\026\227\031\224\072" +
    "\226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\003\246\007\236\015\250\016\251\017\242" +
    "\020\240\022\253\025\247\027\237\041\252\045\241\046" +
    "\245\047\005\061\235\064\021\071\024\072\023\073\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\174\001\001\000\002\001\001\000\046\003\246\007\236" +
    "\015\250\016\361\017\242\020\240\022\253\025\247\027" +
    "\237\041\252\045\241\046\245\047\005\061\235\064\021" +
    "\071\024\072\023\073\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\050\053\051\260\053\036\055\044" +
    "\057\046\061\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\246\007\236\015\250" +
    "\016\264\017\242\020\240\022\253\025\247\027\237\041" +
    "\252\045\241\046\245\047\005\061\235\064\021\071\024" +
    "\072\023\073\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\050\053\051\267\053\036\055\044\057\046" +
    "\061\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\246\007\236\015\250\016\272\017\242\020\240" +
    "\022\253\025\247\027\237\041\252\045\241\046\245\047" +
    "\005\061\235\064\021\071\024\072\023\073\234\001\001" +
    "\000\002\001\001\000\004\033\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\046\003\246" +
    "\007\236\015\250\016\300\017\242\020\240\022\253\025" +
    "\247\027\237\041\252\045\241\046\245\047\005\061\235" +
    "\064\021\071\024\072\023\073\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\050\053\051\303\053\036" +
    "\055\044\057\046\061\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\246\007\236\015\250\016\306" +
    "\017\242\020\240\022\253\025\247\027\237\041\252\045" +
    "\241\046\245\047\005\061\235\064\021\071\024\072\023" +
    "\073\234\001\001\000\002\001\001\000\004\033\310\001" +
    "\001\000\002\001\001\000\004\072\313\001\001\000\020" +
    "\042\326\050\053\051\317\053\036\055\044\057\046\061" +
    "\041\001\001\000\004\070\314\001\001\000\002\001\001" +
    "\000\020\042\316\050\053\051\317\053\036\055\044\057" +
    "\046\061\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\042\321\050\053\051\317\053\036\055\044\057" +
    "\046\061\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\246\007\236\015\250\017\242\020\240\022" +
    "\253\025\247\027\324\041\252\045\241\046\245\047\005" +
    "\061\235\064\021\071\024\072\023\073\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\042\330\050\053\051\317\053\036\055\044\057\046\061" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\246\007\236\015\250\017\242\020\240\022\253\025" +
    "\247\027\333\041\252\045\241\046\245\047\005\061\235" +
    "\064\021\071\024\072\023\073\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\336\001\001\000\002" +
    "\001\001\000\016\050\053\051\340\053\036\055\044\057" +
    "\046\061\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\072\344\001\001\000\002\001" +
    "\001\000\004\061\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\246\007\236\015\250\016\351\017" +
    "\242\020\240\022\253\025\247\027\237\041\252\045\241" +
    "\046\245\047\005\061\235\064\021\071\024\072\023\073" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\032\355\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\050\053\051\364\053" +
    "\036\055\044\057\046\061\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\026\367\031\224\072\226\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\246\007\236\015\250\016\377" +
    "\017\242\020\240\022\253\025\247\027\237\041\252\045" +
    "\241\046\245\047\005\061\235\064\021\071\024\072\023" +
    "\073\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\u0102\026\227\031\224\072\226\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\246\007\236\015" +
    "\250\016\u0105\017\242\020\240\022\253\025\247\027\237" +
    "\041\252\045\241\046\245\047\005\061\235\064\021\071" +
    "\024\072\023\073\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    /**********************************************************************
     *             Creació i Gestió de la Taula de Simbols                *
     **********************************************************************/

    Taula taula_simbols = new Taula();

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    private boolean errorSemantic = false;

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
    }

    public void report_error_semantic(String message,Location left, Location right){
        System.err.println("ERROR "+message+" desde: "+left.getLine()+"/"+left.getColumn()+" fins: "+right.getLine()+"/"+right.getColumn());
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= M0 PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROG -> M0 PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROG",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= DECL PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> DECL PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= PROCEDIMENT PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> PROCEDIMENT PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= MAIN 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // M0 ::= 
            {
              Object RESULT =null;
		System.out.println("Inicialització");
        taula_simbols.posar("ent", new Dtipus(new Escalar("ts_enter", Integer.MIN_VALUE, Integer.MAX_VALUE)));
        taula_simbols.posar("decimal", new Dtipus(new Escalar("ts_decimal", (int)Double.MIN_VALUE, (int)Double.MAX_VALUE)));
        taula_simbols.posar("cad", new Dtipus(new DefinicioTipus("ts_cadena")));
        taula_simbols.posar("bool", new Dtipus(new Escalar("ts_boolea", -1, 0)));
        taula_simbols.posar("car", new Dtipus(new Escalar("ts_enter", 0, 255)));
        taula_simbols.posar("tupla", new Dtipus(new Tupla()));
        taula_simbols.posar("VER", new Dconst(-1,"boolea"));
        taula_simbols.posar("FALS", new Dconst(0,"boolea"));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M0",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= DECL_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= DECL_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= DECL_CONST PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL ::= error PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODIF ::= REDEF_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REDEF_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIF ::= MODIF_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> MODIF_TIPUS PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIES ::= SENT SENTENCIES 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> SENT SENTENCIES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIES ::= 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= DECL 
            {
              Object RESULT =null;
		System.out.println("SENT -> DECL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= MODIF 
            {
              Object RESULT =null;
		System.out.println("SENT -> MODIF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= MENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= FMENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= IF 
            {
              Object RESULT =null;
		System.out.println("SENT -> IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= CRIDA_PROC 
            {
              Object RESULT =null;
		System.out.println("SENT -> CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= FOR 
            {
              Object RESULT =null;
		System.out.println("SENT -> FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= ENTRADAS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> ENTRADAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= SORTIDAS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> SORTIDAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROCEDIMENT ::= metode ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROCEDIMENT ::= metode TIPUS ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT RETURN 
            {
              Object RESULT =null;
		System.out.println("PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RETURN ::= retorna E 
            {
              Object RESULT =null;
		System.out.println("RETURN -> retorna E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CRIDA_PROC ::= R 
            {
              Object RESULT =null;
		System.out.println("CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDA_PROC",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MAIN ::= metode main LPAREN cadena ID LCORCH RCORCH RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPUS ::= decimal 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> decimal");
                RESULT = new SimbolTipus("decimal");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPUS ::= enter 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> enter");
                RESULT = new SimbolTipus("ent");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPUS ::= logic 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> logic");
                RESULT = new SimbolTipus("bool");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPUS ::= cadena 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> cadena");
                RESULT = new SimbolTipus("cad");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPUS ::= caracter 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> caracter");
                RESULT = new SimbolTipus("car");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARGS ::= ARGS_1 
            {
              Object RESULT =null;
		System.out.println("ARGS -> ARGS_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARGS ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARGS_1 ::= ARG COMA ARGS_1 
            {
              Object RESULT =null;
		System.out.println("ARGS_1 -> ARG COMA ARGS_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGS_1 ::= ARG 
            {
              Object RESULT =null;
		System.out.println("ARGS_1 -> ARG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARG ::= TIPUS ID 
            {
              Object RESULT =null;
		System.out.println("ARG -> TIPUS ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MENTRE ::= mentres LPAREN E RPAREN fer LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MENTRE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= si LPAREN E RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		System.out.println("IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF_1 ::= sino si LPAREN E RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		System.out.println("IF_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF_1 ::= sino LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("IF_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF_1 ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FMENTRE ::= fer LCLAUDAT SENTENCIES RCLAUDAT mentres LPAREN L RPAREN PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FMENTRE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR ::= per LPAREN TIPUS A PUNTICOMA FOR_1 PUNTICOMA FOR_1 RPAREN LCLAUDAT SENT RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FOR ::= per LPAREN PUNTICOMA FOR_1 PUNTICOMA FOR_1 RPAREN LCLAUDAT SENT RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR_1 ::= E 
            {
              Object RESULT =null;
		System.out.println("FOR_1 -> E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR_1 ::= 
            {
              Object RESULT =null;
		System.out.println("FOR_1 -> NULL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ENTRADAS ::= entradaS LPAREN TIPUS COMA R RPAREN 
            {
              Object RESULT =null;
		System.out.println("ENTRADAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADAS",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SORTIDAS ::= sortidaS LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("SORTIDAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SORTIDAS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECL_CONST ::= constant TIPUS A ASSIGN E 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolA a = (SimbolA)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_CONST -> constant TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat", a.getEsquerre(),e.getDreta());
                    errorSemantic = true;
                }else{
                    ArrayList<String> llista = a.getLlista();
                    Iterator<String> it = llista.iterator();
                    String ti = t.getTipus(); //tipus que afegirem als identificadors

                    while(it.hasNext()){
                        taula_simbols.posar(it.next(),new Dconst(ti));
                    }
                }
            }

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECL_CONST ::= constant TIPUS A ASSIGN MODIF_TIPUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolA a = (SimbolA)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_CONST -> constant TIPUS A ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat",a.getEsquerre(),a.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    ArrayList<String> llista = a.getLlista();
                    Iterator<String> it = llista.iterator();
                    String ti = t.getTipus(); //tipus que afegirem als identificadors

                    while(it.hasNext()){
                        taula_simbols.posar(it.next(),new Dconst(ti));
                    }
                }
            }    
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECL_TIPUS ::= TIPUS A 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolA a = (SimbolA)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_TIPUS -> TIPUS A ");
            ArrayList<String> llista = a.getLlista();
            Iterator<String> it = llista.iterator();
            String tipus = t.getTipus(); //tipus que afegirem als identificadors

            while(it.hasNext()){
                taula_simbols.posar(it.next(),new Dvar(tipus));
            }
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECL_TIPUS ::= TIPUS A ASSIGN E 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolA a = (SimbolA)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_TIPUS -> TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat", a.getEsquerre(),e.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    ArrayList<String> llista = a.getLlista();
                    Iterator<String> it = llista.iterator();
                    String ti = t.getTipus(); //tipus que afegirem als identificadors

                    while(it.hasNext()){
                        taula_simbols.posar(it.next(),new Dvar(ti));
                    }
                }
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECL_TIPUS ::= TIPUS A ASSIGN MODIF_TIPUS 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolA a = (SimbolA)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_TIPUS -> TIPUS A ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat",a.getEsquerre(),a.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    ArrayList<String> llista = a.getLlista();
                    Iterator<String> it = llista.iterator();
                    String ti = t.getTipus(); //tipus que afegirem als identificadors

                    while(it.hasNext()){
                        taula_simbols.posar(it.next(),new Dvar(ti));
                    }
                }
            }
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // MODIF_TIPUS ::= R I_1 
            {
              SimbolModifTipus RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolI i = (SimbolI)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("MODIF_TIPUS -> R I_1");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{
                switch(i.getOperacio()){
                    case "as": //cas ++
                        if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_decimal")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("Tipus equivocat per a la operació ++", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus());
                        }
                        break;
                    case "ar":
                        if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_decimal")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("Tipus equivocat per a la operació ++", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus());
                        }
                        break;
                    case "si":
                        if((i.getTsb()!="ts_enter")||(i.getTsb()!="ts_caracter")||(i.getTsb()!="ts_decimal")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus());
                        }
                        break;
                    case "ri":
                        if((i.getTsb()!="ts_enter")||(i.getTsb()!="ts_caracter")||(i.getTsb()!="ts_decimal")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            if((i.getTsb()!="ts_enter")||(i.getTsb()!="ts_caracter")||(i.getTsb()!="ts_decimal")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                            }else{
                             RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus());  
                            }
                        }
                        break;
                    case "ig":
                        if(i.getTsb()!=r.getTsb()){
                            report_error_semantic("El tipus de la referència i la expresió no coincideixen amb l'operacio: =", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus()); 
                        }
                        break;
                }
            }

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MODIF_TIPUS ::= R ASSIGN MODIF_TIPUS 
            {
              SimbolModifTipus RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("MODIF_TIPUS -> R ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{
                if(m.getTsb() != r.getTsb()){
                    report_error_semantic("El tipus de la referència i la modificacio no coincideixen amb l'operacio: =", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else{
                    RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus()); 
                }
            }
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // R ::= ID 
            {
              SimbolR RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("R -> ID");
        Descripcio descripcio = taula_simbols.consulta((String)d.valor);
        if(descripcio == null){ //no es troba a la taula de simbols
            report_error_semantic("Undefined id \""+d.valor+"\"", d.esquerre,d.dreta);
            errorSemantic = true;
            RESULT  = new SimbolR();
        }else{ //ja es troba a la taula de simbols.
            if(descripcio instanceof Dvar){ //variable
                Dvar var = (Dvar) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR
                RESULT = new SimbolR((String)d.valor,tipus.dt().tipus_subjacent(),var.tipus(),"var",d.esquerre,d.dreta);
            }else if(descripcio instanceof Dconst){ //variable o tupla
                Dconst c = (Dconst) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(c.tipus()); //ALERTA EN NO TROBAR
                RESULT = new SimbolR((String)d.valor,tipus.dt().tipus_subjacent(),c.tipus(),"const",d.esquerre,d.dreta);
                //el tipus pot ser tupla També
                //això es per quan ens interessa ficar una tupla dins una tupla o un subprograma
                //id(a) on 'a' és una tupla.
            }else{ //si no es tracta ni d'una variable, ni d'una constant, error
                report_error_semantic("ID es un procediment \""+d.valor+"\"", d.esquerre,d.dreta);
                errorSemantic = true;
                RESULT  = new SimbolR();
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // R ::= ID LPAREN VALORS RPAREN 
            {
              SimbolR RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("R -> ID (VALORS)"); //subprograma
        //1: mirar si id es un subprograma, amb els valors
        //2: comprovar si el subprograma te un tipus subjacent
        //si en té l'afegim a R amb la resta de informació

        ArrayList<SimbolE> llista = v.getLlista(); //llista amb els paràmetres
        if(llista.isEmpty()){ //crida a un subprograma fora paràmetres
           Descripcio descripcio = taula_simbols.consulta((String)id.valor);
           if(descripcio == null){
            report_error_semantic("Undefined id \""+id.valor+"\"", id.esquerre,id.dreta);
            errorSemantic = true;
            RESULT  = new SimbolR();
            }else{
                if(descripcio instanceof Dproc){
                    Dproc proc = (Dproc) descripcio;
                    String tipus = proc.getTipus(); //miram si el procediment té algun tipus de retorn
                    if(tipus == "id_nula"){
                      RESULT = new SimbolR((String)id.valor,"ts_nul","id_nula","procc",id.esquerre,id.dreta);  
                    }else{
                        Descripcio t = taula_simbols.consulta(proc.getTipus());
                        if(t instanceof Dtipus){
                            Dtipus t1 = (Dtipus) t;
                            RESULT = new SimbolR((String)id.valor,t1.dt().tipus_subjacent(),tipus,"procc",id.esquerre,id.dreta); 
                        }else{
                            report_error_semantic("El tipus del subprograma \""+id.valor+"\" es erroni", id.esquerre,id.dreta);
                            errorSemantic = true;
                            RESULT  = new SimbolR();
                        }
                    }
                    
                }else{
                    report_error_semantic("L'ID \""+id.valor+"\" no és un subprograma", id.esquerre,id.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }
            } 
        }else{
            Iterator <SimbolE> it = llista.iterator();
            String nom = (String)id.valor;
            while(it.hasNext()){
                SimbolE e = it.next();
                if(e.getTsb() == "ts_nul"){
                    report_error_semantic("El paràmetre no té el tipus adecuat per un subprograma", e.getEsquerre(),e.getDreta());
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }else{
                    switch(e.getTsb()){
                        case "ts_boolea":
                                nom += "_"+"boolea";
                                break;
                        case "ts_cadena":
                                nom+= "_"+"cadena";
                                break;
                        case "ts_decimal":
                                nom+= "_"+"decimal";
                                break;
                        case "ts_enter":
                                nom+= "_"+"enter";
                                break;
                        case "ts_caracter":
                                nom+= "_"+"caracter";
                                break;
                        case "ts_record":
                                nom+= "_"+"tupla";
                                break;
                    }
                }
            }

            Descripcio descripcio = taula_simbols.consulta(nom);
            if(descripcio == null){
                report_error_semantic("El subprograma amb aquests paràmetres no existeix", id.esquerre,r.dreta);
                errorSemantic = true;
                RESULT  = new SimbolR();
            }else{
                if(descripcio instanceof Dproc){
                    Dproc proc = (Dproc) descripcio;
                    if(proc.getTipus() == "id_nula"){
                        RESULT = new SimbolR(nom,"ts_nul","id_nula","procc",id.esquerre,r.dreta);
                    }else{
                      Dtipus tipus = (Dtipus) taula_simbols.consulta(proc.getTipus()); //alerta
                      RESULT = new SimbolR(nom,tipus.dt().tipus_subjacent(),proc.getTipus(),"procc",id.esquerre,r.dreta); 
                    }
                }else{ //per si acàs
                    report_error_semantic("Id no és un subprograma", id.esquerre,r.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // R ::= ID PUNT ID 
            {
              SimbolR RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("R -> ID PUNT ID");

        Descripcio descripcio = taula_simbols.consulta((String)id1.valor);
        if(descripcio!=null){
            if(descripcio instanceof Dconst){
                        Dconst c = (Dconst) descripcio;
                        String tipus = c.tipus();
                        if(tipus == "tupla"){
                            Dcamp ca = (Dcamp) taula_simbols.consultacamp((String)id1.valor,(String)id2.valor);
                            //camp pot ser null

                            if(ca != null){
                                Descripcio d = taula_simbols.consulta(ca.tipus());
                                Dtipus t = (Dtipus) d; //alerta que a D camp no li hem posat el tipus que toca.
                                RESULT = new SimbolR((String)id1.valor,t.dt().tipus_subjacent(),ca.tipus(),"const",id1.esquerre,id2.dreta);
                                //posarem const, perquè un camp d'una tupla no és pot modificar
                            }else{
                                report_error_semantic("El camp \""+id2.valor+"\" no existeix", id2.esquerre,id2.dreta);
                                errorSemantic = true;
                                RESULT  = new SimbolR(); 
                            }
                        }else{
                            report_error_semantic("L'ID \""+id1.valor+"\" no és una tupla", id1.esquerre,id1.dreta);
                            errorSemantic = true;
                            RESULT  = new SimbolR();
                        }
                    }else{
                        report_error_semantic("L'ID \""+id1.valor+"\" no és una tupla", id1.esquerre,id1.dreta);
                        errorSemantic = true;
                        RESULT  = new SimbolR();
                    }
        }else{
            report_error_semantic("L'ID \""+id1.valor+"\" no és una tupla", id1.esquerre,id1.dreta);
            errorSemantic = true;
            RESULT  = new SimbolR();
        }
        

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // A ::= ID COMA A 
            {
              SimbolA RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolA a = (SimbolA)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("A -> ID COMA A");
    a.afegir_id((String)i.valor);
    RESULT = new SimbolA(a.getLlista(),i.esquerre,i.dreta);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // A ::= ID 
            {
              SimbolA RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("A -> ID");
    SimbolA simbol = new SimbolA(i.esquerre,i.dreta);
    simbol.afegir_id((String)i.valor);
    RESULT = simbol;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // I_1 ::= AUTOSUM 
            {
              SimbolI RESULT =null;
		System.out.println("I_1 -> AUTOSUM");
    RESULT = new SimbolI("as","id_nula","ts_nul");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // I_1 ::= AUTOSUB 
            {
              SimbolI RESULT =null;
		System.out.println("I_1 -> AUTOSUB");
    RESULT = new SimbolI("ar","id_nula","ts_nul");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // I_1 ::= SUMAHI E 
            {
              SimbolI RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> SUMAHI E");
        if(errorSemantic){
        RESULT = new SimbolI();
        }else{
        RESULT = new SimbolI("si",e.getTipus(),e.getTsb());   
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // I_1 ::= RESTAHI E 
            {
              SimbolI RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> RESTAHI E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ri",e.getTipus(),e.getTsb());   
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // I_1 ::= ASSIGN E 
            {
              SimbolI RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> ASSIGN E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ig",e.getTipus(),e.getTsb());   
        }
    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORS ::= E 
            {
              SimbolValors RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALORS -> E");
        if(errorSemantic){ //error a E
            RESULT = new SimbolValors();
        }else{
            SimbolValors v = new SimbolValors();
            v.afegirE(e); //afegim e
            RESULT = new SimbolValors();
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORS ::= E COMA VALORS 
            {
              SimbolValors RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALORS -> E  COMA VALORS");
            if(errorSemantic){
                RESULT = new SimbolValors();
            }else{
                v.afegirE(e); //alreves, hauriem d'agafar la llista, i després ficarli
                RESULT = new SimbolValors(v.getLlista());
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALS_TUPLA ::= E COMA VALS_TUPLA 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix("buit", e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALS_TUPLA ::= E DOSPUNTS ID COMA VALS_TUPLA 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E DOSPUNTS ID COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix((String)d.valor, e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALS_TUPLA ::= E 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix("buit", e);
                    RESULT = sim;
                }  
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALS_TUPLA ::= E DOSPUNTS ID 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E DOSPUNTS ID");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix((String) d.valor, e);
                    RESULT = sim;
                }  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECL_TUPLA ::= tupla ID LPAREN RPAREN ASSIGN LPAREN VALS_TUPLA RPAREN 
            {
              SimbolDeclTupla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("DECL_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolDeclTupla();
                }else{
                    //Gestió
                    int n =0;
                    Stack<KeyValue> llista = v.getLlista();
                    Boolean bol = taula_simbols.posar((String)i.valor,new Dconst("tupla")); //mirar si posar es true o false
                    if(bol){
                        while(!llista.isEmpty()){
                            KeyValue k = llista.pop();
                            String nom = k.key; //nom del paràmetre
                            SimbolE simbol = k.value; //valor o variable a afegir
                            if(nom == "buit"){ //no té identificador
                                nom = "Item"+n; //nom que li posam als camps que no tenen id
                                n++;
                            }else{
                                n++; 
                            }
                            bol = taula_simbols.posarcamp((String)i.valor,nom,new Dcamp(simbol.getTipus(),n,simbol.getTsb()));
                            if(bol == false){
                                break;
                            }
                        }
                        //no retornam res encara
                    }else{
                        report_error_semantic("La tupla \""+(String)i.valor+"\" ja existeix", i.esquerre,r.dreta);
                        errorSemantic = true;
                    }
                }

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECL_TUPLA ::= tupla ID LPAREN RPAREN ASSIGN R 
            {
              SimbolDeclTupla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("TUPLA -> R"); //revisar
                if(r.getTsb() != "ts_record"){
                    report_error_semantic("A la tupla \""+(String)i.valor+"\" no es pot assignar una referència que no sigui tupla", i.esquerre,r.getDreta());
                    errorSemantic = true;
                }else{
                    Boolean bol = taula_simbols.posar((String)i.valor,new Dconst("tupla")); //mirar si posar es true o false
                    if(bol){
                        String tu = r.getIdb(); //id de la nostra referència
                        Dada1 d = taula_simbols.consulta_tupla(tu);
                        Descripcio descripcio = d.td();

                        if(descripcio instanceof Dconst){
                            Dada2 first = d.first(); //volem obtenir els elements de R

                            while(first!=null){
                                Dcamp camp = (Dcamp) taula_simbols.consultacamp(tu,first.idcamp());
                                taula_simbols.posarcamp((String)i.valor,first.idcamp(),new Dcamp(camp.tipus(),camp.getDespl(),camp.getTsb()));
                                first = first.next();
                            }
                        }else{
                           report_error_semantic("La referència "+r.getIdb()+"no es una tupla", i.esquerre,r.getDreta());
                            errorSemantic = true; 
                        }
                    }else{
                        report_error_semantic("La tupla \""+(String)i.valor+"\" ja existeix", i.esquerre,r.getDreta());
                        errorSemantic = true;
                    }
                }
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E ::= T E_1 
            {
              SimbolE RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("E -> T E_1");
    if(errorSemantic){
        RESULT = new SimbolE();
    }else{
        if((e==null)||(e.getTsb()=="ts_nul")){
            RESULT = new SimbolE(t.getTsb(),t.getTipus(),t.getMode(),t.getEsquerre(),t.getDreta());
        }else{
           if(t.getTsb()!="ts_boolea"){
                report_error_semantic("L'operand ha de ser de tipus booleà", t.getEsquerre(),t.getDreta());
                errorSemantic = true;
                RESULT = new SimbolE();
            }else{
                e.setTs_heretat("ts_boolea"); //calcular
                RESULT = new SimbolE("ts_boolea","id_nula","moderesult",t.getEsquerre(),e.getDreta());
            } 
        }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E_1 ::= AND T E_1 
            {
              SimbolEp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("E_1 -> AND T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació AND", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",t.getDreta());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    e.setTs_heretat("ts_boolea");
                    //operació
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",e.getDreta());
                }  
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E_1 ::= OR T E_1 
            {
              SimbolEp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("E_1 -> OR T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació OR", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",t.getDreta());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    e.setTs_heretat("ts_boolea");
                    //operació
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",e.getDreta());
                }  
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E_1 ::= 
            {
              SimbolEp RESULT =null;
		System.out.println("E_1 -> @");
        RESULT = new SimbolEp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // T ::= N T_1 
            {
              SimbolT RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolTp t = (SimbolTp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T -> N T_1");
    if(errorSemantic){
        RESULT = new SimbolT();
    }else{
        if((t==null)||(t.getTsb() == "ts_nul")){ //venim de Tp -> @
            RESULT = new SimbolT(n.getTsb(),n.getTipus(),n.getMode(),n.getEsquerre(),n.getDreta());
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                report_error_semantic("El terminal no es adequat per una operació lògica", n.getEsquerre(),n.getDreta()); //arreglar
                errorSemantic = true;
                RESULT = new SimbolT();
            }else{
                t.setTs_heretat(n.getTsb()); //li afegim per si després hem de fer operacions
                RESULT = new SimbolT("ts_boolea","id_nula","moderesult",n.getEsquerre(),t.getDreta());
            }   
        }
    }

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // T_1 ::= IGIG N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> IGIG N T_1");
    if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de comparacio", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.IGIG,"moderesult",n.getDreta());
                    }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // T_1 ::= DIF N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> DIF N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de DIF", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.DIF,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T_1 ::= MENOR N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MENOR N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MENOR", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MENORI,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T_1 ::= MAJOR N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MAJOR N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MAJOR", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MAJOR,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T_1 ::= MENORI N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MENORI N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MENORI", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MENORI,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // T_1 ::= MAJORI N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MAJORI N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MAJORI", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MAJORI,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // T_1 ::= 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> @");
        RESULT = new SimbolTp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // N ::= M N_1 
            {
              SimbolN RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("N -> M N_1");
        if(errorSemantic){
            RESULT = new SimbolN();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolN(m.getTsb(),m.getTipus(),m.getMode(),m.getEsquerre(),m.getDreta()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                   report_error_semantic("El terminal no té un tipus adequat", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolN(); 
                }else{
                    n.setTs_heretat(m.getTsb());
                    String tsb = n.obtenir_sintetitzat();
                    RESULT = new SimbolN(tsb,"id_nula","moderesult",m.getEsquerre(),n.getDreta());
                }
                
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N_1 ::= ADD M N_1 
            {
              SimbolNp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("N_1 -> ADD M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.ADD,"moderesult",m.getDreta());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 
                        n.setTs_heretat(m.getTsb());
                        String resultat = n.obtenir_sintetitzat();

                        if(resultat == "ts_nul"){
                            report_error_semantic("No és pot fer una operació amb aquest tipus", m.getEsquerre(),m.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolNp();
                        }else{
                            RESULT = new SimbolNp(resultat,"id_nula",ParserSym.ADD,"moderesult",n.getDreta());
                        }

                    }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_1 ::= SUB M N_1 
            {
              SimbolNp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("N_1 -> SUB M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de resta", m.getDreta(),m.getEsquerre());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.ADD,"moderesult",m.getDreta());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de resta", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 
                        n.setTs_heretat(m.getTsb());
                        String resultat = n.obtenir_sintetitzat();

                        if(resultat == "ts_nul"){
                            report_error_semantic("No es pot fer una operació amb aquest tipus", m.getDreta(),m.getEsquerre());
                            errorSemantic = true;
                            RESULT = new SimbolNp();
                        }else{
                            RESULT = new SimbolNp(resultat,"id_nula",ParserSym.SUB,"moderesult",n.getDreta());
                        }

                    }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_1 ::= 
            {
              SimbolNp RESULT =null;
		System.out.println("N_1 -> @");
        RESULT = new SimbolNp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // M ::= F M_1 
            {
              SimbolM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M -> F M_1");
        if(errorSemantic){
            RESULT = new SimbolM();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolM(f.getTsb(),f.getTipus(),f.getMode(),f.getEsquerre(),f.getDreta()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de suma/resta/multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolM();
                }else{
                    //comprovar si f es decimal
                    m.setTs_heretat(f.getTsb());
                    String tsb = m.obtenir_sintetitzat();

                    if(tsb=="ts_nul"){
                        report_error_semantic("no es pot fer el mòdul d'un decimal ", f.getEsquerre(),f.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolM();
                    }else{
                       RESULT = new SimbolM(tsb,"id_nula","moderesult",f.getEsquerre(),m.getDreta()); 
                    }
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // M_1 ::= MULT F M_1 
            {
              SimbolMp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> MULT F M_1");
        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MULT,"moderesult",f.getDreta());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = cadena o decimal o caracter 
                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    if(resultat == "ts_nul"){
                        report_error_semantic("no es pot fer el mòdul d'un decimal ", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.MULT,"moderesult",m.getDreta());
                    }

                }
            }
        }

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // M_1 ::= DIV F M_1 
            {
              SimbolMp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> DIV F M_1");

        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de divisió", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.DIV,"moderesult",f.getDreta());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = cadena o decimal o caracter 
                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    if(resultat == "ts_nul"){
                        report_error_semantic("no es pot fer el mòdul amb un nombre decimal", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.DIV,"moderesult",m.getDreta());
                    }

                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // M_1 ::= MOD F M_1 
            {
              SimbolMp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> MOD F M_1");

        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_decimal")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MOD,"moderesult",f.getDreta());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_decimal")){
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = enter o caracter

                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    //pensant que resultat tendrà un ts correcte

                    if(resultat == "ts_decimal"){
                        report_error_semantic("No es pot fer el mòdul d'un valor decimal", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                      RESULT = new SimbolMp(resultat,"id_nula",ParserSym.MOD,"moderesult",m.getDreta());  
                    }
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // M_1 ::= 
            {
              SimbolMp RESULT =null;
		System.out.println("M_1 -> @");
        RESULT = new SimbolMp();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // F ::= LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> LPAREN E RPAREN");
                if(errorSemantic){
                    RESULT = new SimbolF();
                }else{
                    if(e.getTsb() == "ts_nul"){ //ho trob error
                        report_error("(E) té tsb null", e);
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",l.esquerre,l.dreta); //no tenc clar es mode
                    }   
                } 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // F ::= venter 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> venter");
                RESULT = new SimbolF("ts_enter","ent","modeconst",v.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // F ::= SUB venter 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB venter");
                RESULT = new SimbolF("ts_enter","ent","modeconst",s.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // F ::= ADD venter 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD venter");
                RESULT = new SimbolF("ts_enter","ent","modeconst",a.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // F ::= vdecimal 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vdecimal");
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",v.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // F ::= ADD vdecimal 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD vdecimal");
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",a.esquerre,a.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // F ::= SUB vdecimal 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB vdecimal");
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",s.esquerre,s.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // F ::= vcaracter 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vcaracter");
                RESULT = new SimbolF("ts_caracter","car","modeconst",v.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // F ::= ADD vcaracter 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD");
                RESULT = new SimbolF("ts_caracter","car","modeconst",a.esquerre,v.dreta); //assegurar que a car hi posam ts_caracter
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // F ::= SUB vcaracter 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB");
                RESULT = new SimbolF("ts_caracter","car","modeconst",s.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // F ::= vcadena 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vcadena");
                RESULT = new SimbolF("ts_cadena","cad","modeconst",v.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // F ::= R 
            {
              SimbolF RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ID");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta());
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // F ::= SUB R 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",s.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta());
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // F ::= ADD R 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",a.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta());
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // F ::= vlogic 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vlogic");
                RESULT = new SimbolF("ts_boolea","bool","modeconst",v.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // F ::= SUB LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB LPAREN E RPAREN"); //REVISAR

                if(errorSemantic){ //si s'ha comés un error Semantic a E
                   RESULT  = new SimbolF(); 
                }else{
                    if(e.getTsb() == "ts_nul"){
                        report_error_semantic("No es pot restar l'expresió entre parèntesis", e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else if((e.getTsb() != "ts_enter")&&(e.getTsb() != "ts_decimal")&&(e.getTsb() != "ts_caracter")){
                        report_error_semantic("No es pot restar l'expresió entre parèntesis",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",s.esquerre,r.dreta);
                    } 
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // F ::= NOT vlogic 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT vlogic");
                RESULT = new SimbolF("ts_boolea","bool","modeconst",n.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // F ::= NOT R 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT ID");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            if(r.getTsb() != "ts_boolea"){
                                report_error_semantic("La referència "+r.getIdb()+" no té tsb booleà", n.esquerre,r.getDreta());
                                errorSemantic = true;
                                RESULT  = new SimbolF();
                            }else{
                              RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta());  
                            }
                            
                        }else if(r.getMvp() == "const"){
                            if(r.getTsb() != "ts_boolea"){
                                report_error_semantic("La referència "+r.getIdb()+" no té tsb booleà", n.esquerre,r.getDreta());
                                errorSemantic = true;
                             RESULT  = new SimbolF();
                            }else{
                              RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());  
                            }
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // F ::= NOT LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT LPAREN E RPAREN"); //posar error semantic
                if(errorSemantic){ //si a E s'ha comés un error semántic
                    RESULT  = new SimbolF();
                }else{
                    if(e.getTsb() != "ts_boolea"){
                        report_error_semantic("L'expresió no és booleana ",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",n.esquerre,r.dreta);
                    }   
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
