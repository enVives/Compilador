
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador.Sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import Compilador.Lexic.Scanner.Token;
import Compilador.Intermedi.TaulaIntermedi;
import Compilador.Intermedi.TaulaIntermedi.Sentencia;
import Compilador.Intermedi.Operacio;
import Compilador.Intermedi.TaulaVariables;
import Compilador.Intermedi.TaulaProcediments;
import Compilador.Intermedi.TaulaProcediments.*;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintStream;
import java.util.HashMap;
import Compilador.TSimbols.Taula;
import Compilador.TSimbols.DT.*;
import Compilador.TSimbols.TD.*;
import Compilador.Sintactic.Simbols.*;
import Compilador.Sintactic.Simbols.SimbolValsTupla.KeyValue;
import Compilador.Intermedi.TaulaVariables.*;
import java.util.Iterator;
import java.util.Stack;
import java.util.ArrayList;
import Compilador.TSimbols.Dada1;
import Compilador.TSimbols.Dada2;
import Compilador.Sintactic.Simbols.SimbolArgsp.KeyValor;
import java.util.Stack;
import java.io.IOException;
import java.io.DataOutputStream;
import java.io.FileOutputStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\044\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\003\000\002\032\002" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\006\004\000\002\006\002\000\002" +
    "\012\004\000\002\012\004\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\004\000\002\012\004" +
    "\000\002\055\007\000\002\056\010\000\002\004\006\000" +
    "\002\004\007\000\002\054\005\000\002\053\003\000\002" +
    "\053\002\000\002\052\005\000\002\052\003\000\002\051" +
    "\004\000\002\011\003\000\002\005\013\000\002\034\002" +
    "\000\002\035\002\000\002\047\003\000\002\047\003\000" +
    "\002\047\003\000\002\007\007\000\002\040\002\000\002" +
    "\033\006\000\002\042\005\000\002\043\005\000\002\041" +
    "\007\000\002\041\006\000\002\041\002\000\002\010\010" +
    "\000\002\036\006\000\002\013\006\000\002\014\007\000" +
    "\002\014\007\000\002\046\004\000\002\046\006\000\002" +
    "\046\006\000\002\050\004\000\002\050\005\000\002\026" +
    "\003\000\002\026\006\000\002\026\005\000\002\045\004" +
    "\000\002\045\004\000\002\045\004\000\002\030\003\000" +
    "\002\030\002\000\002\037\003\000\002\037\005\000\002" +
    "\027\005\000\002\027\007\000\002\027\003\000\002\027" +
    "\005\000\002\031\012\000\002\016\004\000\002\017\005" +
    "\000\002\017\005\000\002\017\002\000\002\020\004\000" +
    "\002\021\004\000\002\021\004\000\002\021\002\000\002" +
    "\022\004\000\002\023\005\000\002\023\005\000\002\023" +
    "\002\000\002\024\004\000\002\025\005\000\002\025\002" +
    "\000\002\015\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\004\000\002\015\004\000\002\015\004\000\002" +
    "\015\004\000\002\015\004\000\002\015\003\000\002\015" +
    "\004\000\002\015\004\000\002\015\003\000\002\015\004" +
    "\000\002\015\004\000\002\015\003\000\002\015\006\000" +
    "\002\015\004\000\002\015\004\000\002\015\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\020\003\ufffc\034\ufffc\035\ufffc\036\ufffc\037" +
    "\ufffc\044\ufffc\046\ufffc\001\002\000\004\002\320\001\002" +
    "\000\020\003\021\034\017\035\010\036\015\037\026\044" +
    "\012\046\020\001\002\000\004\022\ufff9\001\002\000\004" +
    "\002\000\001\002\000\006\004\uffdf\015\uffdf\001\002\000" +
    "\004\002\ufffd\001\002\000\014\004\272\034\017\035\010" +
    "\036\015\050\271\001\002\000\004\023\262\001\002\000" +
    "\004\023\200\001\002\000\006\004\uffde\015\uffde\001\002" +
    "\000\004\022\176\001\002\000\006\004\uffe0\015\uffe0\001" +
    "\002\000\010\034\017\035\010\036\015\001\002\000\004" +
    "\022\170\001\002\000\004\022\ufffb\001\002\000\020\003" +
    "\021\034\017\035\010\036\015\037\026\044\012\046\020" +
    "\001\002\000\004\004\152\001\002\000\004\022\ufffa\001" +
    "\002\000\004\004\027\001\002\000\004\014\030\001\002" +
    "\000\004\015\031\001\002\000\004\020\032\001\002\000" +
    "\004\014\033\001\002\000\024\004\046\005\050\006\036" +
    "\007\047\010\040\011\041\012\044\014\052\033\051\001" +
    "\002\000\030\011\uffab\012\uffab\013\uffab\015\uffab\021\uffab" +
    "\022\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\001" +
    "\002\000\016\015\uffb9\021\uffb9\022\uffb9\026\uffb9\031\145" +
    "\032\143\001\002\000\030\011\uff9f\012\uff9f\013\uff9f\015" +
    "\uff9f\021\uff9f\022\uff9f\026\uff9f\027\uff9f\030\uff9f\031\uff9f" +
    "\032\uff9f\001\002\000\032\011\uffa2\012\uffa2\013\uffa2\015" +
    "\uffa2\021\uffa2\022\uffa2\025\077\026\uffa2\027\uffa2\030\uffa2" +
    "\031\uffa2\032\uffa2\001\002\000\004\014\140\001\002\000" +
    "\012\004\046\005\134\007\137\010\040\001\002\000\004" +
    "\015\133\001\002\000\022\015\uffb5\021\uffb5\022\uffb5\026" +
    "\uffb5\027\127\030\126\031\uffb5\032\uffb5\001\002\000\014" +
    "\004\046\005\117\007\122\010\040\014\123\001\002\000" +
    "\026\011\112\012\110\015\uffb1\021\uffb1\022\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\031\uffb1\032\uffb1\001\002\000\042\011" +
    "\uffcb\012\uffcb\013\uffcb\014\101\015\uffcb\016\uffcb\017\uffcb" +
    "\020\uffcb\021\uffcb\022\uffcb\025\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\001\002\000\030\011\uffa5\012\uffa5" +
    "\013\uffa5\015\uffa5\021\uffa5\022\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\031\uffa5\032\uffa5\001\002\000\030\011\uffac\012\uffac" +
    "\013\uffac\015\uffac\021\uffac\022\uffac\026\uffac\027\uffac\030" +
    "\uffac\031\uffac\032\uffac\001\002\000\012\004\046\006\072" +
    "\010\040\014\074\001\002\000\024\004\046\005\050\006" +
    "\036\007\047\010\040\011\041\012\044\014\052\033\051" +
    "\001\002\000\030\011\uffae\012\uffae\013\063\015\uffae\021" +
    "\uffae\022\uffae\026\uffae\027\uffae\030\uffae\031\uffae\032\uffae" +
    "\001\002\000\010\015\uffbf\021\056\026\055\001\002\000" +
    "\024\004\046\005\050\006\036\007\047\010\040\011\041" +
    "\012\044\014\052\033\051\001\002\000\004\004\057\001" +
    "\002\000\006\015\uffbe\026\060\001\002\000\024\004\046" +
    "\005\050\006\036\007\047\010\040\011\041\012\044\014" +
    "\052\033\051\001\002\000\004\015\uffc0\001\002\000\004" +
    "\015\uffc1\001\002\000\024\004\046\005\050\006\036\007" +
    "\047\010\040\011\041\012\044\014\052\033\051\001\002" +
    "\000\026\011\uffb0\012\uffb0\015\uffb0\021\uffb0\022\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\001\002\000\030" +
    "\011\uffae\012\uffae\013\063\015\uffae\021\uffae\022\uffae\026" +
    "\uffae\027\uffae\030\uffae\031\uffae\032\uffae\001\002\000\026" +
    "\011\uffaf\012\uffaf\015\uffaf\021\uffaf\022\uffaf\026\uffaf\027" +
    "\uffaf\030\uffaf\031\uffaf\032\uffaf\001\002\000\004\015\070" +
    "\001\002\000\030\011\uffad\012\uffad\013\uffad\015\uffad\021" +
    "\uffad\022\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad" +
    "\001\002\000\032\011\uff9c\012\uff9c\013\uff9c\015\uff9c\021" +
    "\uff9c\022\uff9c\025\077\026\uff9c\027\uff9c\030\uff9c\031\uff9c" +
    "\032\uff9c\001\002\000\030\011\uff9d\012\uff9d\013\uff9d\015" +
    "\uff9d\021\uff9d\022\uff9d\026\uff9d\027\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\001\002\000\030\011\uffaa\012\uffaa\013\uffaa\015" +
    "\uffaa\021\uffaa\022\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa" +
    "\032\uffaa\001\002\000\024\004\046\005\050\006\036\007" +
    "\047\010\040\011\041\012\044\014\052\033\051\001\002" +
    "\000\004\015\076\001\002\000\030\011\uff9b\012\uff9b\013" +
    "\uff9b\015\uff9b\021\uff9b\022\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\032\uff9b\001\002\000\004\004\100\001\002\000" +
    "\040\011\uffc9\012\uffc9\013\uffc9\015\uffc9\016\uffc9\017\uffc9" +
    "\020\uffc9\021\uffc9\022\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\001\002\000\026\004\046\005\050" +
    "\006\036\007\047\010\040\011\041\012\044\014\052\015" +
    "\uffc4\033\051\001\002\000\006\015\uffc3\026\106\001\002" +
    "\000\004\015\105\001\002\000\004\015\uffc5\001\002\000" +
    "\040\011\uffca\012\uffca\013\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\032\uffca\001\002\000\024\004\046\005\050" +
    "\006\036\007\047\010\040\011\041\012\044\014\052\033" +
    "\051\001\002\000\004\015\uffc2\001\002\000\024\004\046" +
    "\005\050\006\036\007\047\010\040\011\041\012\044\014" +
    "\052\033\051\001\002\000\022\015\uffb4\021\uffb4\022\uffb4" +
    "\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\001\002\000" +
    "\024\004\046\005\050\006\036\007\047\010\040\011\041" +
    "\012\044\014\052\033\051\001\002\000\026\011\112\012" +
    "\110\015\uffb1\021\uffb1\022\uffb1\026\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\001\002\000\022\015\uffb3\021\uffb3\022" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\001\002" +
    "\000\026\011\112\012\110\015\uffb1\021\uffb1\022\uffb1\026" +
    "\uffb1\027\uffb1\030\uffb1\031\uffb1\032\uffb1\001\002\000\022" +
    "\015\uffb2\021\uffb2\022\uffb2\026\uffb2\027\uffb2\030\uffb2\031" +
    "\uffb2\032\uffb2\001\002\000\030\011\uffa7\012\uffa7\013\uffa7" +
    "\015\uffa7\021\uffa7\022\uffa7\026\uffa7\027\uffa7\030\uffa7\031" +
    "\uffa7\032\uffa7\001\002\000\032\011\uffa1\012\uffa1\013\uffa1" +
    "\015\uffa1\021\uffa1\022\uffa1\025\077\026\uffa1\027\uffa1\030" +
    "\uffa1\031\uffa1\032\uffa1\001\002\000\030\011\uffa9\012\uffa9" +
    "\013\uffa9\015\uffa9\021\uffa9\022\uffa9\026\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\001\002\000\030\011\uffa3\012\uffa3" +
    "\013\uffa3\015\uffa3\021\uffa3\022\uffa3\026\uffa3\027\uffa3\030" +
    "\uffa3\031\uffa3\032\uffa3\001\002\000\024\004\046\005\050" +
    "\006\036\007\047\010\040\011\041\012\044\014\052\033" +
    "\051\001\002\000\004\015\125\001\002\000\030\011\uff9e" +
    "\012\uff9e\013\uff9e\015\uff9e\021\uff9e\022\uff9e\026\uff9e\027" +
    "\uff9e\030\uff9e\031\uff9e\032\uff9e\001\002\000\024\004\046" +
    "\005\050\006\036\007\047\010\040\011\041\012\044\014" +
    "\052\033\051\001\002\000\024\004\046\005\050\006\036" +
    "\007\047\010\040\011\041\012\044\014\052\033\051\001" +
    "\002\000\016\015\uffb8\021\uffb8\022\uffb8\026\uffb8\031\uffb8" +
    "\032\uffb8\001\002\000\016\015\uffb6\021\uffb6\022\uffb6\026" +
    "\uffb6\031\uffb6\032\uffb6\001\002\000\016\015\uffb7\021\uffb7" +
    "\022\uffb7\026\uffb7\031\uffb7\032\uffb7\001\002\000\004\022" +
    "\uffbd\001\002\000\030\011\uffa6\012\uffa6\013\uffa6\015\uffa6" +
    "\021\uffa6\022\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6\032" +
    "\uffa6\001\002\000\032\011\uffa0\012\uffa0\013\uffa0\015\uffa0" +
    "\021\uffa0\022\uffa0\025\077\026\uffa0\027\uffa0\030\uffa0\031" +
    "\uffa0\032\uffa0\001\002\000\030\011\uffa8\012\uffa8\013\uffa8" +
    "\015\uffa8\021\uffa8\022\uffa8\026\uffa8\027\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\001\002\000\030\011\uffa4\012\uffa4\013\uffa4" +
    "\015\uffa4\021\uffa4\022\uffa4\026\uffa4\027\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\001\002\000\010\034\017\035\010\036\015" +
    "\001\002\000\004\015\142\001\002\000\030\011\uffd4\012" +
    "\uffd4\013\uffd4\015\uffd4\021\uffd4\022\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\001\002\000\024\004\046\005" +
    "\050\006\036\007\047\010\040\011\041\012\044\014\052" +
    "\033\051\001\002\000\012\015\uffbc\021\uffbc\022\uffbc\026" +
    "\uffbc\001\002\000\024\004\046\005\050\006\036\007\047" +
    "\010\040\011\041\012\044\014\052\033\051\001\002\000" +
    "\016\015\uffb9\021\uffb9\022\uffb9\026\uffb9\031\145\032\143" +
    "\001\002\000\012\015\uffba\021\uffba\022\uffba\026\uffba\001" +
    "\002\000\016\015\uffb9\021\uffb9\022\uffb9\026\uffb9\031\145" +
    "\032\143\001\002\000\012\015\uffbb\021\uffbb\022\uffbb\026" +
    "\uffbb\001\002\000\006\020\153\022\uffd0\001\002\000\024" +
    "\004\046\005\050\006\036\007\047\010\040\011\041\012" +
    "\044\014\052\033\051\001\002\000\032\011\uffa2\012\uffa2" +
    "\013\uffa2\016\160\017\161\020\162\022\uffa2\025\077\027" +
    "\uffa2\030\uffa2\031\uffa2\032\uffa2\001\002\000\004\022\uffce" +
    "\001\002\000\004\022\uffcf\001\002\000\004\022\uffcd\001" +
    "\002\000\024\004\046\005\050\006\036\007\047\010\040" +
    "\011\041\012\044\014\052\033\051\001\002\000\024\004" +
    "\046\005\050\006\036\007\047\010\040\011\041\012\044" +
    "\014\052\033\051\001\002\000\024\004\046\005\050\006" +
    "\036\007\047\010\040\011\041\012\044\014\052\033\051" +
    "\001\002\000\004\022\uffcc\001\002\000\004\022\uffc6\001" +
    "\002\000\004\022\uffc7\001\002\000\004\022\uffc8\001\002" +
    "\000\004\002\ufffe\001\002\000\004\022\ufff8\001\002\000" +
    "\004\004\172\001\002\000\004\020\173\001\002\000\024" +
    "\004\046\005\050\006\036\007\047\010\040\011\041\012" +
    "\044\014\052\033\051\001\002\000\004\022\uffd1\001\002" +
    "\000\004\022\uffd2\001\002\000\020\003\021\034\017\035" +
    "\010\036\015\037\026\044\012\046\020\001\002\000\004" +
    "\002\uffff\001\002\000\032\003\021\004\046\024\ufff6\034" +
    "\017\035\010\036\015\037\026\040\215\042\216\043\206" +
    "\046\020\047\201\001\002\000\004\014\257\001\002\000" +
    "\004\022\256\001\002\000\014\016\160\017\161\020\162" +
    "\022\uffe4\025\077\001\002\000\034\003\021\004\046\024" +
    "\ufff6\034\017\035\010\036\015\037\026\040\215\042\216" +
    "\043\206\045\ufff6\046\020\047\201\001\002\000\034\003" +
    "\ufff1\004\ufff1\024\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1" +
    "\040\ufff1\042\ufff1\043\ufff1\045\ufff1\046\ufff1\047\ufff1\001" +
    "\002\000\004\023\uffdc\001\002\000\034\003\ufff3\004\ufff3" +
    "\024\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\042" +
    "\ufff3\043\ufff3\045\ufff3\046\ufff3\047\ufff3\001\002\000\004" +
    "\022\247\001\002\000\004\022\246\001\002\000\004\022" +
    "\245\001\002\000\004\024\244\001\002\000\034\003\ufff2" +
    "\004\ufff2\024\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040" +
    "\ufff2\042\ufff2\043\ufff2\045\ufff2\046\ufff2\047\ufff2\001\002" +
    "\000\004\014\220\001\002\000\004\014\uffdc\001\002\000" +
    "\004\014\220\001\002\000\024\004\046\005\050\006\036" +
    "\007\047\010\040\011\041\012\044\014\052\033\051\001" +
    "\002\000\004\043\222\001\002\000\004\023\224\001\002" +
    "\000\034\003\uffdd\004\uffdd\024\uffdd\034\uffdd\035\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\042\uffdd\043\uffdd\045\uffdd\046\uffdd" +
    "\047\uffdd\001\002\000\032\003\021\004\046\024\ufff6\034" +
    "\017\035\010\036\015\037\026\040\215\042\216\043\206" +
    "\046\020\047\201\001\002\000\004\024\226\001\002\000" +
    "\036\003\uffd9\004\uffd9\024\uffd9\034\uffd9\035\uffd9\036\uffd9" +
    "\037\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\001\002\000\004\015\230\001\002\000\010" +
    "\022\uffda\023\uffda\043\uffda\001\002\000\004\023\224\001" +
    "\002\000\036\003\uffd6\004\uffd6\024\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\041\233\042\uffd6\043\uffd6\045" +
    "\uffd6\046\uffd6\047\uffd6\001\002\000\006\023\236\040\235" +
    "\001\002\000\034\003\uffdb\004\uffdb\024\uffdb\034\uffdb\035" +
    "\uffdb\036\uffdb\037\uffdb\040\uffdb\042\uffdb\043\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\001\002\000\004\014\220\001\002\000" +
    "\032\003\021\004\046\024\ufff6\034\017\035\010\036\015" +
    "\037\026\040\215\042\216\043\206\046\020\047\201\001" +
    "\002\000\004\024\240\001\002\000\034\003\uffd7\004\uffd7" +
    "\024\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\042" +
    "\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\001\002\000\004" +
    "\023\224\001\002\000\036\003\uffd6\004\uffd6\024\uffd6\034" +
    "\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\233\042\uffd6" +
    "\043\uffd6\045\uffd6\046\uffd6\047\uffd6\001\002\000\034\003" +
    "\uffd8\004\uffd8\024\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8" +
    "\040\uffd8\042\uffd8\043\uffd8\045\uffd8\046\uffd8\047\uffd8\001" +
    "\002\000\020\003\uffec\034\uffec\035\uffec\036\uffec\037\uffec" +
    "\044\uffec\046\uffec\001\002\000\034\003\ufff0\004\ufff0\024" +
    "\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0" +
    "\043\ufff0\045\ufff0\046\ufff0\047\ufff0\001\002\000\034\003" +
    "\ufff5\004\ufff5\024\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5" +
    "\040\ufff5\042\ufff5\043\ufff5\045\ufff5\046\ufff5\047\ufff5\001" +
    "\002\000\034\003\uffef\004\uffef\024\uffef\034\uffef\035\uffef" +
    "\036\uffef\037\uffef\040\uffef\042\uffef\043\uffef\045\uffef\046" +
    "\uffef\047\uffef\001\002\000\004\023\224\001\002\000\004" +
    "\042\252\001\002\000\004\014\220\001\002\000\004\022" +
    "\254\001\002\000\034\003\uffd5\004\uffd5\024\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\001\002\000\006\024\ufff7\045\ufff7" +
    "\001\002\000\034\003\ufff4\004\ufff4\024\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\042\ufff4\043\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\001\002\000\024\004\046\005\050\006" +
    "\036\007\047\010\040\011\041\012\044\014\052\033\051" +
    "\001\002\000\004\015\261\001\002\000\004\022\uffd3\001" +
    "\002\000\032\003\021\004\046\034\017\035\010\036\015" +
    "\037\026\040\215\042\216\043\206\045\ufff6\046\020\047" +
    "\201\001\002\000\004\045\265\001\002\000\004\024\270" +
    "\001\002\000\024\004\046\005\050\006\036\007\047\010" +
    "\040\011\041\012\044\014\052\033\051\001\002\000\004" +
    "\022\267\001\002\000\004\024\uffea\001\002\000\020\003" +
    "\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\044\uffeb\046\uffeb" +
    "\001\002\000\004\014\311\001\002\000\004\014\306\001" +
    "\002\000\004\004\274\001\002\000\004\014\275\001\002" +
    "\000\012\015\uffe8\034\017\035\010\036\015\001\002\000" +
    "\004\015\uffe9\001\002\000\004\004\305\001\002\000\004" +
    "\015\304\001\002\000\006\015\uffe6\026\302\001\002\000" +
    "\010\034\017\035\010\036\015\001\002\000\004\015\uffe7" +
    "\001\002\000\004\023\uffed\001\002\000\006\015\uffe5\026" +
    "\uffe5\001\002\000\012\015\uffe8\034\017\035\010\036\015" +
    "\001\002\000\004\015\310\001\002\000\004\023\uffee\001" +
    "\002\000\004\015\uffe2\001\002\000\004\015\313\001\002" +
    "\000\004\023\314\001\002\000\032\003\021\004\046\024" +
    "\ufff6\034\017\035\010\036\015\037\026\040\215\042\216" +
    "\043\206\046\020\047\201\001\002\000\004\024\316\001" +
    "\002\000\004\002\uffe1\001\002\000\004\002\uffe3\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\316\000\006\032\004\044\003\001\001\000\002\001" +
    "\001\000\026\002\006\003\015\004\022\005\010\014\005" +
    "\031\021\046\024\047\023\055\013\056\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\272\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\166\003\015\004\022\005\010" +
    "\014\005\031\021\046\024\047\023\055\013\056\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\015\052\016\053\020\034\022\042" +
    "\024\044\026\036\027\041\036\033\001\001\000\002\001" +
    "\001\000\004\017\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\134\036\135\001" +
    "\001\000\002\001\001\000\004\021\127\001\001\000\006" +
    "\026\117\036\120\001\001\000\004\023\110\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\070\036\072\001\001\000\020\015\052\016\066\020" +
    "\034\022\042\024\044\026\036\036\033\001\001\000\004" +
    "\025\063\001\001\000\002\001\001\000\022\015\052\016" +
    "\053\020\034\022\042\024\044\026\036\027\061\036\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\015" +
    "\052\016\053\020\034\022\042\024\044\026\036\027\060" +
    "\036\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\015\064\026\036\036\033\001\001\000\002\001\001" +
    "\000\004\025\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\015\052\016\074\020\034\022" +
    "\042\024\044\026\036\036\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\015\052\016\101\020\034\022\042\024\044\026\036" +
    "\030\102\036\033\037\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\015\052\016\101\020\034\022\042\024\044\026\036\036" +
    "\033\037\106\001\001\000\002\001\001\000\012\015\052" +
    "\024\114\026\036\036\033\001\001\000\002\001\001\000" +
    "\012\015\052\024\112\026\036\036\033\001\001\000\004" +
    "\023\113\001\001\000\002\001\001\000\004\023\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\015\052\016" +
    "\123\020\034\022\042\024\044\026\036\036\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\015\052\022" +
    "\131\024\044\026\036\036\033\001\001\000\014\015\052" +
    "\022\130\024\044\026\036\036\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\047\140\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\015\052\020\147\022\042\024" +
    "\044\026\036\036\033\001\001\000\002\001\001\000\016" +
    "\015\052\020\145\022\042\024\044\026\036\036\033\001" +
    "\001\000\004\017\146\001\001\000\002\001\001\000\004" +
    "\017\150\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\015\052\016\155\020\034\022\042\024\044\026\153" +
    "\036\033\050\154\001\001\000\004\045\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\015\052\016\165\020\034\022\042\024\044\026\036\036" +
    "\033\001\001\000\020\015\052\016\164\020\034\022\042" +
    "\024\044\026\036\036\033\001\001\000\022\015\052\016" +
    "\163\020\034\022\042\024\044\026\153\036\033\050\162" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\015\052\016" +
    "\174\020\034\022\042\024\044\026\153\036\033\050\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\002" +
    "\176\003\015\004\022\005\010\014\005\031\021\046\024" +
    "\047\023\055\013\056\012\001\001\000\002\001\001\000" +
    "\036\003\210\006\212\007\206\010\213\011\211\012\203" +
    "\013\207\014\005\026\202\031\021\033\204\046\024\047" +
    "\023\050\201\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\156\001\001\000\036\003\210\006\254\007" +
    "\206\010\213\011\211\012\203\013\207\014\005\026\202" +
    "\031\021\033\204\046\024\047\023\050\201\001\001\000" +
    "\002\001\001\000\004\040\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\230\001\001" +
    "\000\004\040\216\001\001\000\004\042\220\001\001\000" +
    "\020\015\052\016\226\020\034\022\042\024\044\026\036" +
    "\036\033\001\001\000\002\001\001\000\004\043\222\001" +
    "\001\000\002\001\001\000\036\003\210\006\224\007\206" +
    "\010\213\011\211\012\203\013\207\014\005\026\202\031" +
    "\021\033\204\046\024\047\023\050\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\231\001\001\000\004\041\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\240\001" +
    "\001\000\036\003\210\006\236\007\206\010\213\011\211" +
    "\012\203\013\207\014\005\026\202\031\021\033\204\046" +
    "\024\047\023\050\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\241\001\001\000\004\041\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\250\001" +
    "\001\000\002\001\001\000\004\042\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\015\052\016\257\020\034\022\042\024\044" +
    "\026\036\036\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\003\210\006\262\007\206\010\213\011\211" +
    "\012\203\013\207\014\005\026\202\031\021\033\204\046" +
    "\024\047\023\050\201\001\001\000\004\054\263\001\001" +
    "\000\002\001\001\000\020\015\052\016\265\020\034\022" +
    "\042\024\044\026\036\036\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\047\276\051\300\052\275\053\277\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\047\276\051\300\052\302\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\047\276" +
    "\051\300\052\275\053\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\034\311\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\210\006\314\007\206\010" +
    "\213\011\211\012\203\013\207\014\005\026\202\031\021" +
    "\033\204\046\024\047\023\050\201\001\001\000\002\001" +
    "\001\000\004\035\316\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    /*********************************************************************
    *                       Generacio Ensamblador                        *
    **********************************************************************/

    String cEnsamblador = "";

    public Integer num_camps(Integer nv){
        Integer camps = 0;
        ArrayList<Sentencia> llista_intermedi = taula_intermedi.get_Llista();
        Iterator<Sentencia> it = llista_intermedi.iterator();
        while(it.hasNext()){
            Sentencia sent = (Sentencia) it.next();
            if((sent.getOperacio() == Operacio.ind_assign)&&((Integer)sent.getDesti() == nv)){
                camps++;
            }
        }
        return camps;
    }

    public void genera_ensablador(){
        if((taula_intermedi.size() > 0)&&(!errorSemantic)&&(!errorSintactic)){ //si no hi ha hagut fallos
            ArrayList<Sentencia> llista_intermedi = taula_intermedi.get_Llista();
            ArrayList<Entrada> llista_variables = taula_variables.getFiles();
            ArrayList<InfoProcediment> llista_procediments = taula_procediments.getLlista();

            String filename = "executable.X68";

            try {
                FileOutputStream fileOutputStream = new FileOutputStream(filename);
                DataOutputStream dataOutputStream = new DataOutputStream(fileOutputStream);

                cEnsamblador = "*-----------------------------------------------------------\n" +
                        "* Title      : Compilador\n" +
                        "* Written by : Pere Joan Vives Morey\n" +
                        "* Date       : 2/02/2024\n" +
                        "* Description: \n" +
                        "*-----------------------------------------------------------\n" +
                        "          ORG    $1000\n";

                Iterator<Entrada> it = llista_variables.iterator();
                Integer n = 0;
                while(it.hasNext()){
                    Entrada variable = (Entrada) it.next();
                    if(variable.getSubprograma() == null){
                        switch(variable.ocupacio()){
                            case 0:
                                cEnsamblador += "V"+n+" DS.L "+num_camps(n)+"\n";
                                break;
                            case  2:
                                cEnsamblador += "V"+n+" DC.W 0\n";
                                break;
                            case 4:
                                cEnsamblador += "V"+n+" DC.L 0\n";
                                break;
                            default:
                                Integer nwords = variable.ocupacio()/4;
                                cEnsamblador += "V"+n+" DC.W "+nwords+"\n";
                                break;
                        }
                    }
                    n++;
                }
                cEnsamblador += "CR EQU $0D\n"+
                                "LF EQU $0A\n";
                cEnsamblador += "ENTRADA DC.B 'Introdueix un valor: ',0\n"+
                                "SORTIDA DC.B CR,LF,'Sortida Teclat: ',0\n";
                cEnsamblador += "START:\n";

                Iterator<Sentencia> it1 = llista_intermedi.iterator();
                Boolean dins_procediment = false;


                while(it1.hasNext()){
                    Sentencia sent = (Sentencia) it1.next();

                    if(sent.getOperacio() == Operacio.skip){ //etiqueta
                        if(taula_procediments.conte_etiqueta((Integer)sent.getDesti())){
                            dins_procediment = true;
                        }
                    }

                    if(!dins_procediment){ //generar sentencia
                        creaSubCodi(sent);
                    }

                    if (sent.getOperacio() == Operacio.retorn) {
                        //sortim de subrutines
                        dins_procediment = false;
                    }
                }

                //crear procediment main

                it1 = llista_intermedi.iterator();
                dins_procediment = false;
                while(it1.hasNext()){
                    Sentencia sent = (Sentencia) it1.next();
                    if(sent.getOperacio() == Operacio.skip){
                        if((Integer)sent.getDesti() == -1){
                            Integer ocupacio = taula_procediments.get_procediment(-1).getOcupacio();
                            while(ocupacio >=8){
                                cEnsamblador += "\tSUBQ #8,A7\n";
                                ocupacio -= 8;
                            }
                            if(ocupacio >0){
                               cEnsamblador += "\tSUBQ #"+ocupacio+", A7\n"; 
                            }
                            dins_procediment = true;
                        }
                    }

                    if(dins_procediment){
                        creaSubCodi(sent);
                    }

                    if(sent.getOperacio() == Operacio.retorn){
                        if((Integer)sent.getDesti() == -1){
                            dins_procediment = false;

                            cEnsamblador += "\tSIMHALT\n";
                        }
                    }
                }
                
                it1 = llista_intermedi.iterator();
                dins_procediment = false;

                while(it1.hasNext()){
                    Sentencia sent = (Sentencia) it1.next();
                    if(sent.getOperacio() == Operacio.skip) {
                        if(((Integer)sent.getDesti() != -1)&&(taula_procediments.conte_etiqueta((Integer)sent.getDesti()))) {
                            dins_procediment = true;
                        }
                    }

                    if(dins_procediment){
                        creaSubCodi(sent);
                    }

                    if(sent.getOperacio() == Operacio.retorn){
                        if((Integer)sent.getDesti() != -1){
                            dins_procediment = false;
                            cEnsamblador += "\tRTS\n";
                        }
                    }  
                }
                
                
                cEnsamblador += "\t END START\n";


                //crear la resta de procediments

                dataOutputStream.writeBytes(cEnsamblador);
                dataOutputStream.close();
                fileOutputStream.close();
                
            } catch (IOException e) {
                System.out.println(e.toString());
            }
        }
    }

    public Character llargaria(Integer ocupacio) {
        switch(ocupacio) {
            case 2:
                return 'W';
            case 4:
                return 'L';
            default:
                return 'L'; //per les tuples
        }
    }

    public void creaSubCodi(Sentencia c3a) {
        Integer operacio = c3a.getOperacio();
        Object t1 = c3a.getOp1(); //t1 OBJECTE
        Integer t2 = c3a.getOp2(); //t2
        Object t3 = c3a.getDesti();
        Entrada e1,e2,e3; //OP1 OP2 DESTI
        Integer posicioOperand1,posicioOperand2,posicioDesti,ocupacioOperand1,ocupacioOperand2,ocupacioDesti;
        Character llargOperand1,llargOperand2,llargDesti;

        String sop1,sop2,dest;
        String str = "";

        switch(operacio) {
            //Copia -> copia,tn,null,tdesti
            case 0:
                e1 = taula_variables.cerca_variable((Integer)t1);
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioOperand1 = e1.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila(); //posicio dins la pila
                ocupacioOperand1 = e1.ocupacio();
                ocupacioDesti = e3.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1); //per saber si B W o L
                llargDesti = llargaria(ocupacioDesti);
                
                if(posicioOperand1!=null){ //variable local
                    if(posicioDesti!=null){ //variable local
                        str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                        str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                    }else{
                        str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                        str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                    }
                }else{
                    if(posicioDesti!=null){ //variable local
                        //global local
                        str += "\tMOVE."+llargOperand1+" V,"+(Integer)t1+",D0\n";
                        str += "\tMOVE."+llargDesti+" "+" D0,"+posicioDesti+"(A7)\n";
                        
                    }else{
                        //global global
                        str += "\tMOVE."+llargOperand1+" "+"V"+(Integer)t1+",D0\n";
                        str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                    }
                }
                str += "\tCLR.L D0\n";
                break;
            //Suma -> suma,t1,t2,tdesti
            case 1:
                e1 = taula_variables.cerca_variable((Integer)t1);
                e2 = taula_variables.cerca_variable((Integer)t2);
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioOperand1 = e1.getPosicio_pila();
                posicioOperand2 = e2.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                ocupacioOperand2 = e2.ocupacio();
                ocupacioDesti = e3.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargOperand2 = llargaria(ocupacioOperand2);
                llargDesti = llargaria(ocupacioDesti);

                if(posicioOperand1 != null) {
                    if(posicioOperand2 != null) {
                        if (posicioDesti != null) {
                            //local local local
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tADD."+llargOperand2+" "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        } else {
                            //local local global
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tADD."+llargOperand2+" "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE."+llargDesti+" D0,"+"V"+(Integer)t3+"\n";
                        }
                    } else {
                        if (posicioDesti != null) {
                            //local global local
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tADD."+llargOperand2+" V"+(Integer)t2+",D0\n";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        } else {
                            //local global global
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tADD."+llargOperand2+" V"+(Integer)t2+",D0\n";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    }
                } else {
                    if (posicioOperand2 != null) {
                        if (posicioDesti != null) {
                            //global local local
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tADD."+llargOperand2+" "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        } else {
                            //global local global
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tADD."+llargOperand2+" "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    } else {
                        if (posicioDesti != null) {
                            //global global local
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tADD."+llargOperand2+" V"+(Integer)t2+",D0\n";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        } else {
                            //global global global
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tADD."+llargOperand2+" V"+(Integer)t2+",D0\n";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    }
                }
                break;
            //Resta -> resta t1,t2,tdesti
            case 2:
                e1 = taula_variables.cerca_variable((Integer)t1);
                e2 = taula_variables.cerca_variable((Integer)t2);
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioOperand1 = e1.getPosicio_pila();
                posicioOperand2 = e2.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                ocupacioOperand2 = e2.ocupacio();
                ocupacioDesti = e3.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargOperand2 = llargaria(ocupacioOperand2);
                llargDesti = llargaria(ocupacioDesti);
                
                if(posicioOperand1 != null) {
                    if(posicioOperand2 != null) {
                        if(posicioDesti != null){
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tSUB."+llargOperand2+" "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tSUB."+llargOperand2+" "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    } else {
                        if(posicioDesti != null){
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tSUB."+llargOperand2+" V"+(Integer)t2+",D0\n";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tSUB."+llargOperand2+" V"+(Integer)t2+",D0\n";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    }
                } else {
                    if (posicioOperand2 != null) {
                        if(posicioDesti != null){
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tSUB."+llargOperand2+" "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tSUB."+llargOperand2+" "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    } else {
                        if(posicioDesti != null){
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tSUB."+llargOperand2+" V"+(Integer)t2+",D0\n";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tSUB."+llargOperand2+" V"+(Integer)t2+",D0\n";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    }
                }
                break;
            //Producte -> producte t1,t2,tdesti
            case 3:
                e1 = taula_variables.cerca_variable((Integer)t1);
                e2 = taula_variables.cerca_variable((Integer)t2);
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioOperand1 = e1.getPosicio_pila();
                posicioOperand2 = e2.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                ocupacioOperand2 = e2.ocupacio();
                ocupacioDesti = e3.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargOperand2 = llargaria(ocupacioOperand2);
                llargDesti = llargaria(ocupacioDesti);
                
                if(posicioOperand1 != null) {
                    if(posicioOperand2 != null) {
                        if(posicioDesti != null){
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tMOVE."+llargOperand2+" "+posicioOperand2+"(A7),D1\n";
                            str += "\tMOVE.W D0,D2";
                            str += "\tMULS.W D1,D2";
                            str += "\tMOVE.L D0,D3";
                            str += "\tMULS.W D1,D3";
                            str += "\tMOVE.L D2,D0";
                            str += "\tADD.L D3,D0";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tMOVE."+llargOperand2+" "+posicioOperand2+"(A7),D1\n";
                            str += "\tMOVE.W D0,D2";
                            str += "\tMULS.W D1,D2";
                            str += "\tMOVE.L D0,D3";
                            str += "\tMULS.W D1,D3";
                            str += "\tMOVE.L D2,D0";
                            str += "\tADD.L D3,D0";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    } else {
                        if(posicioDesti != null){
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tMOVE."+llargOperand2+" V"+(Integer)t2+",D1\n";
                            str += "\tMOVE.W D0,D2";
                            str += "\tMULS.W D1,D2";
                            str += "\tMOVE.L D0,D3";
                            str += "\tMULS.W D1,D3";
                            str += "\tMOVE.L D2,D0";
                            str += "\tADD.L D3,D0";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";    
                        }else{
                            str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                            str += "\tMOVE."+llargOperand2+" V"+(Integer)t2+",D1\n";
                            str += "\tMOVE.W D0,D2";
                            str += "\tMULS.W D1,D2";
                            str += "\tMOVE.L D0,D3";
                            str += "\tMULS.W D1,D3";
                            str += "\tMOVE.L D2,D0";
                            str += "\tADD.L D3,D0";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    }
                } else {
                    if (posicioOperand2 != null) {
                        if(posicioDesti != null){
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tMOVE."+llargOperand2+" "+posicioOperand2+"(A7),D1\n";
                            str += "\tMOVE.W D0,D2";
                            str += "\tMULS.W D1,D2";
                            str += "\tMOVE.L D0,D3";
                            str += "\tMULS.W D1,D3";
                            str += "\tMOVE.L D2,D0";
                            str += "\tADD.L D3,D0";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tMOVE."+llargOperand2+" "+posicioOperand2+"(A7),D1\n";
                            str += "\tMOVE.W D0,D2";
                            str += "\tMULS.W D1,D2";
                            str += "\tMOVE.L D0,D3";
                            str += "\tMULS.W D1,D3";
                            str += "\tMOVE.L D2,D0";
                            str += "\tADD.L D3,D0";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    } else {
                        if(posicioDesti != null){
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tMOVE."+llargOperand2+" V"+(Integer)t2+",D1\n";
                            str += "\tMOVE.W D0,D2";
                            str += "\tMULS.W D1,D2";
                            str += "\tMOVE.L D0,D3";
                            str += "\tMULS.W D1,D3";
                            str += "\tMOVE.L D2,D0";
                            str += "\tADD.L D3,D0";
                            str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                            str += "\tMOVE."+llargOperand2+" V"+(Integer)t2+",D1\n";
                            str += "\tMOVE.W D0,D2";
                            str += "\tMULS.W D1,D2";
                            str += "\tMOVE.L D0,D3";
                            str += "\tMULS.W D1,D3";
                            str += "\tMOVE.L D2,D0";
                            str += "\tADD.L D3,D0";
                            str += "\tMOVE."+llargDesti+" D0,V"+(Integer)t3+"\n";
                        }
                    }
                }
                str += "\tCLR.L D0\n";
                str += "\tCLR.L D1\n";
                str += "\tCLR.L D2\n";
                str += "\tCLR.L D3\n";
                break;
            
            case 4: //falta canviar signe
                e1 = taula_variables.cerca_variable((Integer)t1);
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioOperand1 = e1.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                ocupacioDesti = e3.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargDesti = llargaria(ocupacioDesti);
                
                if(posicioOperand1!=null){ //variable local
                    if(posicioDesti!=null){ //variable local
                        str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0";
                        str += "\tNEG."+llargOperand1+" D0\n";
                        str += "\tMOVE."+llargOperand1+" D0,"+posicioDesti+"(A7)\n";
                    }else{
                        str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                        str += "\tNEG."+llargOperand1+" D0\n";
                        str += "\tMOVE."+llargOperand1+" D0,V"+(Integer)t3+"\n";
                    }
                }else{
                    if(posicioDesti!=null){ //variable local
                        //global local
                        str += "\tMOVE."+llargOperand1+" "+"V"+(Integer)t1+",D0\n";
                        str += "\tNEG."+llargOperand1+" D0\n";
                        str += "\tMOVE."+llargOperand1+" D0,"+(Integer)t3+"(A7)\n";
                    }else{
                        //global global
                        str += "\tMOVE."+llargOperand1+" "+"V"+(Integer)t1+",D0\n";
                        str += "\tNEG."+llargOperand1+" D0\n";
                        str += "\tMOVE."+llargOperand1+" D0,V"+(Integer)t3+"\n";
                    }
                }
                break;
            //And
            case 5:
                e1 = taula_variables.cerca_variable((Integer)t1);
                e2 = taula_variables.cerca_variable((Integer)t2);
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioOperand1 = e1.getPosicio_pila();
                posicioOperand2 = e2.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                ocupacioOperand2 = e2.ocupacio();
                ocupacioDesti = e3.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargOperand2 = llargaria(ocupacioOperand2);
                llargDesti = llargaria(ocupacioDesti);

                if(posicioOperand1 != null) {
                    if(posicioOperand2 != null) {
                        if(posicioDesti != null){
                            str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                            str += "\tAND.L "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE.L D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                            str += "\tAND.L "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE.L D0,V"+(Integer)t3+"\n";
                        }
                    } else {
                        if(posicioDesti != null){
                            str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                            str += "\tAND.L V"+(Integer)t2+",D0\n";
                            str += "\tMOVE.L D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                            str += "\tAND.L V"+(Integer)t2+",D0\n";
                            str += "\tMOVE.L D0,V"+(Integer)t3+"\n";
                        }
                    }
                } else {
                    if (posicioOperand2 != null) {
                        if(posicioDesti != null){
                            str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                            str += "\tAND.L "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE.L D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                            str += "\tAND.L "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE.L D0,V"+(Integer)t3+"\n";
                        }
                    } else {
                        if(posicioDesti != null){
                            str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                            str += "\tAND.L V"+(Integer)t2+",D0\n";
                            str += "\tMOVE.L D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                            str += "\tAND.L V"+(Integer)t2+",D0\n";
                            str += "\tMOVE.L D0,V"+(Integer)t3+"\n";
                        }
                    }
                }
                str += "\tCLR.L D0\n";
                break;
            //Or
            case 6:
                e1 = taula_variables.cerca_variable((Integer)t1);
                e2 = taula_variables.cerca_variable((Integer)t2);
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioOperand1 = e1.getPosicio_pila();
                posicioOperand2 = e2.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                ocupacioOperand2 = e2.ocupacio();
                ocupacioDesti = e3.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargOperand2 = llargaria(ocupacioOperand2);
                llargDesti = llargaria(ocupacioDesti);

                if(posicioOperand1 != null) {
                    if(posicioOperand2 != null) {
                        if(posicioDesti != null){
                            str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                            str += "\tOR.L "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE.L D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                            str += "\tAND.L "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE.L D0,V"+(Integer)t3+"\n";
                        }
                    } else {
                        if(posicioDesti != null){
                            str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                            str += "\tOR.L V"+(Integer)t2+",D0\n";
                            str += "\tMOVE.L D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                            str += "\tOR.L V"+(Integer)t2+",D0\n";
                            str += "\tMOVE.L D0,V"+(Integer)t3+"\n";
                        }
                    }
                } else {
                    if (posicioOperand2 != null) {
                        if(posicioDesti != null){
                            str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                            str += "\tOR.L "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE.L D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                            str += "\tOR.L "+posicioOperand2+"(A7),D0\n";
                            str += "\tMOVE.L D0,V"+(Integer)t3+"\n";
                        }
                    } else {
                        if(posicioDesti != null){
                            str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                            str += "\tOR.L V"+(Integer)t2+",D0\n";
                            str += "\tMOVE.L D0,"+posicioDesti+"(A7)\n";
                        }else{
                            str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                            str += "\tOR.L V"+(Integer)t2+",D0\n";
                            str += "\tMOVE.L D0,V"+(Integer)t3+"\n";
                        }
                    }
                }
                str += "\tCLR.L D0\n";
                break;
            //Not
            case 7:
                e1 = taula_variables.cerca_variable((Integer)t1);
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioOperand1 = e1.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                ocupacioDesti = e3.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargDesti = llargaria(ocupacioDesti);
                
                if(posicioOperand1!=null){ //variable local
                    if(posicioDesti!=null){ //variable local
                        str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0";
                        str += "\tNOT.L D0\n";
                        str += "\tMOVE."+llargOperand1+" D0,"+posicioDesti+"(A7)\n";
                    }else{
                        str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                        str += "\tNOT.L D0\n";
                        str += "\tMOVE."+llargOperand1+" D0,V"+(Integer)t3+"\n";
                    }
                }else{
                    if(posicioDesti!=null){ //variable local
                        //global local
                        str += "\tMOVE."+llargOperand1+" "+"V"+(Integer)t1+",D0\n";
                        str += "\tNOT.L D0\n";
                        str += "\tMOVE."+llargOperand1+" D0,"+(Integer)t3+"(A7)\n";
                    }else{
                        //global global
                        str += "\tMOVE."+llargOperand1+" "+"V"+(Integer)t1+",D0\n";
                        str += "\tNOT.L D0\n";
                        str += "\tMOVE."+llargOperand1+" D0,V"+(Integer)t3+"\n";
                    }
                }
                break;
            //skip
            case 8:
                //(Integer)t3
                if((Integer)t3 != -1){
                    str += "E"+(Integer)t3+":\n";
                }else{
                   str += "M:\n"; 
                }
            break;
            //salt_incondicional
            case 9:
                str += "\tJMP E"+(Integer)t3+"\n";
            break;
            //salt_condicional_igual
            case 10:
                e1 = taula_variables.cerca_variable((Integer)t1);
                e2 = taula_variables.cerca_variable((Integer)t2);
                posicioOperand1 = e1.getPosicio_pila();
                posicioOperand2 = e2.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                ocupacioOperand2 = e2.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargOperand2 = llargaria(ocupacioOperand2);

                if(llargOperand1 == 'W'){
                    if(llargOperand2 == 'W'){ //car car
                        if(posicioOperand1 != null){
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W "+posicioOperand1+"(A7),D0\n";
                                str += "\tCMP.W D"+posicioOperand2+"(A7),D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W "+posicioOperand1+"(A7),D0\n";
                                str += "\tCMP.W V"+(Integer)t2+",D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }
                        }else{
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W V"+(Integer)t1+",D0\n";
                                str += "\tCMP.W "+posicioOperand2+"(A7),D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W V"+(Integer)t1+",D0\n";
                                str += "\tCMP.W V"+(Integer)t2+",D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }
                        }
                    }else{ //car int
                        if(posicioOperand1 != null){
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W "+posicioOperand1+"(A7),D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L "+posicioOperand2+"(A7),D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W "+posicioOperand1+"(A7),D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L V"+(Integer)t2+",D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }
                        }else{
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W V"+(Integer)t1+",D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L "+posicioOperand2+"(A7),D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W V"+(Integer)t1+",D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L V"+(Integer)t2+",D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }
                        }
                    }
                }else{
                    if(llargOperand2 == 'W'){ // int car
                        if(posicioOperand1 !=null){
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W "+posicioOperand2+"(A7),D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L "+posicioOperand1+"(A7),D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W "+posicioOperand2+"(A7),D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L V"+(Integer)t1+",D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }
                        }else{
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W V"+(Integer)t2+",D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L "+posicioOperand1+"(A7),D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W V"+(Integer)t2+",D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L V"+(Integer)t1+",D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }
                        }
                    }else{ //int int o bool bool
                        if(posicioOperand1 != null){
                            if(posicioOperand2 != null){
                                str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                                str += "\tCMP.L "+posicioOperand2+"(A7),D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                                str += "\tCMP.L V"+(Integer)t2+",D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }
                        }else{
                            if(posicioOperand2 != null){
                                str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                                str += "\tCMP.L "+posicioOperand2+"(A7),D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                                str += "\tCMP.L V"+(Integer)t2+",D0\n";
                                str += "\t BEQ E"+(Integer)t3+"\n";
                            }
                        }
                    }
                }
                
            break;
            //salt_condicional_diferent
            case 11:
                e1 = taula_variables.cerca_variable((Integer)t1);
                e2 = taula_variables.cerca_variable((Integer)t2);
                posicioOperand1 = e1.getPosicio_pila();
                posicioOperand2 = e2.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                ocupacioOperand2 = e2.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargOperand2 = llargaria(ocupacioOperand2);

                if(llargOperand1 == 'W'){
                    if(llargOperand2 == 'W'){ //car car
                        if(posicioOperand1 != null){
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W "+posicioOperand1+"(A7),D0\n";
                                str += "\tCMP.W D"+posicioOperand2+"(A7),D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W "+posicioOperand1+"(A7),D0\n";
                                str += "\tCMP.W V"+(Integer)t2+",D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }
                        }else{
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W V"+(Integer)t1+",D0\n";
                                str += "\tCMP.W "+posicioOperand2+"(A7),D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W V"+(Integer)t1+",D0\n";
                                str += "\tCMP.W V"+(Integer)t2+",D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }
                        }
                    }else{ //car int
                        if(posicioOperand1 != null){
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W "+posicioOperand1+"(A7),D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L "+posicioOperand2+"(A7),D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W "+posicioOperand1+"(A7),D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L V"+(Integer)t2+",D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }
                        }else{
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W V"+(Integer)t1+",D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L "+posicioOperand2+"(A7),D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W V"+(Integer)t1+",D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L V"+(Integer)t2+",D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }
                        }
                    }
                }else{
                    if(llargOperand2 == 'W'){ // int car
                        if(posicioOperand1 !=null){
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W "+posicioOperand2+"(A7),D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L "+posicioOperand1+"(A7),D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W "+posicioOperand2+"(A7),D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L V"+(Integer)t1+",D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }
                        }else{
                            if(posicioOperand2 != null){
                                str += "\tMOVE.W V"+(Integer)t2+",D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L "+posicioOperand1+"(A7),D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.W V"+(Integer)t2+",D0\n";
                                str += "\tEXT.L D0\n";
                                str += "\tCMP.L V"+(Integer)t1+",D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }
                        }
                    }else{ //int int o bool bool
                        if(posicioOperand1 != null){
                            if(posicioOperand2 != null){
                                str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                                str += "\tCMP.L "+posicioOperand2+"(A7),D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.L "+posicioOperand1+"(A7),D0\n";
                                str += "\tCMP.L V"+(Integer)t2+",D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }
                        }else{
                            if(posicioOperand2 != null){
                                str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                                str += "\tCMP.L "+posicioOperand2+"(A7),D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }else{
                                str += "\tMOVE.L V"+(Integer)t1+",D0\n";
                                str += "\tCMP.L V"+(Integer)t2+",D0\n";
                                str += "\t BNE E"+(Integer)t3+"\n";
                            }
                        }
                    }
                }
            break;
            //crida
            case 12:
                e1 = taula_variables.cerca_variable((Integer)t1);
                afegeix_pila =0;
                str += "\t JSR E"+(Integer)t3+"\n";
            
                Integer ocupacio_parametres = taula_procediments.get_procediment((Integer)t3).getParametres();
                if (ocupacio_parametres > 0) {
                    str += "\tADD.L #"+ocupacio_parametres+", A7\n";
                }
            
                //return TENIM A PILA VALOR A RETORNAR COM A LONG
                if(e1!=null){
                    posicioOperand1 = e1.getPosicio_pila();
                    ocupacioOperand1 = e1.ocupacio();
                    llargOperand1 = llargaria(ocupacioOperand1);
                    str += "\tMOVE.L (A7)+, D0\n";
                    if(posicioOperand1 != null){
                        str += "\tMOVE."+llargOperand1+" D0,"+posicioOperand1+"(A7)\n";
                    }else{
                        str += "\tMOVE."+llargOperand1+" D0,V"+(Integer)t1+"\n";
                    }
                    str += "\t CLR.L D0\n";
                }else{
                    str += "\tADD.L #4, A7\n";
                }
            break;
            //retorn
            case 13: //retorn variable,null,subprograma
                if((Integer)t1!=null){
                    e1 = taula_variables.cerca_variable((Integer)t1);
                    posicioOperand1 = e1.getPosicio_pila();
                    ocupacioOperand1 = e1.ocupacio();
                    llargOperand1 = llargaria(ocupacioOperand1);
                    Integer posicio_retorn = taula_procediments.get_procediment((Integer)t3).getLloc_retorn();
                    
                    if(posicioOperand1 != null) {
                        str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),"+posicio_retorn+"(A7)\n";
                    } else {
                        str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+","+posicio_retorn+"(A7)\n";
                    } 
                }
                
                //llevam les variables locals
                Integer ocup = taula_procediments.get_procediment((Integer)t3).getOcupacio();
                while(ocup >= 8){
                  str += "\tADDQ #8, A7\n";  
                  ocup -= 8;
                }
                
                if(ocup >0){
                    str += "\tADDQ #"+ocup+", A7\n";
                }
                
            break;
            //param_simple
            case 14: // variable,null,subprograma
                e1 = taula_variables.cerca_variable((Integer)t1);
                posicioOperand1 = e1.getPosicio_pila();
                ocupacioOperand1 = e1.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);

                if(posicioOperand1!=null){
                    str += "\tMOVE."+llargOperand1+" "+(posicioOperand1+afegeix_pila)+"(A7)"+",-(A7)\n";
                } else {
                    str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",-(A7)\n";
                }
                afegeix_pila += ocupacioOperand1;

            break;
            case 15: //-> copia_valor, #t1, null, tdesti -> copia_valor,objecte,null,objecte
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioDesti = e3.getPosicio_pila();
                ocupacioDesti = e3.ocupacio();
                llargDesti = llargaria(ocupacioDesti);

                if(t1 instanceof Character){
                    Character valor = (Character) t1;

                    if(posicioDesti != null){ //local
                        str +="\tMOVE.W #"+(int)valor+","+posicioDesti+"(A7)\n";
                    }else{
                        str += "\tMOVE.W #"+(int)valor+",V"+(Integer)t3+"\n";
                    }
                }else if(t1 instanceof Integer){ //tractam com enter
                    if(posicioDesti != null) {
                        str += "\tMOVE."+llargDesti+" #"+(Integer)t1+","+posicioDesti+"(A7)\n";
                    } else {
                        str += "\tMOVE."+llargDesti+" #"+(Integer)t1+",V"+(Integer)t3+"\n";
                    }
                }else{
                    boolean bol = (boolean) t1;
                    int valor = bol ? -1 : 0;

                    if(posicioDesti != null) {
                        str += "\tMOVE."+llargDesti+" #"+valor+","+posicioDesti+"(A7)\n";
                    } else {
                        str += "\tMOVE."+llargDesti+" #"+valor+",V"+(Integer)t3+"\n";
                    }
                }
                
                break;
            case 16: //op,1,2,3 -> 3 = 1[2]
                e1 = taula_variables.cerca_variable((Integer)t1);
                e3 = taula_variables.cerca_variable((Integer)t3);
                ocupacioDesti = e3.ocupacio();
                ocupacioOperand1 = e1.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargDesti = llargaria(ocupacioDesti);
                posicioOperand1 = e1.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila();
                if (posicioDesti != null) {
                    if(posicioOperand1 != null){
                        str += "\tMOVE.L "+(posicioOperand1+(Integer)t2*4)+"(A7),D0\n";
                        str += "\tMOVE."+ocupacioDesti+" D0,"+posicioDesti+"(A7)\n";
                    }else{
                        str += "\tLEA V"+(Integer)t1+", A0\n";
                        str += "\tMOVE.L "+(Integer)t2*4+"(A0),D0\n";
                        str += "\tMOVE."+llargDesti+" D0,"+posicioDesti+"(A7)\n";
                    }
                } else {
                    if (posicioOperand1 != null) { //global local
                        str += "\tMOVE.L "+(posicioOperand1+(Integer)t2*4)+"(A7),D0\n";
                        str += "\tMOVE."+ocupacioDesti+" D0,V"+(Integer)t3+"\n";
                    } else { //global global
                        str += "\tLEA V"+(Integer)t1+", A0\n";
                        str += "\tMOVE.L "+(Integer)t2*4+"(A0),D0\n";
                        str += "\tMOVE."+llargDesti+" D0,"+"V"+(Integer)t3+"\n";
                    }
                }
            break;
            case 17: //pmb np
                Integer ocupacio_locals = taula_procediments.get_procediment((Integer)t3).getOcupacio();
                str += "\tSUB #"+ocupacio_locals+",A7\n";  
                    
            break;
            case 18: //console read, null,null,variable
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioDesti = e3.getPosicio_pila();
                ocupacioDesti = e3.ocupacio();
                llargDesti = llargaria(ocupacioDesti);

                switch(ocupacioDesti){
                    case 1: //llegeix un valor booleà
                    str +=  "\tMOVE #14,D0\n"+
	                        "\tLEA ENTRADA,A1\n"+
	                        "\tTRAP #15\n"+
                            "\tMOVE #4,D0\n"+
	                        "\tTRAP #15\n";

                    if(posicioDesti!=null){
                        str += "\t MOVE.L D1,"+posicioDesti+"(A7)\n";
                    }else{
                        str += "\t MOVE.L D1,V"+(Integer)t3+"\n";
                    }
                    break;
                    case 2:
                        str +=  "\tMOVE #14,D0\n"+
	                            "\tLEA ENTRADA,A1\n"+
	                            "\tTRAP #15\n"+
	                            "\tMOVE #5,D0\n"+
	                            "\tTRAP #15\n";
                    if(posicioDesti!=null){
                        str += "\t MOVE.W D1,"+posicioDesti+"(A7)\n";
                    }else{
                        str += "\t MOVE.W D1,V"+(Integer)t3+"\n";
                    }
                    break;
                    case 4:
                        str +=  "\tMOVE #14,D0\n"+
	                            "\tLEA ENTRADA,A1\n"+
	                            "\tTRAP #15\n"+
	                            "\tMOVE #4,D0\n"+
	                            "\tTRAP #15\n";

                    if(posicioDesti!=null){
                        str += "\t MOVE.L D1,"+posicioDesti+"(A7)\n";
                    }else{
                        str += "\t MOVE.L D1,V"+(Integer)t3+"\n";
                    }
                    break;
                }
                str += "\tCLR.L D1\n";
                str += "\tCLR.L D0\n";
                str += "\tMOVE.L #0, A1\n";
            break;
            case 19:
                e3 = taula_variables.cerca_variable((Integer)t3);
                posicioDesti = e3.getPosicio_pila();
                ocupacioDesti = e3.ocupacio();
                llargDesti = llargaria(ocupacioDesti);
                switch(ocupacioDesti){
                    case 2:
                    str +=  "\tMOVE #14,D0\n"+
	                        "\tLEA SORTIDA,A1\n"+
	                        "\tTRAP #15\n";
                    if(posicioDesti !=null){
                        str += "\tMOVE.W "+posicioDesti+"(A7),D1\n";
                    }else{
                        str += "\tMOVE.W V"+(Integer)t3+",D1\n";
                    }
                    str += "\tMOVE #6,D0\n";
                    str += "\tTRAP #15\n";
                    break;
                    case 4:
                    str +=  "\tMOVE #14,D0\n"+
	                        "\tLEA SORTIDA,A1\n"+
	                        "\tTRAP #15\n";
                    if(posicioDesti !=null){
                        str += "\tMOVE.L "+posicioDesti+"(A7),D1\n";
                        str += "\tMOVE #3,D0\n";
                    }else{
                        str += "\tMOVE.L V"+(Integer)t3+",D1\n";
                        str += "\tMOVE #3,D0\n";
                    }
                    str += "\tTRAP #15\n";
                    break;
                }
                str += "\tCLR.L D1\n";
                str += "\tCLR.L D0\n";
                str += "\tMOVE.L #0, A1\n";
            break;
            case 20: //op,1,2,3 -> 3[2] = 1
                e1 = taula_variables.cerca_variable((Integer)t1);
                e3 = taula_variables.cerca_variable((Integer)t3);
                ocupacioOperand1 = e1.ocupacio();
                ocupacioDesti = e3.ocupacio();
                llargOperand1 = llargaria(ocupacioOperand1);
                llargDesti = llargaria(ocupacioDesti);
                posicioOperand1 = e1.getPosicio_pila();
                posicioDesti = e3.getPosicio_pila();
                if (posicioDesti != null) {
                    if(posicioOperand1 != null){
                        str += "\tMOVE."+llargOperand1+" "+posicioOperand1+"(A7),D0\n";
                        str += "\tMOVE.L D0,"+(posicioDesti+(Integer)t2*4)+"(A7)\n";
                    }else{
                        str += "\tMOVE."+llargOperand1+",D0\n";
                        str += "\tMOVE.L D0,"+(posicioDesti+(Integer)t2*4)+"(A7)\n";
                    }
                } else {
                    str += "\tLEA V"+(Integer)t3+",A0\n";
                    str += "\tMOVE."+llargOperand1+" V"+(Integer)t1+",D0\n";
                    str += "\tMOVE.L D0,"+4*(Integer)t2+"(A0)\n";
                }
            break;
            case 21:
                str += "\tSUBQ #4,A7\n";
                afegeix_pila += 4;
            break;
        }
        cEnsamblador += str;
    }
    
    /**********************************************************************
     *             Creació i Gestió de la Taula de Simbols                *
     **********************************************************************/

    Taula taula_simbols = new Taula();

    /**********************************************************************
     *             Tot sobre el codi Intermedi                            *
     **********************************************************************/

    //Pila de subprograma actual

    Stack<Integer> pila_procediments = new Stack<>();
    Integer etiquetes = 0; //anirà incrementant
    TaulaIntermedi taula_intermedi = new TaulaIntermedi();
    TaulaVariables taula_variables = new TaulaVariables();
    TaulaProcediments taula_procediments = new TaulaProcediments();
    Stack<Integer> pila_pendents = new Stack<>();

    public Integer novavar(Boolean temporal,Boolean parametre,Integer ocupacio){ //revisar lo des parametres
        if(temporal){
            new Dvar(); //incrementam n antes de afegir-ho
        }
        if(!pila_procediments.isEmpty()){
            Integer procediment = pila_procediments.peek();
            taula_variables.afegeix_variable(procediment,parametre,ocupacio,null);
        }else{
            taula_variables.afegeix_variable(null,null,ocupacio,null);
        }
        return taula_variables.n(); //darrer n
    }

    public Integer novavar(Boolean temporal,Integer ocupacio){ //revisar lo des parametres
        if(temporal){
            new Dvar(); //incrementam n antes de afegir-ho
        }
        if(!pila_procediments.isEmpty()){
            Integer procediment = pila_procediments.peek();
            taula_variables.afegeix_variable(procediment,false,ocupacio,null);
        }else{
            taula_variables.afegeix_variable(null,false,ocupacio,null);
        }
        return taula_variables.n(); //darrer n
    }

    Integer afegeix_pila = 0;


    public void nouproc(Integer nivell, Integer parametres, Integer etiqueta, Integer np,Integer lloc_retorn){
        Integer ocupacio1 = ocupacio_locals(np);
        Integer ocupacio2 = ocupacio_parametres(ocupacio1,np);
        if(lloc_retorn!=null){
            lloc_retorn = ocupacio1+ocupacio2+4;
        }
        taula_procediments.afegeix_procediment(np,etiqueta,ocupacio1,ocupacio2,lloc_retorn);
    }
    /**********************************************************************
     *           Mètodes per la gestió del codi Ensamblador               *
     **********************************************************************/

    public Integer ocupacio_locals(Integer np){
        ArrayList<Entrada> llista = taula_variables.getFiles();
        Iterator <Entrada> it = llista.iterator();
        Integer ocupacio =0;
        
        Integer nv = 0;

        while(it.hasNext()){
            Entrada ent = (Entrada) it.next();
            if(ent.getSubprograma() == np){
                if(ent.ocupacio()!=null){
                    if(!ent.getParametre()){
                        if(ent.ocupacio() == 0){ //tupla
                            ent.setPosicio_pila(ocupacio); //afegim a la posicio de la pila on es trobarà la variable local
                            ocupacio += num_camps(nv) * 4; //cada camp es un long
                        }else{
                            ent.setPosicio_pila(ocupacio); //afegim a la posicio de la pila on es trobarà la variable local
                            ocupacio += ent.ocupacio();
                        } 
                    } 
                } 
            }
            nv++;
        }
        return ocupacio;
    }

    public Integer ocupacio_parametres(Integer ocupacio,Integer np){
        Integer ocupacio_parametres = 0;
        ArrayList<Entrada> llista = taula_variables.getFiles();
        Iterator <Entrada> it = llista.iterator();

        while(it.hasNext()){
            Entrada ent = (Entrada) it.next();
            if(ent.getSubprograma() == np){
                if(ent.ocupacio()!=null){
                    if(ent.getParametre()){
                        //ent.setPosicio_pila(ocupacio+4+ocupacio_parametres);
                        ocupacio_parametres += ent.ocupacio();
                    }
                }
            }
        }
        it = llista.iterator();
        Integer n = 0;
        while(it.hasNext()){
            Entrada ent = (Entrada) it.next();
            if(ent.getSubprograma() == np){
                if(ent.ocupacio()!=null){
                    if(ent.getParametre()){
                        n += ent.ocupacio();
                        ent.setPosicio_pila(ocupacio+4+ocupacio_parametres-n);
                    }
                }
            }
        }
        return ocupacio_parametres;
    }

    public void mostra_intermedi() throws IOException {
      FileWriter sortidap;
      BufferedWriter sortida;

      sortidap = new FileWriter("Intermedi.txt");
      sortida = new BufferedWriter(sortidap);
    

        ArrayList<Sentencia> llista = taula_intermedi.get_Llista();
        Iterator<Sentencia> iterator = llista.iterator();
        while (iterator.hasNext()) {
        Sentencia s = iterator.next();
        try {
            sortida.write(
                "Operacio: " + s.getOperacio() + " Op1: " + s.getOp1() + " Op2: " + s.getOp2() + " Desti: " + s.getDesti());
                sortida.write("\n");
        } catch (IOException error) {
            System.out.println(error.toString());
        }
        }

        try {
        sortida.close();
        } catch (IOException error) {
        System.out.println(error.toString());
        }
    }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    private boolean errorSemantic = false;
    private boolean errorSintactic = false;

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
        errorSintactic = true;
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);

    }

    public void report_error_semantic(String message,Location left, Location right){
        System.err.println("ERROR "+message+" desde: "+left.getLine()+"/"+left.getColumn()+" fins: "+right.getLine()+"/"+right.getColumn());

    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= M0 PROGRAMA 
            {
              Object RESULT =null;
		//System.out.println("PROG -> M0 PROGRAMA");
        if(errorSemantic){
            taula_intermedi.clear();
        }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROG",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= DECL PUNTICOMA PROGRAMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= PROCEDIMENT PROGRAMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= MAIN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // M0 ::= 
            {
              Object RESULT =null;
		//System.out.println("Inicialització");
        taula_simbols.posar("ent", new Dtipus(new Escalar("ts_enter", Integer.MIN_VALUE, Integer.MAX_VALUE,4)));
        taula_simbols.posar("bool", new Dtipus(new Escalar("ts_boolea", -1, 0,4)));
        taula_simbols.posar("car", new Dtipus(new Escalar("ts_caracter", 0, 255,2)));
        taula_simbols.posar("tupla", new Dtipus(new Tupla()));
        taula_simbols.posar("VER", new Dconst(-1,"boolea"));
        taula_simbols.posar("FALS", new Dconst(0,"boolea"));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M0",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= DECL_TUPLA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= DECL_TIPUS 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= DECL_CONST 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL ::= error PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIES ::= SENT SENTENCIES 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIES ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENT ::= DECL PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENT ::= MODIF_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENT ::= MENTRE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= FMENTRE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= IF 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= CRIDA_PROC PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= SORTIDAS PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // PROCEDIMENT_1 ::= metode ID LPAREN ARGS RPAREN 
            {
              SimbolProcediment2 RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolArgs a = (SimbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//System.out.println("PROCEDIMENT_1");

                    if(!errorSemantic){
                        String nom = (String) i.valor;
                        Stack<KeyValor> llista = a.getLlista();

                        Dproc procediment = new Dproc();
                        Boolean bol = taula_simbols.posar(nom, procediment);

                        if(bol == false){
                            report_error_semantic("No es pot crear el procediment amb nom "+(String)i.valor+" ja hi un altre component amb aquest nom", i.esquerre,i.dreta);
                            errorSemantic = true;
                        }else{
                            Integer par = 0;

                            Integer etiqueta = etiquetes++;
                            taula_intermedi.genera(Operacio.skip,null,null,etiqueta);
                            
                            while(!llista.isEmpty()){
                                    KeyValor k = llista.pop();
                                    String id = k.key; //nom del paràmetre
                                    String tipus = k.tipus; //valor o variable a afegir

                                    Darg g = new Darg(tipus,id);
                                    bol = taula_simbols.posarparam(nom,id,g);
                                    if(bol == false){
                                        report_error_semantic("Ja hi ha un argument amb el nom "+id+" al subprograma "+(String) i.valor, i.esquerre,i.dreta);
                                        errorSemantic = true;
                                        break;
                                    }
                                    nom += "_"+tipus;
                                    par++;
                            }

                            RESULT = new SimbolProcediment2(taula_simbols.getN(),etiqueta,par,procediment.np());

                            taula_simbols.entra_bloc();

                            pila_procediments.push(procediment.np());

                            Dada2 dada = taula_simbols.primer_parametre(nom);
                            while(dada!=null){
                                String idparam = dada.idcamp();
                                Darg d = (Darg) dada.td();

                                Dvar var = new Dvar();
                                Integer ocupacio = 0;
                                switch(d.tipus()){
                                    case "ent":
                                    ocupacio = 4;
                                    break;
                                    case "car":
                                    ocupacio = 2;
                                    break;
                                    case "bool":
                                    ocupacio = 1;
                                    break;
                                }

                                Integer n = novavar(false,true,ocupacio);
                                Dargin arg = new Dargin(var.getMy_nv(), d.tipus());
                                //taula_intermedi.genera(Operacio.pmb,null,null,var.getMy_nv());
                                taula_simbols.posar(idparam, arg);
                                dada = dada.next();
                            }
                            taula_intermedi.genera(Operacio.pmb,null,null,procediment.np());
                        }
                    }   

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT_1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PROCEDIMENT_2 ::= metode TIPUS ID LPAREN ARGS RPAREN 
            {
              SimbolProcediment2 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolArgs a = (SimbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//System.out.println("PROCEDIMENT_2");
                        if(!errorSemantic){
                            String nom = (String) i.valor;
                            Stack<KeyValor> llista = a.getLlista();

                            Dproc procediment = new Dproc(t.getTipus());
                            Boolean bol = taula_simbols.posar(nom, procediment);

                            if(bol == false){
                                report_error_semantic("No es pot crear el procediment amb nom "+(String)i.valor+" ja hi un altre component amb aquest nom", i.esquerre,i.dreta);
                                errorSemantic = true;
                            }else{
                                Integer par = 0;

                                Integer etiqueta = etiquetes++;
                                taula_intermedi.genera(Operacio.skip,null,null,etiqueta);

                                while(!llista.isEmpty()){
                                        KeyValor k = llista.pop();
                                        String id = k.key; //nom del paràmetre
                                        String tipus = k.tipus; //valor o variable a afegir

                                        Darg g = new Darg(tipus,id);
                                        bol = taula_simbols.posarparam(nom,id,g);
                                        if(false){
                                            report_error_semantic("Ja hi ha un argument amb el nom "+id+" al subprograma "+(String) i.valor, i.esquerre,i.dreta);
                                            errorSemantic = true;
                                            break;
                                        }
                                        nom += "_"+tipus;
                                        par++;
                                }

                                Integer nivell = taula_simbols.getN();

                                taula_simbols.entra_bloc();

                                pila_procediments.push(procediment.np());
                                Dada2 dada = taula_simbols.primer_parametre(nom);
                                while(dada!=null){
                                    String idparam = dada.idcamp();
                                    Darg d = (Darg) dada.td();

                                    Dvar var = new Dvar();
                                    Integer ocupacio = 0;
                                    switch(d.tipus()){
                                        case "ent":
                                        ocupacio = 4;
                                        break;
                                        case "car":
                                        ocupacio = 2;
                                        break;
                                        case "bool":
                                        ocupacio = 1;
                                        break;
                                    }
                                    Integer n = novavar(false,true,ocupacio);
                                    Dargin arg = new Dargin(var.getMy_nv(), d.tipus());
                                    //taula_intermedi.genera(Operacio.pmb,null,null,var.getMy_nv());
                                    taula_simbols.posar(idparam, arg);
                                    dada = dada.next();
                                }
                                taula_intermedi.genera(Operacio.pmb,null,null,procediment.np());
                                
                                RESULT = new SimbolProcediment2(t.getTipus(),nivell,etiqueta,par,procediment.np());    
                            }   
                        }
                                        

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT_2",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // PROCEDIMENT ::= PROCEDIMENT_1 LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolProcediment2 p = (SimbolProcediment2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//System.out.println("PROC");
                    if(!errorSemantic){
                        Integer n = p.getNivell();
                        Integer parametres = p.getParametres();
                        Integer etiqueta = p.getEtiqueta();
                        Integer np = p.getNp();

                        taula_intermedi.genera(Operacio.retorn,null,null,np);

                        nouproc(n,parametres,etiqueta,np,null);
                        taula_simbols.surtbloc();
                        pila_procediments.pop();  
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // PROCEDIMENT ::= PROCEDIMENT_2 LCLAUDAT SENTENCIES RETURN RCLAUDAT 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolProcediment2 p = (SimbolProcediment2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolReturn r = (SimbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//System.out.println("PROC");
                    if(!errorSemantic){
                        Dtipus ti = (Dtipus) taula_simbols.consulta(p.getTipus());
                        if(ti.dt().tipus_subjacent()!=r.getExpresio().getTsb()){
                            report_error_semantic("El tipus de retorn es diferent del procediment", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                        }

                        Integer n = p.getNivell();
                        Integer parametres = p.getParametres();
                        Integer etiqueta = p.getEtiqueta();
                        Integer np = p.getNp();

                        Integer ocupacio_retorn = null;
                        switch(p.getTipus()){
                            case "ent":
                                ocupacio_retorn = 4;
                            break;
                            default:
                                ocupacio_retorn = 1;
                            break;
                        }

                        taula_intermedi.genera(Operacio.retorn,r.getExpresio().getR(),null,np);
                        nouproc(n,parametres,etiqueta,np,ocupacio_retorn);
                        taula_simbols.surtbloc();
                        pila_procediments.pop();  
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // RETURN ::= retorna E PUNTICOMA 
            {
              SimbolReturn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//System.out.println("RETURN -> retorna E");
            RESULT = new SimbolReturn(e,e.getEsquerre(),e.getDreta());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARGS ::= ARGS_1 
            {
              SimbolArgs RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolArgsp a = (SimbolArgsp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("ARGS -> ARGS_1");
                if(!errorSemantic){
                    RESULT = new SimbolArgs(a.getLlista());
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARGS ::= 
            {
              SimbolArgs RESULT =null;
		//System.out.println("@");
                RESULT = new SimbolArgs();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARGS_1 ::= ARG COMA ARGS_1 
            {
              SimbolArgsp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolArg a = (SimbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolArgsp b = (SimbolArgsp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("ARGS_1 -> ARG COMA ARGS_1");
                b.afegeix(a.getId(),a.getTipus());
                RESULT = b;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARGS_1 ::= ARG 
            {
              SimbolArgsp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolArg a = (SimbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("ARGS_1 -> ARG");
                SimbolArgsp p = new SimbolArgsp();
                p.afegeix(a.getId(),a.getTipus());
                RESULT = p;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARG ::= TIPUS ID 
            {
              SimbolArg RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("ARG -> TIPUS ID");
    RESULT = new SimbolArg((String)d.valor,t.getTipus());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CRIDA_PROC ::= R 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("CRIDA_PROC");
            if(!errorSemantic){
                if(r.getMvp() =="procc"){

                }else{
                    report_error_semantic("No es pot posar una referència tota sola", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                }        
            }
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDA_PROC",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MAIN ::= metode main LPAREN M2 RPAREN LCLAUDAT SENTENCIES RCLAUDAT M3 
            {
              Object RESULT =null;
		//System.out.println("MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // M2 ::= 
            {
              Object RESULT =null;
		//System.out.println("M2");
    if(!errorSemantic){
        taula_simbols.entra_bloc();
        taula_intermedi.genera(Operacio.skip,null,null,-1);
        pila_procediments.push(-1); 
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M2",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // M3 ::= 
            {
              Object RESULT =null;
		//System.out.println("M3");
    if(!errorSemantic){
        nouproc(1,0,-1,-1,null);
        taula_simbols.surtbloc();
        taula_intermedi.genera(Operacio.retorn,null,null,-1); 
    }

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M3",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPUS ::= enter 
            {
              SimbolTipus RESULT =null;
		//System.out.println("TIPUS -> enter");
                RESULT = new SimbolTipus("ent");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPUS ::= logic 
            {
              SimbolTipus RESULT =null;
		//System.out.println("TIPUS -> logic");
                RESULT = new SimbolTipus("bool");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPUS ::= caracter 
            {
              SimbolTipus RESULT =null;
		//System.out.println("TIPUS -> caracter");
                RESULT = new SimbolTipus("car");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // MENTRE ::= mentres M4 CONDICIO fer RESTA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolCondicio c = (SimbolCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolResta r = (SimbolResta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("MENTRE");
            if(!errorSemantic){
                Integer nostra = etiquetes++;
                Integer fin = etiquetes++;
                taula_intermedi.afegeix_Llista(c.getLlista());
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,0,null,n);
                taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),fin);
                taula_intermedi.afegeix_Llista(r.getLlista());
                taula_intermedi.genera(Operacio.salt_incondicional,null,null,nostra);
                taula_intermedi.genera(Operacio.skip,null,null,fin);
                taula_intermedi.canvia_etiqueta(nostra,pila_pendents.pop());
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MENTRE",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // M4 ::= 
            {
              Object RESULT =null;
		//System.out.println("M4");
        if(!errorSemantic){
          taula_intermedi.genera(Operacio.skip,null,null,-1);
        pila_pendents.push(taula_intermedi.size()-1);  
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M4",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IF ::= si CONDICIO RESTA IF_1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolCondicio c = (SimbolCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolResta r = (SimbolResta)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolIf1 i = (SimbolIf1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("IF");
                if(!errorSemantic){
                        if(i!=null){
                            Integer et = i.getEtiqueta(); //etiqueta final
                            Integer nostra = etiquetes++;
                            ArrayList<Sentencia> llista1 = c.getLlista();
                            ArrayList<Sentencia> llista2 = r.getLlista();
                            ArrayList<Sentencia> llista3 = new ArrayList<>();
                            llista3.addAll(taula_intermedi.get_Llista());
                            taula_intermedi.clear();

                            taula_intermedi.set_Llista(llista1);
                            Integer n = novavar(true,4);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);
                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista2);
                            taula_intermedi.genera(Operacio.salt_incondicional,null,null,et);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);

                            taula_intermedi.afegeix_Llista(llista3);   
                        }else{
                            Integer nostra = etiquetes++;

                            ArrayList<Sentencia> llista1 = c.getLlista();
                            ArrayList<Sentencia> llista2 = r.getLlista();
                            taula_intermedi.clear();

                            taula_intermedi.set_Llista(llista1);
                            Integer n = novavar(true,4);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);
                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista2);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);
                        }
                    }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CONDICIO ::= LPAREN E RPAREN 
            {
              SimbolCondicio RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        //System.out.println("CONDICIO");
        if(!errorSemantic){
            if(e.getTsb()!="ts_boolea"){
                report_error_semantic("La expresió ha de ser de tipus booleà", e.getEsquerre(),e.getDreta());
                errorSemantic = true;
            }else{ 
                RESULT = new SimbolCondicio(taula_intermedi.get_Llista(),e.getR());
                taula_intermedi.clear();
            }  
        }  
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICIO",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RESTA ::= LCLAUDAT SENTENCIES RCLAUDAT 
            {
              SimbolResta RESULT =null;
		
    if(!errorSemantic){
        //System.out.println("RESTA");
        RESULT = new SimbolResta(taula_intermedi.get_Llista());
        taula_intermedi.clear(); 
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RESTA",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF_1 ::= sino si CONDICIO RESTA IF_1 
            {
              SimbolIf1 RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolCondicio c = (SimbolCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolResta r = (SimbolResta)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolIf1 i = (SimbolIf1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("IF_1");
                if(!errorSemantic){
                        if(i!=null){
                            Integer et = i.getEtiqueta(); //etiqueta final
                            Integer nostra = etiquetes++;
                            
                            ArrayList<Sentencia> llista1 = r.getLlista();
                            ArrayList<Sentencia> llista2 = c.getLlista();
                            ArrayList<Sentencia> llista3 = new ArrayList<>();
                            llista3.addAll(taula_intermedi.get_Llista());
                            taula_intermedi.clear();

                            taula_intermedi.afegeix_Llista(llista2);
                            Integer n = novavar(true,4);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);

                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista1);
                            taula_intermedi.genera(Operacio.salt_incondicional,null,null,et);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);
                            taula_intermedi.afegeix_Llista(llista3);
                            RESULT = new SimbolIf1(et);  
                        }else{
                            Integer nostra = etiquetes++;
                            ArrayList<Sentencia> llista1 = r.getLlista();
                            ArrayList<Sentencia> llista2 = c.getLlista();
                            taula_intermedi.clear();

                            taula_intermedi.afegeix_Llista(llista2);
                            Integer n = novavar(true,4);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);

                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista1);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);
                            RESULT = new SimbolIf1(nostra);
                        }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF_1 ::= sino LCLAUDAT SENTENCIES RCLAUDAT 
            {
              SimbolIf1 RESULT =null;
		System.out.println("sino");
                taula_intermedi.genera(Operacio.skip,null,null,etiquetes);
                RESULT = new SimbolIf1(etiquetes++);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_1 ::= 
            {
              SimbolIf1 RESULT =null;
		System.out.println("@");
                RESULT = new SimbolIf1();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FMENTRE ::= fer M4 RESTA mentres CONDICIO PUNTICOMA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolResta r = (SimbolResta)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolCondicio c = (SimbolCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//System.out.println("FMENTRE");
            if(!errorSemantic){
                Integer nostra = etiquetes++;
                taula_intermedi.afegeix_Llista(r.getLlista());
                taula_intermedi.afegeix_Llista(c.getLlista());
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,-1,null,n);
                taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                taula_intermedi.canvia_etiqueta(nostra,pila_pendents.pop());
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FMENTRE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ENTRADAS ::= entradaS LPAREN TIPUS RPAREN 
            {
              SimbolEntrada RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("ENTRADAS");
            if(!errorSemantic){
                Dtipus d = (Dtipus) taula_simbols.consulta(t.getTipus());
                Escalar e = (Escalar) d.dt();
                Integer n = novavar(true,e.getBytes());
                RESULT = new SimbolEntrada(t.getTipus(),d.dt().tipus_subjacent(),n,s.esquerre,r.dreta);
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SORTIDAS ::= sortidaS LPAREN E RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//System.out.println("SORTIDAS");
        if(!errorSemantic){
            if((e.getTsb()=="ts_nul")&&(e.getTsb()=="ts_record")){
                report_error_semantic("Tipus erroni de sortida de teclat", e.getEsquerre(),e.getDreta());
                errorSemantic = true;
            }else{
                taula_intermedi.genera(Operacio.console_write,null,null,e.getR());
            } 
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SORTIDAS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECL_CONST ::= constant TIPUS ID ASSIGN E 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("DECL_CONST -> constant TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    if((tipus.dt().tipus_subjacent() == "ts_enter")&&(e.getTsb()!="ts_caracter")){
                      report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus();  
                    }else if((tipus.dt().tipus_subjacent() == "ts_caracter")&&(e.getTsb()!="ts_enter")){
                        report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus(); 
                    }else if((tipus.dt().tipus_subjacent() == "ts_boolea")){
                        report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus(); 
                    }
                }
                if(!errorSemantic){
                   String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Integer n = novavar(true,taula_variables.get_ocupacio(e.getR()));
                    Boolean bol = taula_simbols.posar((String)a.valor,new Dconst(ti,n));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //*****************Intermedi********************
                        taula_intermedi.genera(Operacio.copia,e.getR(),null,n);
                        //****************************************************
                    } 
                }
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECL_CONST ::= constant TIPUS ID ASSIGN MODIF_TIPUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("DECL_CONST -> constant TIPUS A ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    if((tipus.dt().tipus_subjacent() == "ts_enter")&&(m.getTsb()!="ts_caracter")){
                      report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,m.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus();  
                    }else if((tipus.dt().tipus_subjacent() == "ts_caracter")&&(m.getTsb()!="ts_enter")){
                        report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,m.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus(); 
                    }else if((tipus.dt().tipus_subjacent() == "ts_boolea")){
                        report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,m.getDreta());
                      errorSemantic = true;
                    }
                }
                if(!errorSemantic){
                   String ti = t.getTipus(); //tipus que afegirem als identificador
                    Integer n = novavar(true,taula_variables.get_ocupacio(m.getR()));
                    Boolean bol = taula_simbols.posar((String)a.valor,new Dconst(ti,n));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //*****************Intermedi********************
                        taula_intermedi.genera(Operacio.copia,m.getR(),null,n);
                        //****************************************************
                    } 
                } 
            }    
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECL_TIPUS ::= TIPUS ID 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("DECL_TIPUS -> TIPUS ID ");
            String tipus = t.getTipus(); //tipus que afegirem als identificadors
            Dvar d = new Dvar(tipus);
            Boolean bol = taula_simbols.posar((String) a.valor,d);
            if(!bol){
                report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                errorSemantic = true;
            }
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECL_TIPUS ::= TIPUS ID ASSIGN E 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("DECL_TIPUS -> TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    if((tipus.dt().tipus_subjacent() == "ts_enter")&&(e.getTsb()!="ts_caracter")){
                      report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus();  
                    }else if((tipus.dt().tipus_subjacent() == "ts_caracter")&&(e.getTsb()!="ts_enter")){
                        report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus(); 
                    }else if((tipus.dt().tipus_subjacent() == "ts_boolea")){
                        report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus();
                    }
                }

                if(!errorSemantic){
                   String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Dvar var = new Dvar(ti);
                    Boolean bol = taula_simbols.posar((String) a.valor,var);
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //*****************Intermedi********************
                        Integer n = novavar(false,((Escalar) tipus.dt()).getBytes());
                        taula_intermedi.genera(Operacio.copia,e.getR(),null,var.getMy_nv());
                        //****************************************************
                    } 
                }
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECL_TIPUS ::= TIPUS ID ASSIGN MODIF_TIPUS 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("DECL_TIPUS -> TIPUS ID ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    if((tipus.dt().tipus_subjacent() == "ts_enter")&&(m.getTsb()!="ts_caracter")){
                      report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,m.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus();  
                    }else if((tipus.dt().tipus_subjacent() == "ts_caracter")&&(m.getTsb()!="ts_enter")){
                        report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,m.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus(); 
                    }else if((tipus.dt().tipus_subjacent() == "ts_boolea")){
                        report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,m.getDreta());
                      errorSemantic = true;
                      RESULT = new SimbolDeclTipus();
                    }
                }
                if(!errorSemantic){
                  String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Dvar var = new Dvar(ti);
                    Boolean bol = taula_simbols.posar((String) a.valor,var);
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //****************************Intermedi**********************************
                        Integer n = novavar(false,((Escalar) tipus.dt()).getBytes());
                        taula_intermedi.genera(Operacio.copia,m.getR(),null,var.getMy_nv());
                        //***********************************************************************
                    }  
                }
            }
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // MODIF_TIPUS ::= R I_1 
            {
              SimbolModifTipus RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolI i = (SimbolI)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("MODIF_TIPUS -> R I_1");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{
                if(r.getMvp()=="const"){ //malament
                    report_error_semantic("No es pot modificar una constant", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else if(r.getMvp()=="procc"){
                    report_error_semantic("No es pot modificar un procediment", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else{
                    switch(i.getOperacio()){
                    case "si": //+=
                        if((i.getTsb()!="ts_enter")&&(i.getTsb()!="ts_caracter")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: +=", i.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("La Referència te un tipus equivocat per l'operació: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                            }else{
                                //******************Intermedi******************
                                taula_intermedi.genera(Operacio.suma,r.getR(),i.getR(),r.getR()); //r.getR() += I
                                //********************************************

                                RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());  
                            }
                        }
                        break;
                    case "ri": //-=
                        if((i.getTsb()!="ts_enter")&&(i.getTsb()!="ts_caracter")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: -=", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("La Referència te un tipus equivocat per l'operació: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                            }else{
                                //******************Intermedi******************
                                taula_intermedi.genera(Operacio.resta,r.getR(),i.getR(),r.getR()); //r.getR() += I
                                //********************************************
                                RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR()); 
                            }
                        }
                        break;
                    case "ig":
                        if(!(i.getTsb().equals(r.getTsb()))){
                            if((i.getTsb().equals("ts_enter"))&&(!r.getTsb().equals("ts_caracter"))){
                                report_error_semantic("El tipus de la referència i la expresió no coincideixen amb l'operacio: =", r.getEsquerre(),i.getDreta());
                                errorSemantic = true;
                                RESULT = new SimbolModifTipus();
                            }else if((i.getTsb().equals("ts_caracter"))&&(!r.getTsb().equals("ts_enter"))){
                                report_error_semantic("El tipus de la referència i la expresió no coincideixen amb l'operacio: =", r.getEsquerre(),i.getDreta());
                                errorSemantic = true;
                                RESULT = new SimbolModifTipus();
                            }
                        }

                        if(!errorSemantic){
                            //******************Intermedi******************
                                taula_intermedi.genera(Operacio.copia,i.getR(),null,r.getR()); //r.getR() += I
                            //********************************************
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());
                        }
                        break;
                }
                }
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // MODIF_TIPUS ::= R ASSIGN MODIF_TIPUS 
            {
              SimbolModifTipus RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("MODIF_TIPUS -> R ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{
                    if(!(m.getTsb().equals(r.getTsb()))){
                            if((m.getTsb().equals("ts_enter"))&&(!r.getTsb().equals("ts_caracter"))){
                                report_error_semantic("El tipus de la referència i la expresió no coincideixen amb l'operacio: =", r.getEsquerre(),m.getDreta());
                                errorSemantic = true;
                                RESULT = new SimbolModifTipus();
                            }else if((m.getTsb().equals("ts_caracter"))&&(!r.getTsb().equals("ts_enter"))){
                                report_error_semantic("El tipus de la referència i la expresió no coincideixen amb l'operacio: =", r.getEsquerre(),m.getDreta());
                                errorSemantic = true;
                                RESULT = new SimbolModifTipus();
                            }
                        }
                    if(!errorSemantic){
                       //******************Intermedi******************
                        taula_intermedi.genera(Operacio.copia,m.getR(),null,r.getR()); //r.getR() += I
                        //********************************************
                    RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),m.getDreta(),r.getR()); 
                    }   
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // R ::= ID 
            {
              SimbolR RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("R -> ID ");
        if(errorSemantic){
            RESULT  = new SimbolR();
        }else{
            Descripcio descripcio = taula_simbols.consulta((String)d.valor);
            if(descripcio == null){ //no es troba a la taula de simbols
                report_error_semantic("Undefined id \""+d.valor+"\"", d.esquerre,d.dreta);
                errorSemantic = true;
                RESULT  = new SimbolR();
            }else{ 
                if(descripcio instanceof Dvar){ 
                    Dvar var = (Dvar) descripcio;
                    Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR
                    RESULT = new SimbolR((String)d.valor,(String)d.valor,tipus.dt().tipus_subjacent(),var.tipus(),"var",var.getMy_nv(),-1,var.tipus(),d.esquerre,d.dreta);
                }else if(descripcio instanceof Dconst){ 
                    Dconst c = (Dconst) descripcio;
                    Dtipus tipus = (Dtipus) taula_simbols.consulta(c.tipus()); //ALERTA EN NO TROBAR

                    RESULT = new SimbolR((String)d.valor,(String)d.valor,tipus.dt().tipus_subjacent(),c.tipus(),"const",c.getTemporal(),-1,c.tipus(),d.esquerre,d.dreta);

                }else if(descripcio instanceof Dargin){
                    Dargin var = (Dargin) descripcio;
                    Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR
                    RESULT = new SimbolR((String)d.valor,(String)d.valor,tipus.dt().tipus_subjacent(),var.tipus(),"var",var.nv(),-1,var.tipus(),d.esquerre,d.dreta);

                }else{ //si no es tracta ni d'una variable, ni d'una constant, error
                    report_error_semantic("ID es un procediment \""+d.valor+"\"", d.esquerre,d.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // R ::= ID LPAREN VALORS RPAREN 
            {
              SimbolR RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("R -> ID (VALORS)"); //subprograma
        if(errorSemantic){
            RESULT  = new SimbolR();
        }else{
            if(v == null){ //crida a un subprograma fora paràmetres
                taula_intermedi.genera(Operacio.espai_retorn,null,null,null);
                Descripcio descripcio = taula_simbols.consulta((String)id.valor);
                if(descripcio == null){
                    report_error_semantic("El subprograma "+id.valor+" no existeix", id.esquerre,id.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }else{
                    if(descripcio instanceof Dproc){
                        Dproc proc = (Dproc) descripcio;
                        String tipus = proc.getTipus(); //miram si el procediment té algun tipus de retorn
                        if(tipus == "id_nula"){
                        RESULT = new SimbolR((String)id.valor,"ts_nul","id_nula","procc",id.esquerre,id.dreta);
                        taula_intermedi.genera(Operacio.crida,null,null,proc.np());  
                        }else{
                            Descripcio t = taula_simbols.consulta(proc.getTipus());
                            if(t instanceof Dtipus){ //no fa falta crec
                                Dtipus t1 = (Dtipus) t;

                                //**********************Intermedi*************************
                                Integer ocupacio = 0;
                                switch(tipus){
                                    case "ent":
                                    ocupacio = 4;
                                    break;
                                    case "car":
                                    ocupacio = 2;
                                    break;
                                    case "bool":
                                    ocupacio = 4;
                                    break;
                                }
                                Integer nova = novavar(true,ocupacio);
                                taula_intermedi.genera(Operacio.crida,nova,null,proc.np());
                                //******************************************************** 

                                RESULT = new SimbolR((String)id.valor,t1.dt().tipus_subjacent(),tipus,"procc",nova,-1,tipus,id.esquerre,id.dreta);
                            }else{
                                report_error_semantic("El tipus del subprograma \""+id.valor+"\" es erroni", id.esquerre,id.dreta);
                                errorSemantic = true;
                                RESULT  = new SimbolR();
                            }
                        }
                        
                    }else{
                        report_error_semantic("L'ID \""+id.valor+"\" no és un subprograma", id.esquerre,id.dreta);
                        errorSemantic = true;
                        RESULT  = new SimbolR();
                    }
                } 
            }else{
                Stack<SimbolE> llista = v.getLlista(); //llista amb els paràmetres
                taula_intermedi.genera(Operacio.espai_retorn,null,null,null);
                String nom = (String)id.valor;

                while(!llista.isEmpty()){
                    SimbolE e = llista.pop();
                    if((e.getTsb() == "ts_nul")||(e.getTsb() == "ts_record")){
                        report_error_semantic("El paràmetre no té el tipus adecuat per un subprograma", e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolR();
                    }else{
                        switch(e.getTsb()){
                            case "ts_boolea":
                                    nom += "_"+"bool";
                                    break;
                            case "ts_enter":
                                    nom+= "_"+"ent";
                                    break;
                            case "ts_caracter":
                                    nom+= "_"+"car";
                                    break;
                        }
                        taula_intermedi.genera(Operacio.param_simple,e.getR(),null,null);
                    }
                }

                Descripcio descripcio = taula_simbols.consulta(nom);
                if(descripcio == null){
                    report_error_semantic("El subprograma no existeix", id.esquerre,r.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }else{
                    if(descripcio instanceof Dproc){
                        Dproc proc = (Dproc) descripcio;
                        if(proc.getTipus() == "id_nula"){
                            RESULT = new SimbolR(nom,"ts_nul","id_nula","procc",id.esquerre,r.dreta);
                            taula_intermedi.genera(Operacio.crida,null,null,proc.np());
                        }else{
                        Dtipus tipus = (Dtipus) taula_simbols.consulta(proc.getTipus()); //alerta
                            //**********************Intermedi*************************
                                Integer ocupacio = 0;
                                switch(proc.getTipus()){
                                    case "ent":
                                    ocupacio = 4;
                                    break;
                                    case "car":
                                    ocupacio = 2;
                                    break;
                                    case "bool":
                                    ocupacio = 4;
                                    break;
                                }
                                Integer nova = novavar(true,ocupacio);

                                taula_intermedi.genera(Operacio.crida,nova,null,proc.np());
                            //******************************************************** 
                            
                            RESULT = new SimbolR(nom,tipus.dt().tipus_subjacent(),proc.getTipus(),"procc",nova,-1,proc.getTipus(),id.esquerre,r.dreta);
                        }
                    }else{ //per si acàs
                        report_error_semantic("Id no és un subprograma", id.esquerre,r.dreta);
                        errorSemantic = true;
                        RESULT  = new SimbolR();
                    }
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // R ::= R PUNT ID 
            {
              SimbolR RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("R -> R PUNT ID "+(String)i.valor);
        if(errorSemantic){
            RESULT  = new SimbolR();
        }else{
            if((r.getMvp()=="const")&&(r.getTsb()=="ts_record")){
                Dcamp c = (Dcamp) taula_simbols.consultacamp(r.getIdb_dreta(),(String)i.valor);
                if(c!=null){

                    Integer despl = c.getDespl();
                    //despl += r.getDpc();
                    
                    if(c.getTsb()=="ts_record"){
                        Dconst cons = (Dconst) taula_simbols.consulta(c.getIdb());
                        RESULT = new SimbolR(r.getIdb_dreta(),c.getIdb(),c.getTsb(),c.tipus(),"const",cons.getTemporal(),0,c.tipus(),r.getEsquerre(),i.dreta);
                    }else{
                        RESULT = new SimbolR(r.getIdb(),(String)i.valor,c.getTsb(),c.tipus(),"var",r.getR(),despl,c.tipus(),r.getEsquerre(),i.dreta);
                    }
                    
                }else{
                    report_error_semantic("Id no es un camp de la tupla: "+r.getIdb_dreta(), i.esquerre,i.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR(); 
                }
            }else{
            report_error_semantic("La referència "+r.getIdb_dreta()+" no és una tupla", r.getEsquerre(),r.getDreta());
                errorSemantic = true;
                RESULT  = new SimbolR(); 
            } 
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // I_1 ::= SUMAHI E 
            {
              SimbolI RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("I_1 -> SUMAHI E");
        if(errorSemantic){
        RESULT = new SimbolI();
        }else{
        RESULT = new SimbolI("si",e.getTipus(),e.getTsb(),s.esquerre,e.getDreta(),e.getR());   
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // I_1 ::= RESTAHI E 
            {
              SimbolI RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("I_1 -> RESTAHI E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ri",e.getTipus(),e.getTsb(),r.esquerre,e.getDreta(),e.getR());   
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // I_1 ::= ASSIGN E 
            {
              SimbolI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> ASSIGN E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ig",e.getTipus(),e.getTsb(),a.esquerre,e.getDreta(),e.getR());   
        }
    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALORS ::= VALS 
            {
              SimbolValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("VALORS -> VALS");
        RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALORS ::= 
            {
              SimbolValors RESULT =null;
		System.out.println("VALORS -> @");
            RESULT = new SimbolValors();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALS ::= E 
            {
              SimbolValors RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("VALORS -> E");
        if(errorSemantic){ //error a E
            RESULT = new SimbolValors();
        }else{
            SimbolValors v = new SimbolValors();
            v.afegirE(e); //afegim e
            RESULT = v;
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALS ::= E COMA VALS 
            {
              SimbolValors RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALORS -> E  COMA VALORS");
            if(errorSemantic){
                RESULT = new SimbolValors();
            }else{
                v.afegirE(e); //alreves, hauriem d'agafar la llista, i després ficarli
                RESULT = new SimbolValors(v.getLlista());
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALS_TUPLA ::= E COMA VALS_TUPLA 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("VALS_TUPLA -> E COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix("buit", e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALS_TUPLA ::= E DOSPUNTS ID COMA VALS_TUPLA 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("VALS_TUPLA -> E DOSPUNTS ID COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix((String)d.valor, e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALS_TUPLA ::= E 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("VALS_TUPLA -> E");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix("buit", e);
                    RESULT = sim;
                }  
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALS_TUPLA ::= E DOSPUNTS ID 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("VALS_TUPLA -> E DOSPUNTS ID");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix((String) d.valor, e);
                    RESULT = sim;
                }  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECL_TUPLA ::= tupla ID LPAREN RPAREN ASSIGN LPAREN VALS_TUPLA RPAREN 
            {
              SimbolDeclTupla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//System.out.println("DECL_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolDeclTupla();
                }else{
                    //Gestió
                    int n =0;
                    Stack<KeyValue> llista = v.getLlista();

                    Integer nv = novavar(true,0); //per guardar els elements de la tupla
                    //Entrada ent = taula_variables.cerca_variable(nv);
                    Boolean bol = taula_simbols.posar((String)i.valor,new Dconst("tupla",nv)); //mirar si posar es true o false
                    if(bol){
                        //*********Gestió Intermedi************
                        
                        Integer n2 =0;
                        //*************************************

                        while(!llista.isEmpty()){
                            KeyValue k = llista.pop();
                            String nom = k.key; //nom del paràmetre
                            SimbolE simbol = k.value; //valor o variable a afegir
                            if(nom == "buit"){ //no té identificador
                                nom = "Item"+n; //nom que li posam als camps que no tenen id
                            }

                            //ent.afegeixOcupacio(taula_variables.get_ocupacio(simbol.getR()));
                            if(simbol.getTsb()=="ts_record"){

                                taula_intermedi.genera(Operacio.ind_assign,simbol.getR(),n,nv); //op,1,2,3 -> 3[2] = 1
                                bol = taula_simbols.posarcamp((String)i.valor,nom,new Dcamp(simbol.getIdb(),simbol.getTipus(),n++,simbol.getTsb()));
                            }else{

                                taula_intermedi.genera(Operacio.ind_assign,simbol.getR(),n,nv); //op,1,2,3 -> 3[2] = 1
                                bol = taula_simbols.posarcamp((String)i.valor,nom,new Dcamp(simbol.getTipus(),n++,simbol.getTsb()));
                            }


                            if(bol == false){
                                report_error_semantic("El camp amb nom \""+nom+"\" ja existeix", simbol.getEsquerre(),simbol.getDreta());
                                errorSemantic = true;
                                //break; //pensar be
                            }
                        }
                        //no retornam res encara
                    }else{
                        report_error_semantic("La tupla \""+(String)i.valor+"\" ja existeix", i.esquerre,r.dreta);
                        errorSemantic = true;
                    }
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E ::= T E_1 
            {
              SimbolE RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("E -> T E_1");
    if(errorSemantic){
        RESULT = new SimbolE();
    }else{
        if((e==null)||(e.getTsb()=="ts_nul")){
            RESULT = new SimbolE(t.getIdb(),t.getTsb(),t.getTipus(),t.getMode(),t.getEsquerre(),t.getDreta(),t.getR());
        }else{
           if(t.getTsb()!="ts_boolea"){
                report_error_semantic("L'operand ha de ser de tipus booleà", t.getEsquerre(),t.getDreta());
                errorSemantic = true;
                RESULT = new SimbolE();
            }else{
                //*********************Intermedi*********************************
                    Integer n1 = novavar(true,4);
                    switch(e.getOperacio()){
                        case ParserSym.AND:
                            taula_intermedi.genera(Operacio.and,t.getR(),e.getR(),n1);
                            break;
                        case ParserSym.OR:
                            taula_intermedi.genera(Operacio.or,t.getR(),e.getR(),n1);
                            break;
                    }
                    //***************************************************************
                RESULT = new SimbolE("ts_boolea","id_nula","moderesult",t.getEsquerre(),e.getDreta(),n1);
            } 
        }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E_1 ::= AND T E_1 
            {
              SimbolEp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("E_1 -> AND T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if((t.getTsb() != "ts_boolea")){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació AND", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",t.getDreta(),t.getR());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 

                    //*********************Intermedi*********************************
                    Integer n1 = novavar(true,4);
                    switch(e.getOperacio()){
                        case ParserSym.AND:
                            taula_intermedi.genera(Operacio.and,t.getR(),e.getR(),n1);
                            break;
                        case ParserSym.OR:
                            taula_intermedi.genera(Operacio.or,t.getR(),e.getR(),n1);
                            break;
                    }
                    //***************************************************************
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",e.getDreta(),n1);
                }  
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E_1 ::= OR T E_1 
            {
              SimbolEp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("E_1 -> OR T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació OR", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",t.getDreta(),t.getR());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    //*********************Intermedi*********************************
                    Integer n1 = novavar(true,4);
                    switch(e.getOperacio()){
                        case ParserSym.AND:
                            taula_intermedi.genera(Operacio.and,t.getR(),e.getR(),n1);
                            break;
                        case ParserSym.OR:
                            taula_intermedi.genera(Operacio.or,t.getR(),e.getR(),n1);
                            break;
                    }
                    //***************************************************************
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",e.getDreta(),n1);
                }  
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E_1 ::= 
            {
              SimbolEp RESULT =null;
		//System.out.println("E_1 -> @");
        RESULT = new SimbolEp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // T ::= N T_1 
            {
              SimbolT RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolTp t = (SimbolTp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("T -> N T_1");
    if(errorSemantic){
        RESULT = new SimbolT();
    }else{
        if((t==null)||(t.getTsb() == "ts_nul")){ //venim de Tp -> @
            RESULT = new SimbolT(n.getIdb(),n.getTsb(),n.getTipus(),n.getMode(),n.getEsquerre(),n.getDreta(),n.getR());
        }else{
                if((n.getTsb()=="ts_record")){
                   report_error_semantic("El terminal no té un tipus adequat", n.getEsquerre(),n.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolT(); 
                }else{
                    //****************************Intermedi**************************************
                    Integer e1 = etiquetes;
                    etiquetes++;
                    Integer e2 = etiquetes;
                    etiquetes++;
                    Integer n1 = novavar(true,4);

                    switch(t.getOperacio()){
                        case ParserSym.IGIG:
                            if(n.getTsb()!=t.getTsb()){
                                if(((n.getTsb() == "ts_enter")&&(t.getTsb()!="ts_caracter"))||((n.getTsb() == "ts_caracter")&&(t.getTsb()!="ts_enter"))){
                                    report_error_semantic("Els terminals no tenen el mateix tipus subjacent", n.getEsquerre(),t.getDreta()); //arreglar
                                    errorSemantic = true;
                                    RESULT = new SimbolT();
                                }
                            }
                            if(!errorSemantic){
                              taula_intermedi.genera(Operacio.salt_condicional_igual,n.getR(),t.getR(),e1);  
                            }
                        break;
                        case ParserSym.DIF:
                            if(n.getTsb()!=t.getTsb()){
                                if(((n.getTsb() == "ts_enter")&&(t.getTsb()!="ts_caracter"))||((n.getTsb() == "ts_caracter")&&(t.getTsb()!="ts_enter"))){
                                    report_error_semantic("Els terminals no tenen el mateix tipus subjacent", n.getEsquerre(),t.getDreta()); //arreglar
                                    errorSemantic = true;
                                    RESULT = new SimbolT();
                                }
                            }
                            if(!errorSemantic){
                              taula_intermedi.genera(Operacio.salt_condicional_diferent,n.getR(),t.getR(),e1);   
                            }
                        break;
                    }

                    if(!errorSemantic){
                        taula_intermedi.genera(Operacio.copia_valor,0,null,n1);
                        taula_intermedi.genera(Operacio.salt_incondicional,null,null,e2);
                        taula_intermedi.genera(Operacio.skip,null,null,e1);
                        taula_intermedi.genera(Operacio.copia_valor,-1,null,n1);
                        taula_intermedi.genera(Operacio.skip,null,null,e2);

                        //***************************************************************************

                        RESULT = new SimbolT("ts_boolea","id_nula","moderesult",n.getEsquerre(),t.getDreta(),n1); 
                    }    
                }   
        }
    }

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // T_1 ::= IGIG N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("T_1 -> IGIG N T_1");
    if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
                if((n.getTsb()=="ts_record")){
                   report_error_semantic("El terminal no té un tipus adequat per l'operació ==", n.getEsquerre(),n.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolTp(); 
                }else{
                   RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.IGIG,"moderesult",n.getDreta(),n.getR()); 
                }      
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // T_1 ::= DIF N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("T_1 -> DIF N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb()=="ts_record")){
                   report_error_semantic("El terminal no té un tipus adequat per l'operació !=", n.getEsquerre(),n.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolTp(); 
                }else{
                   RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.DIF,"moderesult",n.getDreta(),n.getR()); 
                }
            
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // T_1 ::= 
            {
              SimbolTp RESULT =null;
		//System.out.println("T_1 -> @");
        RESULT = new SimbolTp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // N ::= M N_1 
            {
              SimbolN RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("N -> M N_1");
        if(errorSemantic){
            RESULT = new SimbolN();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolN(m.getIdb(),m.getTsb(),m.getTipus(),m.getMode(),m.getEsquerre(),m.getDreta(),m.getR()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((m.getTsb()=="ts_boolea")||(n.getTsb()=="ts_record")){
                   report_error_semantic("El terminal no té un tipus adequat", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolN(); 
                }else{
                        //**************Intermedi******************
                            Integer n1 = novavar(true,4);
                            switch(n.getOperacio()){
                                case ParserSym.ADD:
                                    taula_intermedi.genera(Operacio.suma,m.getR(),n.getR(),n1);
                                    break;
                                case ParserSym.SUB:
                                    taula_intermedi.genera(Operacio.resta,m.getR(),n.getR(),n1);
                                    break;
                            }
                        //*****************************************
                        RESULT = new SimbolN(m.getTsb(),"id_nula","moderesult",m.getEsquerre(),n.getDreta(),n1);
                }
                
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // N_1 ::= ADD M N_1 
            {
              SimbolNp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("N_1 -> ADD M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb()=="ts_boolea")||(m.getTsb()=="ts_record")){
                    report_error_semantic("El terminal no té un tipus adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.ADD,"moderesult",m.getDreta(),m.getR());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb()=="ts_boolea")||(m.getTsb()=="ts_record")){
                        report_error_semantic("El terminal no té un tipus adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 

                            //**************Intermedi******************
                            Integer n1 = novavar(true,4);
                            switch(n.getOperacio()){
                                case ParserSym.ADD:
                                    taula_intermedi.genera(Operacio.suma,m.getR(),n.getR(),n1);
                                    break;
                                case ParserSym.SUB:
                                    taula_intermedi.genera(Operacio.resta,m.getR(),n.getR(),n1);
                                    break;
                            }
                            //*****************************************
                            RESULT = new SimbolNp(m.getTsb(),"id_nula",ParserSym.ADD,"moderesult",n.getDreta(),n1);
                    }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // N_1 ::= SUB M N_1 
            {
              SimbolNp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("N_1 -> SUB M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb()=="ts_boolea")||(m.getTsb()=="ts_record")){
                    report_error_semantic("El terminal no té un tipus adequat per una operació de resta", m.getDreta(),m.getEsquerre());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.SUB,"moderesult",m.getDreta(),m.getR());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb()=="ts_boolea")||(m.getTsb()=="ts_record")){
                        report_error_semantic("El terminal no té un tipus adequat per una operació de resta", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 

                            //**************Intermedi******************
                            Integer n1 = novavar(true,4);
                            switch(n.getOperacio()){
                                case ParserSym.ADD:
                                    taula_intermedi.genera(Operacio.suma,m.getR(),n.getR(),n1);
                                    break;
                                case ParserSym.SUB:
                                    taula_intermedi.genera(Operacio.resta,m.getR(),n.getR(),n1);
                                    break;
                            }
                            //*****************************************
                            RESULT = new SimbolNp(m.getTsb(),"id_nula",ParserSym.SUB,"moderesult",n.getDreta(),n1);
                    }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // N_1 ::= 
            {
              SimbolNp RESULT =null;
		//System.out.println("N_1 -> @");
        RESULT = new SimbolNp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // M ::= F M_1 
            {
              SimbolM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("M -> F M_1");
        if(errorSemantic){
            RESULT = new SimbolM();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolM(f.getIdb(),f.getTsb(),f.getTipus(),f.getMode(),f.getEsquerre(),f.getDreta(),f.getR()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_record")){
                    report_error_semantic("El terminal no te un tipus adequat per una operació de multiplicacio/divisio/modul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolM();
                }else{
                        //**************Intermedi******************
                        Integer n = novavar(true,4);
                        taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                        //*****************************************
                        RESULT = new SimbolM(f.getTsb(),"id_nula","moderesult",f.getEsquerre(),m.getDreta(),n); 
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // M_1 ::= MULT F M_1 
            {
              SimbolMp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("M_1 -> MULT F M_1");
        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_record")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no té un tipus adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MULT,"moderesult",f.getDreta(),f.getR());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_record")){
                    report_error_semantic("El terminal no té un tipus adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ 

                        //**************Intermedi******************
                        Integer n = novavar(true,4);
                        taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                        //*****************************************
                        RESULT = new SimbolMp(f.getTsb(),"id_nula",ParserSym.MULT,"moderesult",m.getDreta(),n);
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // M_1 ::= 
            {
              SimbolMp RESULT =null;
		//System.out.println("M_1 -> @");
        RESULT = new SimbolMp();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // F ::= LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> LPAREN E RPAREN"); //pendent intermedi
                if(errorSemantic){
                    RESULT = new SimbolF();
                }else{
                    if(e.getTsb() == "ts_nul"){ //error
                        report_error_semantic("(E) té tsb null",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else if((e.getTsb() == "ts_record")){
                        report_error_semantic("La referència dins (E) no és un tipus elemental, és una tupla",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",l.esquerre,l.dreta,e.getR()); //no tenc clar es mode
                    }   
                } 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // F ::= venter 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> venter");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor,null,n);
                RESULT = new SimbolF("ts_enter","id_nula","modeconst",v.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // F ::= ENTRADAS 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEntrada s = (SimbolEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> ENTRADAS");
                if(!errorSemantic){
                  taula_intermedi.genera(Operacio.console_read,null,null,s.getR());
                  RESULT = new SimbolF(s.getTsb(),s.getTipus(),"modeconst",s.getEsquerre(),s.getDreta(),s.getR());  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // F ::= NOT ENTRADAS 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEntrada s = (SimbolEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 //System.out.println("NOT ENTRADAS");
        if(!errorSemantic){
            if(s.getTsb()!="ts_boolea"){
                report_error_semantic("No es pot fer un NOT a una entrada de teclat no booleana",s.getEsquerre(),s.getDreta());
                errorSemantic = true;
                RESULT  = new SimbolF();
            }else{
                taula_intermedi.genera(Operacio.console_read,null,null,s.getR());
                Integer n2 = novavar(true,4);
                taula_intermedi.genera(Operacio.not,s.getR(),null,n2);
                RESULT = new SimbolF(s.getTsb(),s.getTipus(),"modeconst",s.getEsquerre(),s.getDreta(),n2);
            } 
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // F ::= SUB ENTRADAS 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEntrada s = (SimbolEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("SUB ENTRADAS");
        if(!errorSemantic){
            if((s.getTsb()!= "ts_enter")&&(s.getTsb()!= "ts_caracter")){
                report_error_semantic("No es pot fer un SUB a una entrada de teclat  booleana",s.getEsquerre(),s.getDreta());
                errorSemantic = true;
                RESULT  = new SimbolF();
            }else{
                taula_intermedi.genera(Operacio.console_read,null,null,s.getR());
                Integer ocupacio = 4;
                if(s.getTsb() !="ts_enter"){
                    ocupacio = 2;
                }
                Integer n2 = novavar(true,ocupacio);
                taula_intermedi.genera(Operacio.menys,s.getR(),null,n2);
                RESULT = new SimbolF(s.getTsb(),s.getTipus(),"modeconst",s.getEsquerre(),s.getDreta(),n2);
            } 
        }
        
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // F ::= ADD ENTRADAS 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEntrada s = (SimbolEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("SUB ENTRADAS");
        if(!errorSemantic){
            if((s.getTsb()!= "ts_enter")&&(s.getTsb()!= "ts_caracter")){
                report_error_semantic("No es pot fer un SUB a una entrada de teclat  booleana",s.getEsquerre(),s.getDreta());
                errorSemantic = true;
                RESULT  = new SimbolF();
            }else{
                taula_intermedi.genera(Operacio.console_read,null,null,s.getR());
                RESULT = new SimbolF(s.getTsb(),s.getTipus(),"modeconst",s.getEsquerre(),s.getDreta(),s.getR());
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // F ::= SUB venter 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> SUB venter");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor*-1,null,n);
                RESULT = new SimbolF("ts_enter","id_nula","modeconst",s.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // F ::= ADD venter 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> ADD venter");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor,null,n);
                RESULT = new SimbolF("ts_enter","id_nula","modeconst",a.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // F ::= vcaracter 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> vcaracter");
                Integer n = novavar(true,2);
                taula_intermedi.genera(Operacio.copia_valor,(Character)v.valor,null,n);
                RESULT = new SimbolF("ts_caracter","id_nula","modeconst",v.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // F ::= ADD vcaracter 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> ADD");
                Integer n = novavar(true,2);
                taula_intermedi.genera(Operacio.copia_valor,(Character)v.valor,null,n); //revisar si passar a decimal o enter
                RESULT = new SimbolF("ts_caracter","id_nula","modeconst",a.esquerre,v.dreta,n); //assegurar que a car hi posam ts_caracter
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // F ::= SUB vcaracter 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> SUB");
                Integer n = novavar(true,2);
                taula_intermedi.genera(Operacio.copia_valor,(Character)v.valor*-1,null,n); //revisar si passar a decimal o enter
                RESULT = new SimbolF("ts_caracter","id_nula","modeconst",s.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // F ::= R 
            {
              SimbolF RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> ID");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if((r.getTsb() == "ts_nul")){ //error -> subprograma fora retorn 
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer ocupacio = 0;
                        switch(r.getTsb()){
                            case "ts_enter":
                            ocupacio = 4;
                            break;
                            case "ts_caracter":
                            ocupacio = 2;
                            break;
                            case "ts_boolea":
                            ocupacio = 1;
                            break;
                        }

                        if(r.getMvp() == "var"){
                            Integer n;
                            if(r.getDpc()!=-1){
                                n = novavar(true,ocupacio);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n);
                        }else if(r.getMvp() == "const"){

                            Integer n;
                            if(r.getDpc()!=-1){
                                n = novavar(true,ocupacio);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }

                            RESULT = new SimbolF(r.getIdb(),r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n);
                        }else if(r.getMvp() == "procc"){ 
                            RESULT = new SimbolF(r.getIdb(),r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),r.getR());
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // F ::= SUB R 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> SUB R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",s.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else if((r.getTsb() == "ts_record")){
                        report_error_semantic("La referència "+r.getIdb()+" no és un tipus elemental, és una tupla",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer ocupacio = 0;
                        switch(r.getTsb()){
                            case "ts_enter":
                            ocupacio = 4;
                            break;
                            case "ts_caracter":
                            ocupacio = 2;
                            break;
                            case "ts_boolea":
                            ocupacio = 1;
                            break;
                        }

                        if(r.getMvp() == "var"){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true,ocupacio);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }
                            Integer n2 = novavar(true,ocupacio);
                            taula_intermedi.genera(Operacio.menys,n,null,n2);

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n2);
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){

                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true,ocupacio);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }
                            Integer n2 = novavar(true,ocupacio);
                            taula_intermedi.genera(Operacio.menys,n,null,n2);

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n2);
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // F ::= ADD R 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> ADD R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",a.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else if((r.getTsb() == "ts_record")){
                        report_error_semantic("La referència "+r.getIdb()+" no és un tipus elemental, és una tupla",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer ocupacio = 0;
                        switch(r.getTsb()){
                            case "ts_enter":
                            ocupacio = 4;
                            break;
                            case "ts_caracter":
                            ocupacio = 2;
                            break;
                            case "ts_boolea":
                            ocupacio = 1;
                            break;
                        }

                        if(r.getMvp() == "var"){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true,ocupacio);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n);
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true,ocupacio);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n);
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // F ::= vlogic 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> vlogic");
                Integer n = novavar(true,4);
                switch((String)v.valor){
                    case "FALS":
                        taula_intermedi.genera(Operacio.copia_valor,false,null,n); //revisar si passar a decimal o enter
                        break;
                    default:
                        taula_intermedi.genera(Operacio.copia_valor,true,null,n); //revisar si passar a decimal o enter
                        break;
                }
                RESULT = new SimbolF("ts_boolea","id_nula","modeconst",v.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // F ::= SUB LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> SUB LPAREN E RPAREN"); //REVISAR
                if(errorSemantic){ //si s'ha comés un error Semantic a E
                   RESULT  = new SimbolF(); 
                }else{
                    if(e.getTsb() == "ts_nul"){ //error
                        report_error_semantic("(E) té tsb null",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else if((e.getTsb() == "ts_record")){
                        report_error_semantic("La referència dins (E) no és un tipus elemental, és una tupla",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer ocupacio = 0;
                        switch(e.getTsb()){
                            case "ts_enter":
                            ocupacio = 4;
                            break;
                            case "ts_caracter":
                            ocupacio = 2;
                            break;
                            case "ts_boolea":
                            ocupacio = 1;
                            break;
                        }
                        Integer n = novavar(true,ocupacio);
                        taula_intermedi.genera(Operacio.menys,e.getR(),null,n);
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",s.esquerre,r.dreta,n); 
                    }
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // F ::= NOT vlogic 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> NOT vlogic");
                Integer ni = novavar(true,4);
                switch((String)v.valor){
                    case "FALS":
                        taula_intermedi.genera(Operacio.copia_valor,true,null,ni); //revisar si passar a decimal o enter
                    break;
                    default:
                        taula_intermedi.genera(Operacio.copia_valor,false,null,ni); //revisar si passar a decimal o enter
                    break;
                }
                
                RESULT = new SimbolF("ts_boolea","id_nula","modeconst",n.esquerre,v.dreta,ni);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // F ::= NOT R 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> NOT R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() != "ts_boolea"){
                        report_error_semantic("Es necessita d'un tipus booleà per a una operació NOT ",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer ocupacio = 0;
                        switch(r.getTsb()){
                            case "ts_enter":
                            ocupacio = 4;
                            break;
                            case "ts_caracter":
                            ocupacio = 2;
                            break;
                            case "ts_boolea":
                            ocupacio = 1;
                            break;
                        }

                        if(r.getMvp() == "var"){
                                Integer n1;
                                if(r.getDpc()!=0){
                                    n1 = novavar(true,ocupacio);
                                    taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n1);
                                }else{
                                    n1 = r.getR();
                                }
                                Integer n2 = novavar(true,4);
                                taula_intermedi.genera(Operacio.not,n1,null,n2);
                                RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n2);  
                        }else if(r.getMvp() == "const"){
                                Integer n1;
                                if(r.getDpc()!=0){
                                    n1 = novavar(true,ocupacio);
                                    taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n1);
                                }else{
                                    n1 = r.getR();
                                }
                                Integer n2 = novavar(true,4);
                                taula_intermedi.genera(Operacio.not,n1,null,n2);

                                RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n2);  
                        }else if(r.getMvp() == "procc"){
                            Integer n1 = r.getR();
                            Integer n2 = novavar(true,4);
                            taula_intermedi.genera(Operacio.not,n1,null,n2);
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n2); 
                        }
                    }
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // F ::= NOT LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//System.out.println("F -> NOT LPAREN E RPAREN"); //posar error semantic
                if(errorSemantic){ //si a E s'ha comés un error semántic
                    RESULT  = new SimbolF();
                }else{
                    if(e.getTsb() != "ts_boolea"){
                        report_error_semantic("L'expresió no és booleana ",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer ocupacio = 0;
                        switch(e.getTsb()){
                            case "ts_enter":
                            ocupacio = 4;
                            break;
                            case "ts_caracter":
                            ocupacio = 2;
                            break;
                            case "ts_boolea":
                            ocupacio = 1;
                            break;
                        }
                        Integer n1 = novavar(true,ocupacio);
                        taula_intermedi.genera(Operacio.not,e.getR(),null,n1);
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",n.esquerre,r.dreta,n1);
                    }   
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
