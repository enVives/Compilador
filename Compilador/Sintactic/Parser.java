
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Compilador.Sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\175\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\021" +
    "\004\000\002\021\002\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\004\000\002\033\004\000\002\033\004\000\002\004" +
    "\012\000\002\004\014\000\002\030\004\000\002\031\007" +
    "\000\002\005\015\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\026\003\000\002\026\002\000\002\032\005\000\002\032" +
    "\003\000\002\034\004\000\002\022\012\000\002\023\012" +
    "\000\002\036\013\000\002\036\006\000\002\036\002\000" +
    "\002\025\013\000\002\052\016\000\002\052\014\000\002" +
    "\053\003\000\002\053\002\000\002\054\011\000\002\055" +
    "\003\000\002\055\003\000\002\056\010\000\002\057\006" +
    "\000\002\024\011\000\002\037\011\000\002\037\007\000" +
    "\002\037\002\000\002\060\004\000\002\010\004\000\002" +
    "\010\004\000\002\020\004\000\002\042\004\000\002\043" +
    "\005\000\002\043\003\000\002\040\004\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\041\003\000" +
    "\002\041\003\000\002\041\004\000\002\041\004\000\002" +
    "\041\003\000\002\007\010\000\002\007\006\000\002\045" +
    "\007\000\002\045\005\000\002\051\003\000\002\051\005" +
    "\000\002\015\007\000\002\016\005\000\002\006\007\000" +
    "\002\006\006\000\002\046\006\000\002\012\007\000\002" +
    "\013\010\000\002\014\010\000\002\017\005\000\002\044" +
    "\004\000\002\050\005\000\002\050\005\000\002\050\005" +
    "\000\002\050\005\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\005\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\002\000\002\047\005\000\002\047\003" +
    "\000\002\047\004\000\002\047\004\000\002\047\003\000" +
    "\002\047\004\000\002\047\004\000\002\047\003\000\002" +
    "\047\004\000\002\047\004\000\002\047\003\000\002\047" +
    "\003\000\002\047\003\000\002\047\006\000\002\047\004" +
    "\000\002\047\004\000\002\047\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\022\050\012\051\014\052\006\053\010\054" +
    "\013\055\023\067\011\072\016\001\002\000\004\027\u0146" +
    "\001\002\000\004\002\u0145\001\002\000\006\004\uffde\036" +
    "\uffde\001\002\000\004\002\ufffe\001\002\000\006\004\uffdd" +
    "\036\uffdd\001\002\000\020\004\223\050\012\051\014\052" +
    "\006\053\010\054\013\075\224\001\002\000\006\004\uffe0" +
    "\036\uffe0\001\002\000\006\004\uffdc\036\uffdc\001\002\000" +
    "\006\004\uffdf\036\uffdf\001\002\000\022\050\012\051\014" +
    "\052\006\053\010\054\013\055\023\067\011\072\016\001" +
    "\002\000\014\050\012\051\014\052\006\053\010\054\013" +
    "\001\002\000\004\027\217\001\002\000\022\050\012\051" +
    "\014\052\006\053\010\054\013\055\023\067\011\072\016" +
    "\001\002\000\004\004\146\001\002\000\004\027\144\001" +
    "\002\000\004\004\026\001\002\000\004\027\025\001\002" +
    "\000\050\004\ufffc\033\ufffc\034\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\060\ufffc\063\ufffc" +
    "\064\ufffc\065\ufffc\066\ufffc\067\ufffc\072\ufffc\073\ufffc\074" +
    "\ufffc\001\002\000\004\017\027\001\002\000\004\020\030" +
    "\001\002\000\006\021\032\027\uffaa\001\002\000\004\027" +
    "\uffab\001\002\000\004\017\033\001\002\000\026\004\041" +
    "\005\034\006\043\007\035\010\036\011\042\012\037\013" +
    "\040\017\045\047\044\001\002\000\066\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\020\uff91\026\uff91\027\uff91\034" +
    "\uff91\036\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91" +
    "\044\uff91\045\uff91\046\uff91\050\uff91\051\uff91\052\uff91\053" +
    "\uff91\054\uff91\055\uff91\067\uff91\072\uff91\001\002\000\066" +
    "\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\020\uff89\026" +
    "\uff89\027\uff89\034\uff89\036\uff89\037\uff89\040\uff89\041\uff89" +
    "\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89\050\uff89\051" +
    "\uff89\052\uff89\053\uff89\054\uff89\055\uff89\067\uff89\072\uff89" +
    "\001\002\000\066\012\uff8b\013\uff8b\014\uff8b\015\uff8b\016" +
    "\uff8b\020\uff8b\026\uff8b\027\uff8b\034\uff8b\036\uff8b\037\uff8b" +
    "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046" +
    "\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054\uff8b\055\uff8b" +
    "\067\uff8b\072\uff8b\001\002\000\010\005\141\006\142\011" +
    "\143\001\002\000\012\005\133\006\134\011\135\017\136" +
    "\001\002\000\066\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\020\uff8a\026\uff8a\027\uff8a\034\uff8a\036\uff8a\037\uff8a" +
    "\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\067\uff8a\072\uff8a\001\002\000\066\012\uff8e\013\uff8e\014" +
    "\uff8e\015\uff8e\016\uff8e\020\uff8e\026\uff8e\027\uff8e\034\uff8e" +
    "\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044" +
    "\uff8e\045\uff8e\046\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e" +
    "\054\uff8e\055\uff8e\067\uff8e\072\uff8e\001\002\000\066\012" +
    "\uff94\013\uff94\014\uff94\015\uff94\016\uff94\020\uff94\026\uff94" +
    "\027\uff94\034\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\050\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\055\uff94\067\uff94\072\uff94\001" +
    "\002\000\010\004\126\007\127\017\130\001\002\000\026" +
    "\004\041\005\034\006\043\007\035\010\036\011\042\012" +
    "\037\013\040\017\045\047\044\001\002\000\066\012\064" +
    "\013\065\014\061\015\066\016\060\020\uff96\026\uff96\027" +
    "\uff96\034\uff96\036\uff96\037\062\040\070\041\067\042\056" +
    "\043\057\044\063\045\071\046\055\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\067\uff96\072\uff96\001\002" +
    "\000\004\020\053\001\002\000\010\020\uffaf\034\uffaf\036" +
    "\051\001\002\000\026\004\041\005\034\006\043\007\035" +
    "\010\036\011\042\012\037\013\040\017\045\047\044\001" +
    "\002\000\006\020\uffae\034\uffae\001\002\000\004\027\uffa9" +
    "\001\002\000\034\020\uffa4\026\uffa4\027\uffa4\034\uffa4\036" +
    "\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4" +
    "\067\uffa4\072\uffa4\001\002\000\026\004\041\005\034\006" +
    "\043\007\035\010\036\011\042\012\037\013\040\017\045" +
    "\047\044\001\002\000\026\004\041\005\034\006\043\007" +
    "\035\010\036\011\042\012\037\013\040\017\045\047\044" +
    "\001\002\000\026\004\041\005\034\006\043\007\035\010" +
    "\036\011\042\012\037\013\040\017\045\047\044\001\002" +
    "\000\026\004\041\005\034\006\043\007\035\010\036\011" +
    "\042\012\037\013\040\017\045\047\044\001\002\000\026" +
    "\004\041\005\034\006\043\007\035\010\036\011\042\012" +
    "\037\013\040\017\045\047\044\001\002\000\026\004\041" +
    "\005\034\006\043\007\035\010\036\011\042\012\037\013" +
    "\040\017\045\047\044\001\002\000\026\004\041\005\034" +
    "\006\043\007\035\010\036\011\042\012\037\013\040\017" +
    "\045\047\044\001\002\000\026\004\041\005\034\006\043" +
    "\007\035\010\036\011\042\012\037\013\040\017\045\047" +
    "\044\001\002\000\026\004\041\005\034\006\043\007\035" +
    "\010\036\011\042\012\037\013\040\017\045\047\044\001" +
    "\002\000\026\004\041\005\034\006\043\007\035\010\036" +
    "\011\042\012\037\013\040\017\045\047\044\001\002\000" +
    "\026\004\041\005\034\006\043\007\035\010\036\011\042" +
    "\012\037\013\040\017\045\047\044\001\002\000\026\004" +
    "\041\005\034\006\043\007\035\010\036\011\042\012\037" +
    "\013\040\017\045\047\044\001\002\000\026\004\041\005" +
    "\034\006\043\007\035\010\036\011\042\012\037\013\040" +
    "\017\045\047\044\001\002\000\066\012\064\013\065\014" +
    "\061\015\066\016\060\020\uff96\026\uff96\027\uff96\034\uff96" +
    "\036\uff96\037\062\040\070\041\067\042\056\043\057\044" +
    "\063\045\071\046\055\050\uff96\051\uff96\052\uff96\053\uff96" +
    "\054\uff96\055\uff96\067\uff96\072\uff96\001\002\000\034\020" +
    "\uff9d\026\uff9d\027\uff9d\034\uff9d\036\uff9d\050\uff9d\051\uff9d" +
    "\052\uff9d\053\uff9d\054\uff9d\055\uff9d\067\uff9d\072\uff9d\001" +
    "\002\000\066\012\064\013\065\014\061\015\066\016\060" +
    "\020\uff96\026\uff96\027\uff96\034\uff96\036\uff96\037\062\040" +
    "\070\041\067\042\056\043\057\044\063\045\071\046\055" +
    "\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\067" +
    "\uff96\072\uff96\001\002\000\034\020\uff98\026\uff98\027\uff98" +
    "\034\uff98\036\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054" +
    "\uff98\055\uff98\067\uff98\072\uff98\001\002\000\066\012\064" +
    "\013\065\014\061\015\066\016\060\020\uff96\026\uff96\027" +
    "\uff96\034\uff96\036\uff96\037\062\040\070\041\067\042\056" +
    "\043\057\044\063\045\071\046\055\050\uff96\051\uff96\052" +
    "\uff96\053\uff96\054\uff96\055\uff96\067\uff96\072\uff96\001\002" +
    "\000\034\020\uff9c\026\uff9c\027\uff9c\034\uff9c\036\uff9c\050" +
    "\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\067\uff9c" +
    "\072\uff9c\001\002\000\066\012\064\013\065\014\061\015" +
    "\066\016\060\020\uff96\026\uff96\027\uff96\034\uff96\036\uff96" +
    "\037\062\040\070\041\067\042\056\043\057\044\063\045" +
    "\071\046\055\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96" +
    "\055\uff96\067\uff96\072\uff96\001\002\000\034\020\uffa0\026" +
    "\uffa0\027\uffa0\034\uffa0\036\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\067\uffa0\072\uffa0\001\002\000" +
    "\066\012\064\013\065\014\061\015\066\016\060\020\uff96" +
    "\026\uff96\027\uff96\034\uff96\036\uff96\037\062\040\070\041" +
    "\067\042\056\043\057\044\063\045\071\046\055\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\067\uff96\072" +
    "\uff96\001\002\000\034\020\uffa2\026\uffa2\027\uffa2\034\uffa2" +
    "\036\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\067\uffa2\072\uffa2\001\002\000\066\012\064\013\065" +
    "\014\061\015\066\016\060\020\uff96\026\uff96\027\uff96\034" +
    "\uff96\036\uff96\037\062\040\070\041\067\042\056\043\057" +
    "\044\063\045\071\046\055\050\uff96\051\uff96\052\uff96\053" +
    "\uff96\054\uff96\055\uff96\067\uff96\072\uff96\001\002\000\034" +
    "\020\uffa3\026\uffa3\027\uffa3\034\uffa3\036\uffa3\050\uffa3\051" +
    "\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\067\uffa3\072\uffa3" +
    "\001\002\000\066\012\064\013\065\014\061\015\066\016" +
    "\060\020\uff96\026\uff96\027\uff96\034\uff96\036\uff96\037\062" +
    "\040\070\041\067\042\056\043\057\044\063\045\071\046" +
    "\055\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96" +
    "\067\uff96\072\uff96\001\002\000\034\020\uff99\026\uff99\027" +
    "\uff99\034\uff99\036\uff99\050\uff99\051\uff99\052\uff99\053\uff99" +
    "\054\uff99\055\uff99\067\uff99\072\uff99\001\002\000\066\012" +
    "\064\013\065\014\061\015\066\016\060\020\uff96\026\uff96" +
    "\027\uff96\034\uff96\036\uff96\037\062\040\070\041\067\042" +
    "\056\043\057\044\063\045\071\046\055\050\uff96\051\uff96" +
    "\052\uff96\053\uff96\054\uff96\055\uff96\067\uff96\072\uff96\001" +
    "\002\000\034\020\uff97\026\uff97\027\uff97\034\uff97\036\uff97" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\067" +
    "\uff97\072\uff97\001\002\000\066\012\064\013\065\014\061" +
    "\015\066\016\060\020\uff96\026\uff96\027\uff96\034\uff96\036" +
    "\uff96\037\062\040\070\041\067\042\056\043\057\044\063" +
    "\045\071\046\055\050\uff96\051\uff96\052\uff96\053\uff96\054" +
    "\uff96\055\uff96\067\uff96\072\uff96\001\002\000\034\020\uffa1" +
    "\026\uffa1\027\uffa1\034\uffa1\036\uffa1\050\uffa1\051\uffa1\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\067\uffa1\072\uffa1\001\002" +
    "\000\066\012\064\013\065\014\061\015\066\016\060\020" +
    "\uff96\026\uff96\027\uff96\034\uff96\036\uff96\037\062\040\070" +
    "\041\067\042\056\043\057\044\063\045\071\046\055\050" +
    "\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\067\uff96" +
    "\072\uff96\001\002\000\034\020\uff9f\026\uff9f\027\uff9f\034" +
    "\uff9f\036\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\067\uff9f\072\uff9f\001\002\000\066\012\064\013" +
    "\065\014\061\015\066\016\060\020\uff96\026\uff96\027\uff96" +
    "\034\uff96\036\uff96\037\062\040\070\041\067\042\056\043" +
    "\057\044\063\045\071\046\055\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\067\uff96\072\uff96\001\002\000" +
    "\034\020\uff9a\026\uff9a\027\uff9a\034\uff9a\036\uff9a\050\uff9a" +
    "\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055\uff9a\067\uff9a\072" +
    "\uff9a\001\002\000\066\012\064\013\065\014\061\015\066" +
    "\016\060\020\uff96\026\uff96\027\uff96\034\uff96\036\uff96\037" +
    "\062\040\070\041\067\042\056\043\057\044\063\045\071" +
    "\046\055\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055" +
    "\uff96\067\uff96\072\uff96\001\002\000\034\020\uff9b\026\uff9b" +
    "\027\uff9b\034\uff9b\036\uff9b\050\uff9b\051\uff9b\052\uff9b\053" +
    "\uff9b\054\uff9b\055\uff9b\067\uff9b\072\uff9b\001\002\000\066" +
    "\012\064\013\065\014\061\015\066\016\060\020\uff96\026" +
    "\uff96\027\uff96\034\uff96\036\uff96\037\062\040\070\041\067" +
    "\042\056\043\057\044\063\045\071\046\055\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\055\uff96\067\uff96\072\uff96" +
    "\001\002\000\034\020\uff9e\026\uff9e\027\uff9e\034\uff9e\036" +
    "\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e" +
    "\067\uff9e\072\uff9e\001\002\000\004\020\125\001\002\000" +
    "\066\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95\020\uff95" +
    "\026\uff95\027\uff95\034\uff95\036\uff95\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\050\uff95" +
    "\051\uff95\052\uff95\053\uff95\054\uff95\055\uff95\067\uff95\072" +
    "\uff95\001\002\000\066\012\uff86\013\uff86\014\uff86\015\uff86" +
    "\016\uff86\020\uff86\026\uff86\027\uff86\034\uff86\036\uff86\037" +
    "\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86" +
    "\046\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055" +
    "\uff86\067\uff86\072\uff86\001\002\000\066\012\uff87\013\uff87" +
    "\014\uff87\015\uff87\016\uff87\020\uff87\026\uff87\027\uff87\034" +
    "\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87" +
    "\044\uff87\045\uff87\046\uff87\050\uff87\051\uff87\052\uff87\053" +
    "\uff87\054\uff87\055\uff87\067\uff87\072\uff87\001\002\000\026" +
    "\004\041\005\034\006\043\007\035\010\036\011\042\012" +
    "\037\013\040\017\045\047\044\001\002\000\004\020\132" +
    "\001\002\000\066\012\uff85\013\uff85\014\uff85\015\uff85\016" +
    "\uff85\020\uff85\026\uff85\027\uff85\034\uff85\036\uff85\037\uff85" +
    "\040\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046" +
    "\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85" +
    "\067\uff85\072\uff85\001\002\000\066\012\uff8f\013\uff8f\014" +
    "\uff8f\015\uff8f\016\uff8f\020\uff8f\026\uff8f\027\uff8f\034\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\067\uff8f\072\uff8f\001\002\000\066\012" +
    "\uff93\013\uff93\014\uff93\015\uff93\016\uff93\020\uff93\026\uff93" +
    "\027\uff93\034\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93\051\uff93" +
    "\052\uff93\053\uff93\054\uff93\055\uff93\067\uff93\072\uff93\001" +
    "\002\000\066\012\uff8c\013\uff8c\014\uff8c\015\uff8c\016\uff8c" +
    "\020\uff8c\026\uff8c\027\uff8c\034\uff8c\036\uff8c\037\uff8c\040" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c" +
    "\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c\055\uff8c\067" +
    "\uff8c\072\uff8c\001\002\000\026\004\041\005\034\006\043" +
    "\007\035\010\036\011\042\012\037\013\040\017\045\047" +
    "\044\001\002\000\004\020\140\001\002\000\066\012\uff88" +
    "\013\uff88\014\uff88\015\uff88\016\uff88\020\uff88\026\uff88\027" +
    "\uff88\034\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\046\uff88\050\uff88\051\uff88\052" +
    "\uff88\053\uff88\054\uff88\055\uff88\067\uff88\072\uff88\001\002" +
    "\000\066\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90\020" +
    "\uff90\026\uff90\027\uff90\034\uff90\036\uff90\037\uff90\040\uff90" +
    "\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90\050" +
    "\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\067\uff90" +
    "\072\uff90\001\002\000\066\012\uff92\013\uff92\014\uff92\015" +
    "\uff92\016\uff92\020\uff92\026\uff92\027\uff92\034\uff92\036\uff92" +
    "\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\046\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92" +
    "\055\uff92\067\uff92\072\uff92\001\002\000\066\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\020\uff8d\026\uff8d\027\uff8d" +
    "\034\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043" +
    "\uff8d\044\uff8d\045\uff8d\046\uff8d\050\uff8d\051\uff8d\052\uff8d" +
    "\053\uff8d\054\uff8d\055\uff8d\067\uff8d\072\uff8d\001\002\000" +
    "\050\004\ufffb\033\ufffb\034\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\055\ufffb\056\ufffb\060\ufffb\063\ufffb\064" +
    "\ufffb\065\ufffb\066\ufffb\067\ufffb\072\ufffb\073\ufffb\074\ufffb" +
    "\001\002\000\004\027\uffc2\001\002\000\012\021\uffbd\027" +
    "\uffbd\031\200\036\177\001\002\000\006\021\151\027\uffc1" +
    "\001\002\000\004\027\uffbf\001\002\000\026\004\155\005" +
    "\034\006\043\007\035\010\036\011\042\012\037\013\040" +
    "\017\045\047\044\001\002\000\004\027\uffba\001\002\000" +
    "\004\027\uffbb\001\002\000\004\027\uffb9\001\002\000\054" +
    "\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\017\165\021" +
    "\151\022\162\023\157\024\166\025\160\027\uff8a\031\161" +
    "\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045" +
    "\uff8a\046\uff8a\001\002\000\004\027\uffbc\001\002\000\004" +
    "\027\uffb7\001\002\000\026\004\041\005\034\006\043\007" +
    "\035\010\036\011\042\012\037\013\040\017\045\047\044" +
    "\001\002\000\004\006\173\001\002\000\004\027\uffb8\001" +
    "\002\000\004\027\uffc0\001\002\000\004\027\uffb4\001\002" +
    "\000\004\006\170\001\002\000\026\004\041\005\034\006" +
    "\043\007\035\010\036\011\042\012\037\013\040\017\045" +
    "\047\044\001\002\000\004\027\uffb6\001\002\000\004\020" +
    "\171\001\002\000\014\021\151\022\162\023\157\024\166" +
    "\025\160\001\002\000\004\027\uffa8\001\002\000\004\032" +
    "\174\001\002\000\014\021\151\022\162\023\157\024\166" +
    "\025\160\001\002\000\004\027\uffad\001\002\000\004\027" +
    "\uffb5\001\002\000\004\004\214\001\002\000\004\032\201" +
    "\001\002\000\006\021\202\027\uffb2\001\002\000\006\033" +
    "\205\071\204\001\002\000\004\027\uffb3\001\002\000\004" +
    "\004\210\001\002\000\026\004\041\005\034\006\043\007" +
    "\035\010\036\011\042\012\037\013\040\017\045\047\044" +
    "\001\002\000\004\034\207\001\002\000\004\027\uffb0\001" +
    "\002\000\004\031\211\001\002\000\004\006\212\001\002" +
    "\000\004\032\213\001\002\000\004\027\uffb1\001\002\000" +
    "\010\021\uffbd\027\uffbd\036\177\001\002\000\006\021\uffbe" +
    "\027\uffbe\001\002\000\004\002\uffff\001\002\000\050\004" +
    "\ufffd\033\ufffd\034\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\055\ufffd\056\ufffd\060\ufffd\063\ufffd\064\ufffd\065" +
    "\ufffd\066\ufffd\067\ufffd\072\ufffd\073\ufffd\074\ufffd\001\002" +
    "\000\004\027\uffc3\001\002\000\004\004\214\001\002\000" +
    "\004\002\000\001\002\000\004\017\u013f\001\002\000\004" +
    "\017\u0136\001\002\000\004\004\226\001\002\000\004\017" +
    "\227\001\002\000\016\020\uffda\050\012\051\014\052\006" +
    "\053\010\054\013\001\002\000\006\020\uffd8\036\u0134\001" +
    "\002\000\004\020\235\001\002\000\004\004\234\001\002" +
    "\000\004\020\uffdb\001\002\000\006\020\uffd7\036\uffd7\001" +
    "\002\000\004\033\236\001\002\000\044\004\256\033\257" +
    "\034\ufff1\050\012\051\014\052\006\053\010\054\013\055" +
    "\023\056\254\060\244\064\261\065\240\066\270\072\016" +
    "\073\262\074\253\001\002\000\004\027\u0133\001\002\000" +
    "\004\033\u012b\001\002\000\004\027\u012a\001\002\000\004" +
    "\027\u0129\001\002\000\004\027\u0128\001\002\000\004\017" +
    "\u0116\001\002\000\046\004\uffea\033\uffea\034\uffea\050\uffea" +
    "\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea\060" +
    "\uffea\063\uffea\064\uffea\065\uffea\066\uffea\072\uffea\073\uffea" +
    "\074\uffea\001\002\000\004\027\u0115\001\002\000\046\004" +
    "\uffe9\033\uffe9\034\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\060\uffe9\063\uffe9\064\uffe9\065" +
    "\uffe9\066\uffe9\072\uffe9\073\uffe9\074\uffe9\001\002\000\046" +
    "\004\ufff0\033\ufff0\034\ufff0\050\ufff0\051\ufff0\052\ufff0\053" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\060\ufff0\063\ufff0\064\ufff0" +
    "\065\ufff0\066\ufff0\072\ufff0\073\ufff0\074\ufff0\001\002\000" +
    "\004\027\u0114\001\002\000\004\027\u0113\001\002\000\004" +
    "\017\u0110\001\002\000\004\017\375\001\002\000\046\004" +
    "\uffec\033\uffec\034\uffec\050\uffec\051\uffec\052\uffec\053\uffec" +
    "\054\uffec\055\uffec\056\uffec\060\uffec\063\uffec\064\uffec\065" +
    "\uffec\066\uffec\072\uffec\073\uffec\074\uffec\001\002\000\022" +
    "\017\357\021\355\022\162\023\157\024\166\025\160\031" +
    "\161\035\356\001\002\000\026\004\041\005\034\006\043" +
    "\007\035\010\036\011\042\012\037\013\040\017\045\047" +
    "\044\001\002\000\004\027\344\001\002\000\004\017\335" +
    "\001\002\000\004\017\330\001\002\000\046\004\uffeb\033" +
    "\uffeb\034\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb" +
    "\055\uffeb\056\uffeb\060\uffeb\063\uffeb\064\uffeb\065\uffeb\066" +
    "\uffeb\072\uffeb\073\uffeb\074\uffeb\001\002\000\046\004\uffee" +
    "\033\uffee\034\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\060\uffee\063\uffee\064\uffee\065\uffee" +
    "\066\uffee\072\uffee\073\uffee\074\uffee\001\002\000\004\027" +
    "\327\001\002\000\046\004\256\033\257\034\ufff1\050\012" +
    "\051\014\052\006\053\010\054\013\055\023\056\254\060" +
    "\244\063\ufff1\064\261\065\240\066\270\072\016\073\262" +
    "\074\253\001\002\000\046\004\uffed\033\uffed\034\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\060\uffed\063\uffed\064\uffed\065\uffed\066\uffed\072\uffed\073" +
    "\uffed\074\uffed\001\002\000\004\017\301\001\002\000\004" +
    "\034\275\001\002\000\004\027\274\001\002\000\046\004" +
    "\uffef\033\uffef\034\uffef\050\uffef\051\uffef\052\uffef\053\uffef" +
    "\054\uffef\055\uffef\056\uffef\060\uffef\063\uffef\064\uffef\065" +
    "\uffef\066\uffef\072\uffef\073\uffef\074\uffef\001\002\000\046" +
    "\004\ufff4\033\ufff4\034\ufff4\050\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\060\ufff4\063\ufff4\064\ufff4" +
    "\065\ufff4\066\ufff4\072\ufff4\073\ufff4\074\ufff4\001\002\000" +
    "\004\070\277\001\002\000\022\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\055\uffe4\067\uffe4\072\uffe4\001\002\000" +
    "\026\004\041\005\034\006\043\007\035\010\036\011\042" +
    "\012\037\013\040\017\045\047\044\001\002\000\022\050" +
    "\uffe3\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\067\uffe3" +
    "\072\uffe3\001\002\000\016\027\302\050\012\051\014\052" +
    "\006\053\010\054\013\001\002\000\030\004\041\005\034" +
    "\006\043\007\035\010\036\011\042\012\037\013\040\017" +
    "\045\027\uffcd\047\044\001\002\000\004\004\214\001\002" +
    "\000\004\027\306\001\002\000\004\021\151\001\002\000" +
    "\030\004\041\005\034\006\043\007\035\010\036\011\042" +
    "\012\037\013\040\017\045\027\uffcd\047\044\001\002\000" +
    "\004\027\311\001\002\000\006\020\uffce\027\uffce\001\002" +
    "\000\030\004\041\005\034\006\043\007\035\010\036\011" +
    "\042\012\037\013\040\017\045\020\uffcd\047\044\001\002" +
    "\000\004\020\313\001\002\000\004\033\314\001\002\000" +
    "\042\004\256\033\257\050\012\051\014\052\006\053\010" +
    "\054\013\055\023\056\254\060\244\064\261\065\240\066" +
    "\270\072\016\073\262\074\253\001\002\000\004\034\316" +
    "\001\002\000\046\004\uffd0\033\uffd0\034\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\060\uffd0" +
    "\063\uffd0\064\uffd0\065\uffd0\066\uffd0\072\uffd0\073\uffd0\074" +
    "\uffd0\001\002\000\004\027\320\001\002\000\030\004\041" +
    "\005\034\006\043\007\035\010\036\011\042\012\037\013" +
    "\040\017\045\020\uffcd\047\044\001\002\000\004\020\322" +
    "\001\002\000\004\033\323\001\002\000\042\004\256\033" +
    "\257\050\012\051\014\052\006\053\010\054\013\055\023" +
    "\056\254\060\244\064\261\065\240\066\270\072\016\073" +
    "\262\074\253\001\002\000\004\034\325\001\002\000\046" +
    "\004\uffcf\033\uffcf\034\uffcf\050\uffcf\051\uffcf\052\uffcf\053" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\060\uffcf\063\uffcf\064\uffcf" +
    "\065\uffcf\066\uffcf\072\uffcf\073\uffcf\074\uffcf\001\002\000" +
    "\006\034\ufff2\063\ufff2\001\002\000\046\004\ufff8\033\ufff8" +
    "\034\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\060\ufff8\063\ufff8\064\ufff8\065\ufff8\066\ufff8" +
    "\072\ufff8\073\ufff8\074\ufff8\001\002\000\014\050\012\051" +
    "\014\052\006\053\010\054\013\001\002\000\004\036\332" +
    "\001\002\000\004\004\333\001\002\000\004\020\334\001" +
    "\002\000\004\027\uffc9\001\002\000\026\004\041\005\034" +
    "\006\043\007\035\010\036\011\042\012\037\013\040\017" +
    "\045\047\044\001\002\000\004\020\337\001\002\000\004" +
    "\065\340\001\002\000\004\033\341\001\002\000\044\004" +
    "\256\033\257\034\ufff1\050\012\051\014\052\006\053\010" +
    "\054\013\055\023\056\254\060\244\064\261\065\240\066" +
    "\270\072\016\073\262\074\253\001\002\000\004\034\343" +
    "\001\002\000\046\004\uffd6\033\uffd6\034\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6" +
    "\063\uffd6\064\uffd6\065\uffd6\066\uffd6\072\uffd6\073\uffd6\074" +
    "\uffd6\001\002\000\046\004\ufff7\033\ufff7\034\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\060" +
    "\ufff7\063\ufff7\064\ufff7\065\ufff7\066\ufff7\072\ufff7\073\ufff7" +
    "\074\ufff7\001\002\000\004\034\346\001\002\000\004\030" +
    "\347\001\002\000\030\004\041\005\034\006\043\007\035" +
    "\010\036\011\042\012\037\013\040\017\045\033\257\047" +
    "\044\001\002\000\006\026\uffcb\027\uffcb\001\002\000\004" +
    "\026\353\001\002\000\006\026\uffca\027\uffca\001\002\000" +
    "\030\004\041\005\034\006\043\007\035\010\036\011\042" +
    "\012\037\013\040\017\045\033\257\047\044\001\002\000" +
    "\006\026\uffcc\027\uffcc\001\002\000\034\004\155\005\034" +
    "\006\043\007\035\010\036\011\042\012\037\013\040\017" +
    "\045\021\032\033\205\047\044\071\204\001\002\000\006" +
    "\076\364\077\363\001\002\000\020\006\170\020\uffda\050" +
    "\012\051\014\052\006\053\010\054\013\001\002\000\004" +
    "\020\361\001\002\000\004\027\362\001\002\000\046\004" +
    "\uffe2\033\uffe2\034\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\056\uffe2\060\uffe2\063\uffe2\064\uffe2\065" +
    "\uffe2\066\uffe2\072\uffe2\073\uffe2\074\uffe2\001\002\000\004" +
    "\017\370\001\002\000\004\017\365\001\002\000\026\004" +
    "\041\005\034\006\043\007\035\010\036\011\042\012\037" +
    "\013\040\017\045\047\044\001\002\000\004\020\367\001" +
    "\002\000\004\027\uffa7\001\002\000\026\004\041\005\034" +
    "\006\043\007\035\010\036\011\042\012\037\013\040\017" +
    "\045\047\044\001\002\000\004\020\372\001\002\000\004" +
    "\027\uffa6\001\002\000\004\027\uffac\001\002\000\004\027" +
    "\uffa5\001\002\000\026\004\041\005\034\006\043\007\035" +
    "\010\036\011\042\012\037\013\040\017\045\047\044\001" +
    "\002\000\004\020\377\001\002\000\004\033\u0100\001\002" +
    "\000\044\004\256\033\257\034\ufff1\050\012\051\014\052" +
    "\006\053\010\054\013\055\023\056\254\060\244\064\261" +
    "\065\240\066\270\072\016\073\262\074\253\001\002\000" +
    "\004\034\u0102\001\002\000\050\004\uffd2\033\uffd2\034\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\u0103\060\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\001\002\000\006\033\u0106\056" +
    "\u0105\001\002\000\046\004\uffd5\033\uffd5\034\uffd5\050\uffd5" +
    "\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\060" +
    "\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\072\uffd5\073\uffd5" +
    "\074\uffd5\001\002\000\004\017\u0109\001\002\000\044\004" +
    "\256\033\257\034\ufff1\050\012\051\014\052\006\053\010" +
    "\054\013\055\023\056\254\060\244\064\261\065\240\066" +
    "\270\072\016\073\262\074\253\001\002\000\004\034\u0108" +
    "\001\002\000\046\004\uffd3\033\uffd3\034\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\060\uffd3" +
    "\063\uffd3\064\uffd3\065\uffd3\066\uffd3\072\uffd3\073\uffd3\074" +
    "\uffd3\001\002\000\026\004\041\005\034\006\043\007\035" +
    "\010\036\011\042\012\037\013\040\017\045\047\044\001" +
    "\002\000\004\020\u010b\001\002\000\004\033\u010c\001\002" +
    "\000\044\004\256\033\257\034\ufff1\050\012\051\014\052" +
    "\006\053\010\054\013\055\023\056\254\060\244\064\261" +
    "\065\240\066\270\072\016\073\262\074\253\001\002\000" +
    "\004\034\u010e\001\002\000\050\004\uffd2\033\uffd2\034\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056" +
    "\uffd2\057\u0103\060\uffd2\063\uffd2\064\uffd2\065\uffd2\066\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\001\002\000\046\004\uffd4\033" +
    "\uffd4\034\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\060\uffd4\063\uffd4\064\uffd4\065\uffd4\066" +
    "\uffd4\072\uffd4\073\uffd4\074\uffd4\001\002\000\026\004\041" +
    "\005\034\006\043\007\035\010\036\011\042\012\037\013" +
    "\040\017\045\047\044\001\002\000\004\020\u0112\001\002" +
    "\000\004\027\uffc8\001\002\000\046\004\ufff6\033\ufff6\034" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\060\ufff6\063\ufff6\064\ufff6\065\ufff6\066\ufff6\072" +
    "\ufff6\073\ufff6\074\ufff6\001\002\000\046\004\uffe8\033\uffe8" +
    "\034\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\060\uffe8\063\uffe8\064\uffe8\065\uffe8\066\uffe8" +
    "\072\uffe8\073\uffe8\074\uffe8\001\002\000\046\004\uffe7\033" +
    "\uffe7\034\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7" +
    "\055\uffe7\056\uffe7\060\uffe7\063\uffe7\064\uffe7\065\uffe7\066" +
    "\uffe7\072\uffe7\073\uffe7\074\uffe7\001\002\000\026\004\041" +
    "\005\034\006\043\007\035\010\036\011\042\012\037\013" +
    "\040\017\045\047\044\001\002\000\004\020\u0118\001\002" +
    "\000\004\033\u0119\001\002\000\010\034\uffc4\061\u011a\062" +
    "\u011c\001\002\000\026\004\041\005\034\006\043\007\035" +
    "\010\036\011\042\012\037\013\040\017\045\047\044\001" +
    "\002\000\004\034\u0121\001\002\000\004\026\u011d\001\002" +
    "\000\044\004\256\033\257\050\012\051\014\052\006\053" +
    "\010\054\013\055\023\056\254\060\244\063\ufff1\064\261" +
    "\065\240\066\270\072\016\073\262\074\253\001\002\000" +
    "\004\063\u011f\001\002\000\004\027\u0120\001\002\000\004" +
    "\034\uffc5\001\002\000\046\004\uffc7\033\uffc7\034\uffc7\050" +
    "\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\060\uffc7\063\uffc7\064\uffc7\065\uffc7\066\uffc7\072\uffc7\073" +
    "\uffc7\074\uffc7\001\002\000\004\026\u0123\001\002\000\044" +
    "\004\256\033\257\050\012\051\014\052\006\053\010\054" +
    "\013\055\023\056\254\060\244\063\ufff1\064\261\065\240" +
    "\066\270\072\016\073\262\074\253\001\002\000\004\063" +
    "\u0125\001\002\000\004\027\u0126\001\002\000\010\034\uffc4" +
    "\061\u011a\062\u011c\001\002\000\004\034\uffc6\001\002\000" +
    "\046\004\ufff5\033\ufff5\034\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\056\ufff5\060\ufff5\063\ufff5\064" +
    "\ufff5\065\ufff5\066\ufff5\072\ufff5\073\ufff5\074\ufff5\001\002" +
    "\000\046\004\ufff9\033\ufff9\034\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\060\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\066\ufff9\072\ufff9\073\ufff9\074\ufff9\001" +
    "\002\000\046\004\uffe6\033\uffe6\034\uffe6\050\uffe6\051\uffe6" +
    "\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056\uffe6\060\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\072\uffe6\073\uffe6\074\uffe6" +
    "\001\002\000\044\004\256\033\257\034\ufff1\050\012\051" +
    "\014\052\006\053\010\054\013\055\023\056\254\060\244" +
    "\064\261\065\240\066\270\072\016\073\262\074\253\001" +
    "\002\000\004\034\u012d\001\002\000\004\064\u012e\001\002" +
    "\000\004\017\u012f\001\002\000\002\001\002\000\004\020" +
    "\u0131\001\002\000\004\027\u0132\001\002\000\046\004\uffd1" +
    "\033\uffd1\034\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\060\uffd1\063\uffd1\064\uffd1\065\uffd1" +
    "\066\uffd1\072\uffd1\073\uffd1\074\uffd1\001\002\000\046\004" +
    "\ufff3\033\ufff3\034\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\060\ufff3\063\ufff3\064\ufff3\065" +
    "\ufff3\066\ufff3\072\ufff3\073\ufff3\074\ufff3\001\002\000\014" +
    "\050\012\051\014\052\006\053\010\054\013\001\002\000" +
    "\004\020\uffd9\001\002\000\004\053\u0137\001\002\000\004" +
    "\004\u0138\001\002\000\004\031\u0139\001\002\000\004\032" +
    "\u013a\001\002\000\004\020\u013b\001\002\000\004\033\u013c" +
    "\001\002\000\044\004\256\033\257\034\ufff1\050\012\051" +
    "\014\052\006\053\010\054\013\055\023\056\254\060\244" +
    "\064\261\065\240\066\270\072\016\073\262\074\253\001" +
    "\002\000\004\034\u013e\001\002\000\004\002\uffe1\001\002" +
    "\000\016\020\uffda\050\012\051\014\052\006\053\010\054" +
    "\013\001\002\000\004\020\u0141\001\002\000\004\033\u0142" +
    "\001\002\000\044\004\256\033\257\034\ufff1\050\012\051" +
    "\014\052\006\053\010\054\013\055\023\056\254\060\244" +
    "\064\261\065\240\066\270\072\016\073\262\074\253\001" +
    "\002\000\004\034\u0144\001\002\000\022\050\uffe5\051\uffe5" +
    "\052\uffe5\053\uffe5\054\uffe5\055\uffe5\067\uffe5\072\uffe5\001" +
    "\002\000\004\002\001\001\002\000\050\004\ufffa\033\ufffa" +
    "\034\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055" +
    "\ufffa\056\ufffa\060\ufffa\063\ufffa\064\ufffa\065\ufffa\066\ufffa" +
    "\067\ufffa\072\ufffa\073\ufffa\074\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0144\000\024\002\004\003\014\004\017\005\006\006" +
    "\016\007\023\010\021\027\020\060\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\221\003\014\004\017\005\006\006\016\007\023\010\021" +
    "\027\020\060\003\001\001\000\006\010\217\027\220\001" +
    "\001\000\002\001\001\000\024\002\215\003\014\004\017" +
    "\005\006\006\016\007\023\010\021\027\020\060\003\001" +
    "\001\000\006\042\144\043\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\044\047\047" +
    "\045\051\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\123\047\045\001\001\000\004\050" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\044\047\047\045\051\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\121\001\001" +
    "\000\004\047\117\001\001\000\004\047\115\001\001\000" +
    "\004\047\113\001\001\000\004\047\111\001\001\000\004" +
    "\047\107\001\001\000\004\047\105\001\001\000\004\047" +
    "\103\001\001\000\004\047\101\001\001\000\004\047\077" +
    "\001\001\000\004\047\075\001\001\000\004\047\073\001" +
    "\001\000\004\047\071\001\001\000\004\050\072\001\001" +
    "\000\002\001\001\000\004\050\074\001\001\000\002\001" +
    "\001\000\004\050\076\001\001\000\002\001\001\000\004" +
    "\050\100\001\001\000\002\001\001\000\004\050\102\001" +
    "\001\000\002\001\001\000\004\050\104\001\001\000\002" +
    "\001\001\000\004\050\106\001\001\000\002\001\001\000" +
    "\004\050\110\001\001\000\002\001\001\000\004\050\112" +
    "\001\001\000\002\001\001\000\004\050\114\001\001\000" +
    "\002\001\001\000\004\050\116\001\001\000\002\001\001" +
    "\000\004\050\120\001\001\000\002\001\001\000\004\050" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\130\047\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\136\047\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\147\001\001\000\002\001\001\000\014\012" +
    "\151\015\153\020\152\044\155\047\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\040" +
    "\163\041\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\175\047\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\166\047\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\040\163\041\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\040\163\041" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\214\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\044\047\047\045\051\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\042\144\043\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\230\027\231\032\232\034" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\064\003\247\006\016\007\023\010\021\011\272" +
    "\012\241\013\264\014\257\015\251\016\242\017\271\020" +
    "\236\021\270\022\263\023\254\024\262\025\266\027\020" +
    "\031\244\033\265\052\246\054\250\056\245\057\240\060" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\040\163\041\162\001\001\000\006\044\344\047\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\064\003\247\006\016\007\023\010\021\011\272\012\241" +
    "\013\264\014\257\015\251\016\242\017\271\020\236\021" +
    "\325\022\263\023\254\024\262\025\266\027\020\031\244" +
    "\033\265\052\246\054\250\056\245\057\240\060\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\275\001\001\000\002\001\001\000\006\044\277" +
    "\047\045\001\001\000\002\001\001\000\004\027\302\001" +
    "\001\000\010\044\307\047\045\053\316\001\001\000\006" +
    "\042\303\043\304\001\001\000\002\001\001\000\004\040" +
    "\147\001\001\000\010\044\307\047\045\053\306\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\044\307\047" +
    "\045\053\311\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\247\006\016\007\023\010\021\011\272\012" +
    "\241\013\264\014\257\015\251\016\242\017\271\020\236" +
    "\022\263\023\254\024\262\025\266\027\020\031\244\033" +
    "\314\052\246\054\250\056\245\057\240\060\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\044\307\047\045\053\320\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\247\006\016\007\023\010" +
    "\021\011\272\012\241\013\264\014\257\015\251\016\242" +
    "\017\271\020\236\022\263\023\254\024\262\025\266\027" +
    "\020\031\244\033\323\052\246\054\250\056\245\057\240" +
    "\060\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\330\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\335\047\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\064\003" +
    "\247\006\016\007\023\010\021\011\272\012\241\013\264" +
    "\014\257\015\251\016\242\017\271\020\236\021\341\022" +
    "\263\023\254\024\262\025\266\027\020\031\244\033\265" +
    "\052\246\054\250\056\245\057\240\060\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\044\351\047\045\054" +
    "\347\055\350\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\044\351\047\045\054\347\055" +
    "\353\001\001\000\002\001\001\000\020\012\151\015\153" +
    "\020\152\044\155\045\372\046\373\047\045\001\001\000" +
    "\002\001\001\000\012\026\357\027\231\032\232\034\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\044\365" +
    "\047\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\370\047\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\044" +
    "\375\047\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\247\006\016\007\023\010\021\011\272\012" +
    "\241\013\264\014\257\015\251\016\242\017\271\020\236" +
    "\021\u0100\022\263\023\254\024\262\025\266\027\020\031" +
    "\244\033\265\052\246\054\250\056\245\057\240\060\003" +
    "\001\001\000\002\001\001\000\004\036\u0103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\003\247\006\016\007\023\010\021\011\272\012\241\013" +
    "\264\014\257\015\251\016\242\017\271\020\236\021\u0106" +
    "\022\263\023\254\024\262\025\266\027\020\031\244\033" +
    "\265\052\246\054\250\056\245\057\240\060\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\044\u0109\047" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\003\247\006\016\007\023\010\021\011\272\012\241\013" +
    "\264\014\257\015\251\016\242\017\271\020\236\021\u010c" +
    "\022\263\023\254\024\262\025\266\027\020\031\244\033" +
    "\265\052\246\054\250\056\245\057\240\060\003\001\001" +
    "\000\002\001\001\000\004\036\u010e\001\001\000\002\001" +
    "\001\000\006\044\u0110\047\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\044\u0116\047\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\037\u011a\001\001\000" +
    "\006\044\u0121\047\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\064\003\247\006\016\007\023\010\021\011" +
    "\272\012\241\013\264\014\257\015\251\016\242\017\271" +
    "\020\236\021\u011d\022\263\023\254\024\262\025\266\027" +
    "\020\031\244\033\265\052\246\054\250\056\245\057\240" +
    "\060\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\064" +
    "\003\247\006\016\007\023\010\021\011\272\012\241\013" +
    "\264\014\257\015\251\016\242\017\271\020\236\021\u0123" +
    "\022\263\023\254\024\262\025\266\027\020\031\244\033" +
    "\265\052\246\054\250\056\245\057\240\060\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\u0126\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\247\006\016\007\023\010" +
    "\021\011\272\012\241\013\264\014\257\015\251\016\242" +
    "\017\271\020\236\021\u012b\022\263\023\254\024\262\025" +
    "\266\027\020\031\244\033\265\052\246\054\250\056\245" +
    "\057\240\060\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\u012f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\027\231\032\u0134\034\227\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\064\003\247\006\016\007\023\010\021\011\272\012" +
    "\241\013\264\014\257\015\251\016\242\017\271\020\236" +
    "\021\u013c\022\263\023\254\024\262\025\266\027\020\031" +
    "\244\033\265\052\246\054\250\056\245\057\240\060\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\u013f\027\231\032\232\034\227\001\001\000\002\001\001" +
    "\000\002\001\001\000\064\003\247\006\016\007\023\010" +
    "\021\011\272\012\241\013\264\014\257\015\251\016\242" +
    "\017\271\020\236\021\u0142\022\263\023\254\024\262\025" +
    "\266\027\020\031\244\033\265\052\246\054\250\056\245" +
    "\057\240\060\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    /**********************************************************************
     *             Creació i Gestió de la Taula de Simbols                *
     **********************************************************************/


    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> DECL PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= PROCEDIMENT PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> PROCEDIMENT PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= MAIN 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL ::= DECL_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= DECL_TAULA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL_TAULA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= DECL_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= DECL_CONST PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODIF ::= MODIF_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> TUPLA PUNITCOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODIF ::= REM_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REM_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODIF ::= AFG_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> AFG_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIF ::= MODIF_TAULA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> MODIF_TAULA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIF ::= REDEF_TAULA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REDEF_TAULA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODIF ::= REDEF_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REDEF_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MODIF ::= MODIF_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> MODIF_TIPUS PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIES ::= SENT SENTENCIES 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> SENT SENTENCIES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIES ::= 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= DECL 
            {
              Object RESULT =null;
		System.out.println("SENT -> DECL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= MODIF 
            {
              Object RESULT =null;
		System.out.println("SENT -> MODIF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= MENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= FMENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= IF 
            {
              Object RESULT =null;
		System.out.println("SENT -> IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= SWITCH 
            {
              Object RESULT =null;
		System.out.println("SENT -> SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= CRIDA_PROC 
            {
              Object RESULT =null;
		System.out.println("SENT -> CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= FOR 
            {
              Object RESULT =null;
		System.out.println("SENT -> FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= OP_CONDICIONAL PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> OP_CONDICIONAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENT ::= ENTRADAS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> ENTRADAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENT ::= SORTIDAS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> SORTIDAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PROCEDIMENT ::= metode ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PROCEDIMENT ::= metode TIPUS ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT RETURN 
            {
              Object RESULT =null;
		System.out.println("PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RETURN ::= retorna E 
            {
              Object RESULT =null;
		System.out.println("RETURN -> retorna E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CRIDA_PROC ::= ID LPAREN ARGS RPAREN PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDA_PROC",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MAIN ::= metode main LPAREN cadena ID LCORCH RCORCH RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPUS ::= decimal 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> decimal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPUS ::= enter 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> enter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPUS ::= logic 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> logic");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPUS ::= cadena 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> cadena");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPUS ::= caracter 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> caracter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARGS ::= ARGS_1 
            {
              Object RESULT =null;
		System.out.println("ARGS -> ARGS_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGS ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARGS_1 ::= ARG COMA ARGS_1 
            {
              Object RESULT =null;
		System.out.println("ARGS_1 -> ARG COMA ARGS_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARGS_1 ::= ARG 
            {
              Object RESULT =null;
		System.out.println("ARGS_1 -> ARG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARG ::= TIPUS ID 
            {
              Object RESULT =null;
		System.out.println("ARG -> TIPUS ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MENTRE ::= mentres LPAREN E RPAREN fer LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MENTRE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF ::= si LPAREN E RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		System.out.println("IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_1 ::= sino si LPAREN E RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		System.out.println("IF_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_1 ::= sino LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("IF_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_1 ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FMENTRE ::= fer LCLAUDAT SENTENCIES RCLAUDAT mentres LPAREN L RPAREN PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FMENTRE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR ::= per LPAREN TIPUS A PUNTICOMA FOR_1 PUNTICOMA FOR_1 RPAREN LCLAUDAT SENT RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR ::= per LPAREN PUNTICOMA FOR_1 PUNTICOMA FOR_1 RPAREN LCLAUDAT SENT RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FOR_1 ::= E 
            {
              Object RESULT =null;
		System.out.println("FOR_1 -> E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_1",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FOR_1 ::= 
            {
              Object RESULT =null;
		System.out.println("FOR_1 -> NULL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_1",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_CONDICIONAL ::= LCLAUDAT E RCLAUDAT INTERROG OP_CONDICIONAL_1 DOSPUNTS OP_CONDICIONAL_1 
            {
              Object RESULT =null;
		System.out.println("OP_CONDICIONAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_CONDICIONAL",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP_CONDICIONAL_1 ::= OP_CONDICIONAL 
            {
              Object RESULT =null;
		System.out.println("OP_CONDICIONAL_1 -> OP_CONDICIONAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_CONDICIONAL_1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP_CONDICIONAL_1 ::= E 
            {
              Object RESULT =null;
		System.out.println("OP_CONDICIONAL_1 -> E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_CONDICIONAL_1",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ENTRADAS ::= entradaS LPAREN TIPUS COMA ID RPAREN 
            {
              Object RESULT =null;
		System.out.println("ENTRADAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADAS",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SORTIDAS ::= sortidaS LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("SORTIDAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SORTIDAS",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCH ::= seleccio LPAREN E RPAREN LCLAUDAT SWITCH_1 RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWITCH_1 ::= cas E DOSPUNTS SENTENCIES acaba PUNTICOMA SWITCH_1 
            {
              Object RESULT =null;
		System.out.println("SWITCH_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SWITCH_1 ::= pdefecte DOSPUNTS SENTENCIES acaba PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SWITCH_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SWITCH_1 ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECL_CONST ::= constant DECL_TIPUS 
            {
              Object RESULT =null;
		System.out.println("DECL_CONST -> constant DECL_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECL_TIPUS ::= TIPUS A 
            {
              Object RESULT =null;
		System.out.println("DECL_TIPUS -> TIPUS A ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECL_TIPUS ::= TIPUS A_1 
            {
              Object RESULT =null;
		System.out.println("DECL_TIPUS -> TIPUS A_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // MODIF_TIPUS ::= ID I_1 
            {
              Object RESULT =null;
		System.out.println("MODIF_TIPUS -> ID I_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // A ::= A_1 I 
            {
              Object RESULT =null;
		System.out.println("A");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // A_1 ::= ID COMA A_1 
            {
              Object RESULT =null;
		System.out.println("A_1 -> ID COMA A_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A_1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // A_1 ::= ID 
            {
              Object RESULT =null;
		System.out.println("A_1 -> ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A_1",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // I ::= ASSIGN E 
            {
              Object RESULT =null;
		System.out.println("I -> ASSIGN E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // I ::= ASSIGN MODIF_TIPUS 
            {
              Object RESULT =null;
		System.out.println("ASSIGN MODIF_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // I ::= ASSIGN MODIF_TUPLA 
            {
              Object RESULT =null;
		System.out.println("ASSIGN MODIF_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // I ::= ASSIGN MODIF_TAULA 
            {
              Object RESULT =null;
		System.out.println("ASSIGN MODIF_TAULA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // I_1 ::= AUTOSUM 
            {
              Object RESULT =null;
		System.out.println("I_1 -> AUTOSUM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // I_1 ::= AUTOSUB 
            {
              Object RESULT =null;
		System.out.println("I_1 -> AUTOSUB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // I_1 ::= SUMAHI E 
            {
              Object RESULT =null;
		System.out.println("I_1 -> SUMAHI E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // I_1 ::= RESTAHI E 
            {
              Object RESULT =null;
		System.out.println("I_1 -> RESTAHI E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // I_1 ::= I 
            {
              Object RESULT =null;
		System.out.println("I_1 -> I");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECL_TAULA ::= TIPUS ID LCORCH RCORCH ASSIGN NOVA_TAULA 
            {
              Object RESULT =null;
		System.out.println("DECL_TAULA 1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TAULA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECL_TAULA ::= TIPUS ID LCORCH RCORCH 
            {
              Object RESULT =null;
		System.out.println("DECL_TAULA 2");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TAULA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NOVA_TAULA ::= nou ID LCORCH venter RCORCH 
            {
              Object RESULT =null;
		System.out.println("NOVA_TAULA 1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TAULA",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NOVA_TAULA ::= LCLAUDAT VALORS RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("NOVA_TAULA 2");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TAULA",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALORS ::= E 
            {
              Object RESULT =null;
		System.out.println("VALORS -> E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALORS ::= E COMA VALORS 
            {
              Object RESULT =null;
		System.out.println("VALORS -> E  COMA VALORS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // MODIF_TAULA ::= ID LCORCH venter RCORCH I_1 
            {
              Object RESULT =null;
		System.out.println("MODIF_TAULA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TAULA",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // REDEF_TAULA ::= ID ASSIGN NOVA_TAULA 
            {
              Object RESULT =null;
		System.out.println("REDEF_TAULA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REDEF_TAULA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECL_TUPLA ::= tupla ID LPAREN RPAREN NOVA_TUPLA 
            {
              Object RESULT =null;
		System.out.println("DECL_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECL_TUPLA ::= tupla ID LPAREN RPAREN 
            {
              Object RESULT =null;
		System.out.println("DECL_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NOVA_TUPLA ::= ASSIGN LPAREN VALORS RPAREN 
            {
              Object RESULT =null;
		System.out.println("NOVA_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TUPLA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MODIF_TUPLA ::= ID LPAREN venter RPAREN I_1 
            {
              Object RESULT =null;
		System.out.println("MODIF_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TUPLA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // REM_TUPLA ::= ID PUNT borra LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("REM_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REM_TUPLA",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // AFG_TUPLA ::= ID PUNT afegeix LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("ARG_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AFG_TUPLA",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // REDEF_TUPLA ::= ID ASSIGN NOVA_TUPLA 
            {
              Object RESULT =null;
		System.out.println("REDEF_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REDEF_TUPLA",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // E ::= F OP 
            {
              Object RESULT =null;
		System.out.println("E -> F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP ::= ADD F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> ADD F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP ::= SUB F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> SUB F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP ::= MULT F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> MULT F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP ::= DIV F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> DIV F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // OP ::= MOD F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> MOD F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OP ::= AND F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> AND F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OP ::= OR F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> OR F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OP ::= MENORI F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> MENORI F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OP ::= MAJORI F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> MAJORI F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP ::= MENOR F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> MENOR F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP ::= MAJOR F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> MAJOR F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP ::= IGIG F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> IGIG F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP ::= DIF F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> DIF F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP ::= 
            {
              Object RESULT =null;
		System.out.println("OP -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // F ::= LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("F -> LPAREN E RPAREN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // F ::= venter 
            {
              Object RESULT =null;
		System.out.println("F -> venter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // F ::= SUB venter 
            {
              Object RESULT =null;
		System.out.println("F -> SUB venter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // F ::= ADD venter 
            {
              Object RESULT =null;
		System.out.println("F -> ADD venter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // F ::= vdecimal 
            {
              Object RESULT =null;
		System.out.println("F -> vdecimal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // F ::= ADD vdecimal 
            {
              Object RESULT =null;
		System.out.println("F -> ADD vdecimal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // F ::= SUB vdecimal 
            {
              Object RESULT =null;
		System.out.println("F -> SUB vdecimal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // F ::= vcaracter 
            {
              Object RESULT =null;
		System.out.println("F -> vcaracter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // F ::= ADD vcaracter 
            {
              Object RESULT =null;
		System.out.println("F -> ADD");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // F ::= SUB vcaracter 
            {
              Object RESULT =null;
		System.out.println("F -> SUB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // F ::= vcadena 
            {
              Object RESULT =null;
		System.out.println("F -> vcadena");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // F ::= ID 
            {
              Object RESULT =null;
		System.out.println("F -> ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // F ::= vlogic 
            {
              Object RESULT =null;
		System.out.println("F -> vlogic");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // F ::= SUB LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("F -> SUB LPAREN E RPAREN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // F ::= NOT vlogic 
            {
              Object RESULT =null;
		System.out.println("F -> NOT vlogic");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // F ::= NOT ID 
            {
              Object RESULT =null;
		System.out.println("F -> NOT ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // F ::= NOT LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("F -> NOT LPAREN E RPAREN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
