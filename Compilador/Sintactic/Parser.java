
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Compilador.Sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import Compilador.Lexic.Scanner.Token;
import Compilador.Intermedi.TaulaIntermedi;
import Compilador.Intermedi.TaulaIntermedi.Sentencia;
import Compilador.Intermedi.Operacio;
import Compilador.Intermedi.TaulaVariables;
import Compilador.Intermedi.TaulaProcediments;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintStream;
import java.util.HashMap;
import Compilador.TSimbols.Taula;
import Compilador.TSimbols.DT.*;
import Compilador.TSimbols.TD.*;
import Compilador.Sintactic.Simbols.*;
import Compilador.Sintactic.Simbols.SimbolValsTupla.KeyValue;
import java.util.Iterator;
import java.util.Stack;
import java.util.ArrayList;
import Compilador.TSimbols.Dada1;
import Compilador.TSimbols.Dada2;
import Compilador.Sintactic.Simbols.SimbolArgsp.KeyValor;
import java.util.Stack;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\200\000\002\002\004\000\002\065\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\003\000\002\061\002" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\062\002\000\002\007\004\000\002" +
    "\007\004\000\002\016\004\000\002\016\002\000\002\024" +
    "\004\000\002\024\004\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\004\000\002\024\003\000" +
    "\002\024\004\000\002\024\004\000\002\102\007\000\002" +
    "\103\010\000\002\004\006\000\002\004\007\000\002\076" +
    "\005\000\002\023\003\000\002\023\005\000\002\005\017" +
    "\000\002\063\002\000\002\064\002\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\075\003\000\002\075\002\000\002\074" +
    "\005\000\002\074\003\000\002\073\004\000\002\017\012" +
    "\000\002\020\012\000\002\027\013\000\002\027\006\000" +
    "\002\027\002\000\002\021\012\000\002\030\011\000\002" +
    "\030\002\000\002\101\007\000\002\035\015\000\002\035" +
    "\014\000\002\036\003\000\002\036\002\000\002\100\004" +
    "\000\002\100\002\000\002\077\005\000\002\077\003\000" +
    "\002\077\003\000\002\077\005\000\002\041\010\000\002" +
    "\042\006\000\002\043\007\000\002\043\007\000\002\070" +
    "\004\000\002\070\006\000\002\070\006\000\002\072\004" +
    "\000\002\072\005\000\002\055\003\000\002\055\006\000" +
    "\002\055\005\000\002\066\003\000\002\066\003\000\002" +
    "\066\004\000\002\066\004\000\002\066\004\000\002\057" +
    "\003\000\002\057\005\000\002\056\005\000\002\056\007" +
    "\000\002\056\003\000\002\056\005\000\002\060\012\000" +
    "\002\060\010\000\002\045\004\000\002\046\005\000\002" +
    "\046\005\000\002\046\002\000\002\047\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\004\000\002\050\004" +
    "\000\002\050\004\000\002\050\004\000\002\050\002\000" +
    "\002\051\004\000\002\052\005\000\002\052\005\000\002" +
    "\052\002\000\002\053\004\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\002\000\002\044\005" +
    "\000\002\044\003\000\002\044\004\000\002\044\004\000" +
    "\002\044\003\000\002\044\004\000\002\044\004\000\002" +
    "\044\003\000\002\044\004\000\002\044\004\000\002\044" +
    "\003\000\002\044\003\000\002\044\004\000\002\044\004" +
    "\000\002\044\003\000\002\044\006\000\002\044\004\000" +
    "\002\044\004\000\002\044\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\024\003\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\067\ufffc\072\ufffc\001\002\000\004" +
    "\002\u0111\001\002\000\024\003\022\050\012\051\025\052" +
    "\024\053\007\054\016\055\021\067\013\072\011\001\002" +
    "\000\004\002\000\001\002\000\006\004\uffdc\036\uffdc\001" +
    "\002\000\004\004\u010d\001\002\000\014\050\012\051\025" +
    "\052\024\053\007\054\016\001\002\000\006\004\uffdf\036" +
    "\uffdf\001\002\000\020\004\356\050\012\051\025\052\024" +
    "\053\007\054\016\075\355\001\002\000\024\003\022\050" +
    "\012\051\025\052\024\053\007\054\016\055\021\067\013" +
    "\072\011\001\002\000\006\027\ufff7\036\ufff7\001\002\000" +
    "\006\004\uffdb\036\uffdb\001\002\000\004\027\351\001\002" +
    "\000\004\002\ufffd\001\002\000\004\004\332\001\002\000" +
    "\004\027\331\001\002\000\006\027\ufff7\036\ufff7\001\002" +
    "\000\006\004\uffdd\036\uffdd\001\002\000\006\004\uffde\036" +
    "\uffde\001\002\000\004\033\321\001\002\000\006\027\ufff7" +
    "\036\ufff7\001\002\000\004\033\031\001\002\000\040\003" +
    "\022\004\042\034\ufff3\050\012\051\025\052\024\053\007" +
    "\054\016\055\021\056\053\064\055\066\054\072\011\073" +
    "\043\074\032\001\002\000\004\017\315\001\002\000\006" +
    "\027\ufff7\036\ufff7\001\002\000\020\021\231\022\232\023" +
    "\233\024\234\025\235\027\uffe4\035\125\001\002\000\004" +
    "\027\313\001\002\000\042\003\022\004\042\034\ufff3\050" +
    "\012\051\025\052\024\053\007\054\016\055\021\056\053" +
    "\064\055\066\054\070\ufff3\072\011\073\043\074\032\001" +
    "\002\000\004\027\311\001\002\000\042\003\uffee\004\uffee" +
    "\034\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055" +
    "\uffee\056\uffee\064\uffee\066\uffee\070\uffee\072\uffee\073\uffee" +
    "\074\uffee\001\002\000\042\003\ufff0\004\ufff0\034\ufff0\050" +
    "\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\064\ufff0\066\ufff0\070\ufff0\072\ufff0\073\ufff0\074\ufff0\001" +
    "\002\000\022\017\307\021\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\027\uffb9\035\uffb9\001\002\000\004\017\302\001" +
    "\002\000\004\027\301\001\002\000\004\027\300\001\002" +
    "\000\004\027\277\001\002\000\004\034\276\001\002\000" +
    "\006\027\ufff7\036\ufff7\001\002\000\042\003\uffec\004\uffec" +
    "\034\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055" +
    "\uffec\056\uffec\064\uffec\066\uffec\070\uffec\072\uffec\073\uffec" +
    "\074\uffec\001\002\000\042\003\uffef\004\uffef\034\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef" +
    "\064\uffef\066\uffef\070\uffef\072\uffef\073\uffef\074\uffef\001" +
    "\002\000\004\017\252\001\002\000\004\017\203\001\002" +
    "\000\004\017\056\001\002\000\026\004\070\005\057\006" +
    "\072\007\061\010\063\011\071\012\064\013\066\017\074" +
    "\047\073\001\002\000\044\012\uff90\013\uff90\014\uff90\015" +
    "\uff90\016\uff90\020\uff90\026\uff90\027\uff90\036\uff90\037\uff90" +
    "\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046" +
    "\uff90\001\002\000\016\020\uffa6\026\uffa6\027\uffa6\036\uffa6" +
    "\045\176\046\174\001\002\000\044\012\uff86\013\uff86\014" +
    "\uff86\015\uff86\016\uff86\020\uff86\026\uff86\027\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\001\002\000\046\012\uff89\013\uff89\014\uff89" +
    "\015\uff89\016\uff89\020\uff89\026\uff89\027\uff89\035\125\036" +
    "\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89" +
    "\045\uff89\046\uff89\001\002\000\044\012\uff8a\013\uff8a\014" +
    "\uff8a\015\uff8a\016\uff8a\020\uff8a\026\uff8a\027\uff8a\036\uff8a" +
    "\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045" +
    "\uff8a\046\uff8a\001\002\000\012\004\070\005\170\006\171" +
    "\011\173\001\002\000\032\020\uff9e\026\uff9e\027\uff9e\036" +
    "\uff9e\037\155\040\154\041\153\042\161\043\160\044\157" +
    "\045\uff9e\046\uff9e\001\002\000\014\004\070\005\144\006" +
    "\145\011\147\017\150\001\002\000\036\012\137\013\135" +
    "\020\uff9a\026\uff9a\027\uff9a\036\uff9a\037\uff9a\040\uff9a\041" +
    "\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\001\002" +
    "\000\062\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017" +
    "\127\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\035\uffb9\036\uffb9\037\uffb9\040\uffb9\041" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\001\002" +
    "\000\044\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\020" +
    "\uff8d\026\uff8d\027\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d" +
    "\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\001\002\000" +
    "\044\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93\020\uff93" +
    "\026\uff93\027\uff93\036\uff93\037\uff93\040\uff93\041\uff93\042" +
    "\uff93\043\uff93\044\uff93\045\uff93\046\uff93\001\002\000\010" +
    "\004\070\007\121\017\122\001\002\000\026\004\070\005" +
    "\057\006\072\007\061\010\063\011\071\012\064\013\066" +
    "\017\074\047\073\001\002\000\044\012\uff95\013\uff95\014" +
    "\105\015\106\016\104\020\uff95\026\uff95\027\uff95\036\uff95" +
    "\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045" +
    "\uff95\046\uff95\001\002\000\004\020\077\001\002\000\004" +
    "\065\100\001\002\000\004\033\101\001\002\000\040\003" +
    "\022\004\042\034\ufff3\050\012\051\025\052\024\053\007" +
    "\054\016\055\021\056\053\064\055\066\054\072\011\073" +
    "\043\074\032\001\002\000\004\034\103\001\002\000\042" +
    "\003\uffd5\004\uffd5\034\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\064\uffd5\066\uffd5\070\uffd5" +
    "\072\uffd5\073\uffd5\074\uffd5\001\002\000\026\004\070\005" +
    "\057\006\072\007\061\010\063\011\071\012\064\013\066" +
    "\017\074\047\073\001\002\000\026\004\070\005\057\006" +
    "\072\007\061\010\063\011\071\012\064\013\066\017\074" +
    "\047\073\001\002\000\026\004\070\005\057\006\072\007" +
    "\061\010\063\011\071\012\064\013\066\017\074\047\073" +
    "\001\002\000\036\012\uff99\013\uff99\020\uff99\026\uff99\027" +
    "\uff99\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99" +
    "\044\uff99\045\uff99\046\uff99\001\002\000\044\012\uff95\013" +
    "\uff95\014\105\015\106\016\104\020\uff95\026\uff95\027\uff95" +
    "\036\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\001\002\000\036\012\uff97\013\uff97" +
    "\020\uff97\026\uff97\027\uff97\036\uff97\037\uff97\040\uff97\041" +
    "\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\001\002" +
    "\000\044\012\uff95\013\uff95\014\105\015\106\016\104\020" +
    "\uff95\026\uff95\027\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\001\002\000" +
    "\036\012\uff98\013\uff98\020\uff98\026\uff98\027\uff98\036\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\001\002\000\044\012\uff95\013\uff95\014\105" +
    "\015\106\016\104\020\uff95\026\uff95\027\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\001\002\000\036\012\uff96\013\uff96\020\uff96\026" +
    "\uff96\027\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96" +
    "\043\uff96\044\uff96\045\uff96\046\uff96\001\002\000\004\020" +
    "\117\001\002\000\044\012\uff94\013\uff94\014\uff94\015\uff94" +
    "\016\uff94\020\uff94\026\uff94\027\uff94\036\uff94\037\uff94\040" +
    "\uff94\041\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\001\002\000\046\012\uff83\013\uff83\014\uff83\015\uff83\016" +
    "\uff83\020\uff83\026\uff83\027\uff83\035\125\036\uff83\037\uff83" +
    "\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046" +
    "\uff83\001\002\000\044\012\uff84\013\uff84\014\uff84\015\uff84" +
    "\016\uff84\020\uff84\026\uff84\027\uff84\036\uff84\037\uff84\040" +
    "\uff84\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84" +
    "\001\002\000\026\004\070\005\057\006\072\007\061\010" +
    "\063\011\071\012\064\013\066\017\074\047\073\001\002" +
    "\000\004\020\124\001\002\000\044\012\uff82\013\uff82\014" +
    "\uff82\015\uff82\016\uff82\020\uff82\026\uff82\027\uff82\036\uff82" +
    "\037\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045" +
    "\uff82\046\uff82\001\002\000\004\004\126\001\002\000\060" +
    "\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\020\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\046\uffb7\001\002\000\026\004\070" +
    "\005\057\006\072\007\061\010\063\011\071\012\064\013" +
    "\066\017\074\047\073\001\002\000\004\020\134\001\002" +
    "\000\006\020\uffb1\036\132\001\002\000\026\004\070\005" +
    "\057\006\072\007\061\010\063\011\071\012\064\013\066" +
    "\017\074\047\073\001\002\000\004\020\uffb0\001\002\000" +
    "\060\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\045\uffb8\046\uffb8\001\002\000\026\004" +
    "\070\005\057\006\072\007\061\010\063\011\071\012\064" +
    "\013\066\017\074\047\073\001\002\000\032\020\uff9d\026" +
    "\uff9d\027\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d" +
    "\043\uff9d\044\uff9d\045\uff9d\046\uff9d\001\002\000\026\004" +
    "\070\005\057\006\072\007\061\010\063\011\071\012\064" +
    "\013\066\017\074\047\073\001\002\000\036\012\137\013" +
    "\135\020\uff9a\026\uff9a\027\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\042\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\001" +
    "\002\000\032\020\uff9c\026\uff9c\027\uff9c\036\uff9c\037\uff9c" +
    "\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046" +
    "\uff9c\001\002\000\036\012\137\013\135\020\uff9a\026\uff9a" +
    "\027\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\001\002\000\032\020\uff9b" +
    "\026\uff9b\027\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\001\002\000\044" +
    "\012\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e\026" +
    "\uff8e\027\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\044\uff8e\045\uff8e\046\uff8e\001\002\000\044\012" +
    "\uff92\013\uff92\014\uff92\015\uff92\016\uff92\020\uff92\026\uff92" +
    "\027\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92\043" +
    "\uff92\044\uff92\045\uff92\046\uff92\001\002\000\046\012\uff88" +
    "\013\uff88\014\uff88\015\uff88\016\uff88\020\uff88\026\uff88\027" +
    "\uff88\035\125\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88" +
    "\043\uff88\044\uff88\045\uff88\046\uff88\001\002\000\044\012" +
    "\uff8b\013\uff8b\014\uff8b\015\uff8b\016\uff8b\020\uff8b\026\uff8b" +
    "\027\uff8b\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043" +
    "\uff8b\044\uff8b\045\uff8b\046\uff8b\001\002\000\026\004\070" +
    "\005\057\006\072\007\061\010\063\011\071\012\064\013" +
    "\066\017\074\047\073\001\002\000\004\020\152\001\002" +
    "\000\044\012\uff85\013\uff85\014\uff85\015\uff85\016\uff85\020" +
    "\uff85\026\uff85\027\uff85\036\uff85\037\uff85\040\uff85\041\uff85" +
    "\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\001\002\000" +
    "\026\004\070\005\057\006\072\007\061\010\063\011\071" +
    "\012\064\013\066\017\074\047\073\001\002\000\026\004" +
    "\070\005\057\006\072\007\061\010\063\011\071\012\064" +
    "\013\066\017\074\047\073\001\002\000\026\004\070\005" +
    "\057\006\072\007\061\010\063\011\071\012\064\013\066" +
    "\017\074\047\073\001\002\000\016\020\uffa5\026\uffa5\027" +
    "\uffa5\036\uffa5\045\uffa5\046\uffa5\001\002\000\026\004\070" +
    "\005\057\006\072\007\061\010\063\011\071\012\064\013" +
    "\066\017\074\047\073\001\002\000\026\004\070\005\057" +
    "\006\072\007\061\010\063\011\071\012\064\013\066\017" +
    "\074\047\073\001\002\000\026\004\070\005\057\006\072" +
    "\007\061\010\063\011\071\012\064\013\066\017\074\047" +
    "\073\001\002\000\016\020\uff9f\026\uff9f\027\uff9f\036\uff9f" +
    "\045\uff9f\046\uff9f\001\002\000\016\020\uffa2\026\uffa2\027" +
    "\uffa2\036\uffa2\045\uffa2\046\uffa2\001\002\000\016\020\uffa1" +
    "\026\uffa1\027\uffa1\036\uffa1\045\uffa1\046\uffa1\001\002\000" +
    "\016\020\uffa3\026\uffa3\027\uffa3\036\uffa3\045\uffa3\046\uffa3" +
    "\001\002\000\016\020\uffa4\026\uffa4\027\uffa4\036\uffa4\045" +
    "\uffa4\046\uffa4\001\002\000\016\020\uffa0\026\uffa0\027\uffa0" +
    "\036\uffa0\045\uffa0\046\uffa0\001\002\000\044\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f\026\uff8f\027\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044" +
    "\uff8f\045\uff8f\046\uff8f\001\002\000\044\012\uff91\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\020\uff91\026\uff91\027\uff91\036" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\001\002\000\046\012\uff87\013\uff87\014" +
    "\uff87\015\uff87\016\uff87\020\uff87\026\uff87\027\uff87\035\125" +
    "\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\001\002\000\044\012\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\020\uff8c\026\uff8c\027\uff8c\036" +
    "\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c" +
    "\045\uff8c\046\uff8c\001\002\000\026\004\070\005\057\006" +
    "\072\007\061\010\063\011\071\012\064\013\066\017\074" +
    "\047\073\001\002\000\012\020\uffa9\026\uffa9\027\uffa9\036" +
    "\uffa9\001\002\000\026\004\070\005\057\006\072\007\061" +
    "\010\063\011\071\012\064\013\066\017\074\047\073\001" +
    "\002\000\016\020\uffa6\026\uffa6\027\uffa6\036\uffa6\045\176" +
    "\046\174\001\002\000\012\020\uffa7\026\uffa7\027\uffa7\036" +
    "\uffa7\001\002\000\016\020\uffa6\026\uffa6\027\uffa6\036\uffa6" +
    "\045\176\046\174\001\002\000\012\020\uffa8\026\uffa8\027" +
    "\uffa8\036\uffa8\001\002\000\026\003\022\004\070\027\204" +
    "\050\012\051\025\052\024\053\007\054\016\055\021\072" +
    "\011\001\002\000\030\004\070\005\057\006\072\007\061" +
    "\010\063\011\071\012\064\013\066\017\074\027\uffc9\047" +
    "\073\001\002\000\016\021\231\022\232\023\233\024\234" +
    "\025\235\035\125\001\002\000\006\027\uffc4\036\226\001" +
    "\002\000\004\027\213\001\002\000\006\027\uffc5\036\211" +
    "\001\002\000\024\003\022\004\070\050\012\051\025\052" +
    "\024\053\007\054\016\055\021\072\011\001\002\000\004" +
    "\027\uffc6\001\002\000\030\004\070\005\057\006\072\007" +
    "\061\010\063\011\071\012\064\013\066\017\074\027\uffc9" +
    "\047\073\001\002\000\004\027\216\001\002\000\004\027" +
    "\uffca\001\002\000\006\004\070\020\uffc7\001\002\000\004" +
    "\020\222\001\002\000\004\020\ufff7\001\002\000\004\020" +
    "\uffc8\001\002\000\004\033\223\001\002\000\040\003\022" +
    "\004\042\034\ufff3\050\012\051\025\052\024\053\007\054" +
    "\016\055\021\056\053\064\055\066\054\072\011\073\043" +
    "\074\032\001\002\000\004\034\225\001\002\000\042\003" +
    "\uffcc\004\uffcc\034\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc" +
    "\054\uffcc\055\uffcc\056\uffcc\064\uffcc\066\uffcc\070\uffcc\072" +
    "\uffcc\073\uffcc\074\uffcc\001\002\000\024\003\022\004\070" +
    "\050\012\051\025\052\024\053\007\054\016\055\021\072" +
    "\011\001\002\000\004\027\uffc3\001\002\000\010\020\uffbb" +
    "\027\uffbb\036\uffbb\001\002\000\010\020\uffb6\027\uffb6\036" +
    "\uffb6\001\002\000\010\020\uffb5\027\uffb5\036\uffb5\001\002" +
    "\000\026\004\070\005\057\006\072\007\061\010\063\011" +
    "\071\012\064\013\066\017\074\047\073\001\002\000\026" +
    "\004\070\005\057\006\072\007\061\010\063\011\071\012" +
    "\064\013\066\017\074\047\073\001\002\000\026\004\070" +
    "\005\057\006\072\007\061\010\063\011\071\012\064\013" +
    "\066\017\074\047\073\001\002\000\056\012\uff89\013\uff89" +
    "\014\uff89\015\uff89\016\uff89\020\uff89\021\231\022\232\023" +
    "\233\024\234\025\235\027\uff89\035\125\036\uff89\037\uff89" +
    "\040\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046" +
    "\uff89\001\002\000\010\020\uffba\027\uffba\036\uffba\001\002" +
    "\000\010\020\uffb2\027\uffb2\036\uffb2\001\002\000\010\020" +
    "\uffb3\027\uffb3\036\uffb3\001\002\000\010\020\uffb4\027\uffb4" +
    "\036\uffb4\001\002\000\004\027\244\001\002\000\006\004" +
    "\070\020\uffc7\001\002\000\004\020\246\001\002\000\004" +
    "\033\247\001\002\000\040\003\022\004\042\034\ufff3\050" +
    "\012\051\025\052\024\053\007\054\016\055\021\056\053" +
    "\064\055\066\054\072\011\073\043\074\032\001\002\000" +
    "\004\034\251\001\002\000\042\003\uffcb\004\uffcb\034\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\064\uffcb\066\uffcb\070\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\001\002\000\026\004\070\005\057\006\072\007\061\010" +
    "\063\011\071\012\064\013\066\017\074\047\073\001\002" +
    "\000\004\020\254\001\002\000\004\033\255\001\002\000" +
    "\040\003\022\004\042\034\ufff3\050\012\051\025\052\024" +
    "\053\007\054\016\055\021\056\053\064\055\066\054\072" +
    "\011\073\043\074\032\001\002\000\004\034\257\001\002" +
    "\000\044\003\uffd1\004\uffd1\034\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\260\064\uffd1" +
    "\066\uffd1\070\uffd1\072\uffd1\073\uffd1\074\uffd1\001\002\000" +
    "\006\033\263\056\262\001\002\000\042\003\uffd4\004\uffd4" +
    "\034\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055" +
    "\uffd4\056\uffd4\064\uffd4\066\uffd4\070\uffd4\072\uffd4\073\uffd4" +
    "\074\uffd4\001\002\000\004\017\266\001\002\000\040\003" +
    "\022\004\042\034\ufff3\050\012\051\025\052\024\053\007" +
    "\054\016\055\021\056\053\064\055\066\054\072\011\073" +
    "\043\074\032\001\002\000\004\034\265\001\002\000\042" +
    "\003\uffd2\004\uffd2\034\uffd2\050\uffd2\051\uffd2\052\uffd2\053" +
    "\uffd2\054\uffd2\055\uffd2\056\uffd2\064\uffd2\066\uffd2\070\uffd2" +
    "\072\uffd2\073\uffd2\074\uffd2\001\002\000\026\004\070\005" +
    "\057\006\072\007\061\010\063\011\071\012\064\013\066" +
    "\017\074\047\073\001\002\000\004\020\270\001\002\000" +
    "\004\033\271\001\002\000\040\003\022\004\042\034\ufff3" +
    "\050\012\051\025\052\024\053\007\054\016\055\021\056" +
    "\053\064\055\066\054\072\011\073\043\074\032\001\002" +
    "\000\004\034\273\001\002\000\044\003\uffd1\004\uffd1\034" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\260\064\uffd1\066\uffd1\070\uffd1\072\uffd1\073" +
    "\uffd1\074\uffd1\001\002\000\042\003\uffd3\004\uffd3\034\uffd3" +
    "\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056" +
    "\uffd3\064\uffd3\066\uffd3\070\uffd3\072\uffd3\073\uffd3\074\uffd3" +
    "\001\002\000\006\027\ufff6\036\ufff6\001\002\000\024\003" +
    "\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7" +
    "\067\uffe7\072\uffe7\001\002\000\042\003\uffed\004\uffed\034" +
    "\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed" +
    "\056\uffed\064\uffed\066\uffed\070\uffed\072\uffed\073\uffed\074" +
    "\uffed\001\002\000\042\003\ufff2\004\ufff2\034\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056\ufff2\064" +
    "\ufff2\066\ufff2\070\ufff2\072\ufff2\073\ufff2\074\ufff2\001\002" +
    "\000\042\003\uffea\004\uffea\034\uffea\050\uffea\051\uffea\052" +
    "\uffea\053\uffea\054\uffea\055\uffea\056\uffea\064\uffea\066\uffea" +
    "\070\uffea\072\uffea\073\uffea\074\uffea\001\002\000\014\050" +
    "\012\051\025\052\024\053\007\054\016\001\002\000\004" +
    "\036\304\001\002\000\004\004\070\001\002\000\006\020" +
    "\306\035\125\001\002\000\004\027\uffc2\001\002\000\030" +
    "\004\070\005\057\006\072\007\061\010\063\011\071\012" +
    "\064\013\066\017\074\020\310\047\073\001\002\000\004" +
    "\027\uffe3\001\002\000\042\003\uffeb\004\uffeb\034\uffeb\050" +
    "\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb" +
    "\064\uffeb\066\uffeb\070\uffeb\072\uffeb\073\uffeb\074\uffeb\001" +
    "\002\000\006\034\ufff4\070\ufff4\001\002\000\042\003\ufff1" +
    "\004\ufff1\034\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054" +
    "\ufff1\055\ufff1\056\ufff1\064\ufff1\066\ufff1\070\ufff1\072\ufff1" +
    "\073\ufff1\074\ufff1\001\002\000\006\027\ufff5\036\ufff5\001" +
    "\002\000\026\004\070\005\057\006\072\007\061\010\063" +
    "\011\071\012\064\013\066\017\074\047\073\001\002\000" +
    "\004\020\317\001\002\000\004\027\uffc1\001\002\000\006" +
    "\027\ufffb\036\ufffb\001\002\000\040\003\022\004\042\050" +
    "\012\051\025\052\024\053\007\054\016\055\021\056\053" +
    "\064\055\066\054\070\ufff3\072\011\073\043\074\032\001" +
    "\002\000\004\070\324\001\002\000\004\034\327\001\002" +
    "\000\026\004\070\005\057\006\072\007\061\010\063\011" +
    "\071\012\064\013\066\017\074\047\073\001\002\000\004" +
    "\027\326\001\002\000\004\034\uffe5\001\002\000\024\003" +
    "\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6" +
    "\067\uffe6\072\uffe6\001\002\000\006\027\ufffa\036\ufffa\001" +
    "\002\000\006\027\ufff8\036\ufff8\001\002\000\004\017\333" +
    "\001\002\000\004\020\334\001\002\000\004\025\335\001" +
    "\002\000\006\004\070\017\337\001\002\000\010\027\uffaa" +
    "\035\125\036\uffaa\001\002\000\026\004\070\005\057\006" +
    "\072\007\061\010\063\011\071\012\064\013\066\017\074" +
    "\047\073\001\002\000\004\020\350\001\002\000\010\020" +
    "\uffad\026\343\036\342\001\002\000\026\004\070\005\057" +
    "\006\072\007\061\010\063\011\071\012\064\013\066\017" +
    "\074\047\073\001\002\000\004\004\344\001\002\000\006" +
    "\020\uffac\036\345\001\002\000\026\004\070\005\057\006" +
    "\072\007\061\010\063\011\071\012\064\013\066\017\074" +
    "\047\073\001\002\000\004\020\uffae\001\002\000\004\020" +
    "\uffaf\001\002\000\006\027\uffab\036\uffab\001\002\000\024" +
    "\003\022\050\012\051\025\052\024\053\007\054\016\055" +
    "\021\067\013\072\011\001\002\000\004\002\uffff\001\002" +
    "\000\006\027\ufff9\036\ufff9\001\002\000\004\002\ufffe\001" +
    "\002\000\004\017\375\001\002\000\004\017\372\001\002" +
    "\000\004\004\360\001\002\000\004\017\361\001\002\000" +
    "\016\020\uffd9\050\012\051\025\052\024\053\007\054\016" +
    "\001\002\000\006\020\uffd7\036\370\001\002\000\004\020" +
    "\367\001\002\000\004\004\366\001\002\000\004\020\uffda" +
    "\001\002\000\006\020\uffd6\036\uffd6\001\002\000\004\033" +
    "\uffe8\001\002\000\014\050\012\051\025\052\024\053\007" +
    "\054\016\001\002\000\004\020\uffd8\001\002\000\016\020" +
    "\uffd9\050\012\051\025\052\024\053\007\054\016\001\002" +
    "\000\004\020\374\001\002\000\004\033\uffe9\001\002\000" +
    "\004\053\376\001\002\000\004\004\377\001\002\000\004" +
    "\031\uffe1\001\002\000\004\031\u0101\001\002\000\004\032" +
    "\u0102\001\002\000\004\020\u0103\001\002\000\004\033\u0104" +
    "\001\002\000\040\003\022\004\042\034\ufff3\050\012\051" +
    "\025\052\024\053\007\054\016\055\021\056\053\064\055" +
    "\066\054\072\011\073\043\074\032\001\002\000\004\034" +
    "\u0106\001\002\000\004\002\uffe0\001\002\000\004\002\uffe2" +
    "\001\002\000\004\004\u0109\001\002\000\004\025\u010a\001" +
    "\002\000\026\004\070\005\057\006\072\007\061\010\063" +
    "\011\071\012\064\013\066\017\074\047\073\001\002\000" +
    "\006\027\uffbf\036\uffbf\001\002\000\006\027\uffc0\036\uffc0" +
    "\001\002\000\010\025\u010e\027\uffbe\036\uffbe\001\002\000" +
    "\026\004\070\005\057\006\072\007\061\010\063\011\071" +
    "\012\064\013\066\017\074\047\073\001\002\000\006\027" +
    "\uffbc\036\uffbc\001\002\000\006\027\uffbd\036\uffbd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010f\000\006\061\004\065\003\001\001\000\002\001" +
    "\001\000\026\002\005\003\016\004\013\005\017\043\014" +
    "\060\026\070\022\071\007\102\027\103\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\u0107\001\001\000\002\001\001\000\004\071\356\001" +
    "\001\000\026\002\353\003\016\004\013\005\017\043\014" +
    "\060\026\070\022\071\007\102\027\103\025\001\001\000" +
    "\004\062\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\062\327\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\062\317\001\001\000\002\001" +
    "\001\000\046\003\044\007\034\015\047\016\046\017\040" +
    "\020\037\022\051\023\045\024\035\035\050\041\036\042" +
    "\043\043\014\055\033\060\026\070\022\071\007\072\032" +
    "\001\001\000\002\001\001\000\004\062\313\001\001\000" +
    "\004\066\227\001\001\000\002\001\001\000\046\003\044" +
    "\007\034\015\047\016\311\017\040\020\037\022\051\023" +
    "\045\024\035\035\050\041\036\042\043\043\014\055\033" +
    "\060\026\070\022\071\007\072\032\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\274\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\044\074\045\075" +
    "\047\057\051\064\053\066\055\061\001\001\000\002\001" +
    "\001\000\004\046\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\171\001\001\000" +
    "\004\050\155\001\001\000\004\055\145\001\001\000\004" +
    "\052\135\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\117\001\001\000\016\044\074" +
    "\045\115\047\057\051\064\053\066\055\061\001\001\000" +
    "\004\054\106\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\044\007\034\015\047\016" +
    "\101\017\040\020\037\022\051\023\045\024\035\035\050" +
    "\041\036\042\043\043\014\055\033\060\026\070\022\071" +
    "\007\072\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\113\055\061\001\001\000\006\044\111\055" +
    "\061\001\001\000\006\044\107\055\061\001\001\000\002" +
    "\001\001\000\004\054\110\001\001\000\002\001\001\000" +
    "\004\054\112\001\001\000\002\001\001\000\004\054\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\044\074" +
    "\045\122\047\057\051\064\053\066\055\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\044\074\045\130\047\057\051\064\053" +
    "\066\055\061\057\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\044\074\045\130\047\057\051\064\053" +
    "\066\055\061\057\132\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\044\074\053\141\055\061\001\001\000" +
    "\002\001\001\000\010\044\074\053\137\055\061\001\001" +
    "\000\004\052\140\001\001\000\002\001\001\000\004\052" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\044" +
    "\074\045\150\047\057\051\064\053\066\055\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\044\074\051" +
    "\166\053\066\055\061\001\001\000\012\044\074\051\165" +
    "\053\066\055\061\001\001\000\012\044\074\051\164\053" +
    "\066\055\061\001\001\000\002\001\001\000\012\044\074" +
    "\051\163\053\066\055\061\001\001\000\012\044\074\051" +
    "\162\053\066\055\061\001\001\000\012\044\074\051\161" +
    "\053\066\055\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\044\074\047\200" +
    "\051\064\053\066\055\061\001\001\000\002\001\001\000" +
    "\014\044\074\047\176\051\064\053\066\055\061\001\001" +
    "\000\004\046\177\001\001\000\002\001\001\000\004\046" +
    "\201\001\001\000\002\001\001\000\026\003\207\007\205" +
    "\015\047\043\014\055\204\060\026\070\022\071\007\072" +
    "\032\077\206\001\001\000\020\036\242\044\074\045\214" +
    "\047\057\051\064\053\066\055\061\001\001\000\004\066" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\207\007\205\015\047\043\014\055" +
    "\204\060\026\070\022\071\007\072\032\077\211\001\001" +
    "\000\002\001\001\000\020\036\213\044\074\045\214\047" +
    "\057\051\064\053\066\055\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\055\204\072\217\100\216\001" +
    "\001\000\002\001\001\000\004\062\220\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\044\007\034\015" +
    "\047\016\223\017\040\020\037\022\051\023\045\024\035" +
    "\035\050\041\036\042\043\043\014\055\033\060\026\070" +
    "\022\071\007\072\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\207\007\205\015\047\043\014\055" +
    "\204\060\026\070\022\071\007\072\032\077\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\044\074\045\241\047\057\051\064" +
    "\053\066\055\061\001\001\000\016\044\074\045\240\047" +
    "\057\051\064\053\066\055\061\001\001\000\020\044\074" +
    "\045\237\047\057\051\064\053\066\055\235\072\236\001" +
    "\001\000\004\066\227\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\055\204\072\217\100\244\001\001\000\002" +
    "\001\001\000\002\001\001\000\046\003\044\007\034\015" +
    "\047\016\247\017\040\020\037\022\051\023\045\024\035" +
    "\035\050\041\036\042\043\043\014\055\033\060\026\070" +
    "\022\071\007\072\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\044\074\045\252\047\057\051\064\053" +
    "\066\055\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\046\003\044\007\034\015\047\016\255\017\040\020" +
    "\037\022\051\023\045\024\035\035\050\041\036\042\043" +
    "\043\014\055\033\060\026\070\022\071\007\072\032\001" +
    "\001\000\002\001\001\000\004\027\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\046\003" +
    "\044\007\034\015\047\016\263\017\040\020\037\022\051" +
    "\023\045\024\035\035\050\041\036\042\043\043\014\055" +
    "\033\060\026\070\022\071\007\072\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\044\074\045\266\047" +
    "\057\051\064\053\066\055\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\046\003\044\007\034\015\047\016" +
    "\271\017\040\020\037\022\051\023\045\024\035\035\050" +
    "\041\036\042\043\043\014\055\033\060\026\070\022\071" +
    "\007\072\032\001\001\000\002\001\001\000\004\027\273" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\302\001\001\000\002\001\001\000\004\055" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\044\074\045\130\047\057\051\064\053\066\055\061\057" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\044" +
    "\074\045\315\047\057\051\064\053\066\055\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\046\003\044\007\034\015\047\016\321\017\040\020\037" +
    "\022\051\023\045\024\035\035\050\041\036\042\043\043" +
    "\014\055\033\060\026\070\022\071\007\072\032\001\001" +
    "\000\004\076\322\001\001\000\002\001\001\000\016\044" +
    "\074\045\324\047\057\051\064\053\066\055\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\335\001\001\000" +
    "\002\001\001\000\020\044\074\045\340\047\057\051\064" +
    "\053\066\055\061\056\337\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\044\074\045\340\047\057\051\064" +
    "\053\066\055\061\056\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\044\074\045\340\047\057\051\064" +
    "\053\066\055\061\056\345\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\351\003\016" +
    "\004\013\005\017\043\014\060\026\070\022\071\007\102" +
    "\027\103\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\071\363\073\361" +
    "\074\364\075\362\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\071\363\073\361\074\370\001" +
    "\001\000\002\001\001\000\012\071\363\073\361\074\364" +
    "\075\372\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\377\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\046\003\044\007\034\015\047\016\u0104" +
    "\017\040\020\037\022\051\023\045\024\035\035\050\041" +
    "\036\042\043\043\014\055\033\060\026\070\022\071\007" +
    "\072\032\001\001\000\002\001\001\000\004\064\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\044\074\045\u010b\047\057\051\064\053\066\055" +
    "\235\072\u010a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\044\074\045\u010f\047\057\051" +
    "\064\053\066\055\235\072\u010e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    /**********************************************************************
     *             Creació i Gestió de la Taula de Simbols                *
     **********************************************************************/

    Taula taula_simbols = new Taula();

    /**********************************************************************
     *             Tot sobre el codi Intermedi                            *
     **********************************************************************/

    //Pila de subprograma actual

    Stack<String> pila_procediments = new Stack<>();
    Integer etiquetes = 0; //anirà incrementant
    TaulaIntermedi taula_intermedi = new TaulaIntermedi();
    TaulaVariables taula_variables = new TaulaVariables();
    TaulaProcediments taula_procediments = new TaulaProcediments();

    public Integer novavar(Boolean temporal){ //revisar lo des parametres
        if(temporal){
            new Dvar(); //incrementam n antes de afegir-ho
        }
        if(!pila_procediments.isEmpty()){
            String procediment = pila_procediments.peek();
            taula_variables.afegeix_variable(procediment,null);
        }else{
            taula_variables.afegeix_variable(null,null);
        }
        return taula_variables.n(); //darrer n
    }

    public void nouproc(){

    }

    public void mostra_intermedi() throws IOException {
      FileWriter sortidap;
      BufferedWriter sortida;

      sortidap = new FileWriter("Intermedi.txt");
      sortida = new BufferedWriter(sortidap);
    

    ArrayList<Sentencia> llista = taula_intermedi.get_Llista();
    Iterator<Sentencia> iterator = llista.iterator();
    while (iterator.hasNext()) {
      Sentencia s = iterator.next();
      try {
        sortida.write(
            "Operacio: " + s.getOperacio() + " Op1: " + s.getOp1() + " Op2: " + s.getOp2() + " Desti: " + s.getDesti());
            sortida.write("\n");
      } catch (IOException error) {
        System.out.println(error.toString());
      }
    }

    try {
      sortida.close();
    } catch (IOException error) {
      System.out.println(error.toString());
    }
  }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    private boolean errorSemantic = false;
    private boolean errorGlobal = false;

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
        errorGlobal = true;
    }

    public void report_error_semantic(String message,Location left, Location right){
        System.err.println("ERROR "+message+" desde: "+left.getLine()+"/"+left.getColumn()+" fins: "+right.getLine()+"/"+right.getColumn());
        errorGlobal = true;
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= M0 PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROG -> M0 PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROG",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= DECL PUNTICOMA PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> DECL PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= PROCEDIMENT PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> PROCEDIMENT PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= MAIN 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // M0 ::= 
            {
              Object RESULT =null;
		System.out.println("Inicialització");
        taula_simbols.posar("ent", new Dtipus(new Escalar("ts_enter", Integer.MIN_VALUE, Integer.MAX_VALUE)));
        taula_simbols.posar("decimal", new Dtipus(new Escalar("ts_decimal", (int)Double.MIN_VALUE, (int)Double.MAX_VALUE)));
        taula_simbols.posar("cad", new Dtipus(new DefinicioTipus("ts_cadena")));
        taula_simbols.posar("bool", new Dtipus(new Escalar("ts_boolea", -1, 0)));
        taula_simbols.posar("car", new Dtipus(new Escalar("ts_enter", 0, 255)));
        taula_simbols.posar("tupla", new Dtipus(new Tupla()));
        taula_simbols.posar("VER", new Dconst(-1,"boolea"));
        taula_simbols.posar("FALS", new Dconst(0,"boolea"));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M0",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= DECL_TUPLA M1 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= DECL_TIPUS M1 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= DECL_CONST M1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL ::= error PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // M1 ::= 
            {
              Object RESULT =null;
		System.out.println("Reiniciar Error Semantic");
        errorSemantic = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M1",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIF ::= REDEF_TUPLA M1 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REDEF_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIF ::= MODIF_TIPUS M1 
            {
              Object RESULT =null;
		System.out.println("MODIF -> MODIF_TIPUS PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIES ::= SENT SENTENCIES 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> SENT SENTENCIES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIES ::= 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= DECL PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> DECL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= MODIF PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> MODIF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= MENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= FMENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= IF 
            {
              Object RESULT =null;
		System.out.println("SENT -> IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= CRIDA_PROC PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= FOR 
            {
              Object RESULT =null;
		System.out.println("SENT -> FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= ENTRADAS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> ENTRADAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= SORTIDAS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> SORTIDAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROCEDIMENT_1 ::= metode ID LPAREN ARGS RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolArgs a = (SimbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("PROCEDIMENT_1");
                    String nom = (String) i.valor;
                    Stack<KeyValor> llista = a.getLlista();

                   taula_simbols.posar(nom, new Dproc());
                    
                    while(!llista.isEmpty()){
                            KeyValor k = llista.pop();
                            String id = k.key; //nom del paràmetre
                            String tipus = k.tipus; //valor o variable a afegir

                            taula_simbols.posarparam(nom,id,new Darg(tipus,id));
                            nom += "_"+tipus;
                    }

                    taula_simbols.entra_bloc();

            Dada2 dada = taula_simbols.primer_parametre(nom);
            while(dada!=null){
                String idparam = dada.idcamp();
                Darg d = (Darg) dada.td();

                Dargin arg = new Dargin((new Dvar()).nv(), d.td());
                taula_simbols.posar(idparam, arg);
                dada = dada.next();
            }

            pila_procediments.push(nom);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT_1",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PROCEDIMENT_2 ::= metode TIPUS ID LPAREN ARGS RPAREN 
            {
              SimbolProcediment2 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolArgs a = (SimbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("PROCEDIMENT_2");
                        String nom = (String) i.valor;
                        Stack<KeyValor> llista = a.getLlista();

                        taula_simbols.posar(nom, new Dproc(t.getTipus()));
    
                        while(!llista.isEmpty()){
                                KeyValor k = llista.pop();
                                String id = k.key; //nom del paràmetre
                                String tipus = k.tipus; //valor o variable a afegir

                                taula_simbols.posarparam(nom,id,new Darg(tipus,id));
                                nom += "_"+tipus;
                        }
                        taula_simbols.entra_bloc();

                        Dada2 dada = taula_simbols.primer_parametre(nom);
                        while(dada!=null){
                            String idparam = dada.idcamp();
                            Darg d = (Darg) dada.td();

                            Dargin arg = new Dargin((new Dvar()).nv(), d.td());
                            taula_simbols.posar(idparam, arg);
                            dada = dada.next();
                        }
                        
                        pila_procediments.push(nom);
                        RESULT = new SimbolProcediment2(t.getTipus());

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT_2",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PROCEDIMENT ::= PROCEDIMENT_1 LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("PROC");
                    taula_simbols.surtbloc();
                    pila_procediments.pop();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROCEDIMENT ::= PROCEDIMENT_2 LCLAUDAT SENTENCIES RETURN RCLAUDAT 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolProcediment2 t = (SimbolProcediment2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolReturn r = (SimbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("PROC");
                    Dtipus ti = (Dtipus) taula_simbols.consulta(t.getTipus());
                    if(ti.dt().tipus_subjacent()!=r.getExpresio().getTsb()){
                        report_error_semantic("El tipus de retorn es diferent del procediment", r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                    }

                    taula_simbols.surtbloc();
                    pila_procediments.pop();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURN ::= retorna E PUNTICOMA 
            {
              SimbolReturn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("RETURN -> retorna E");
        RESULT = new SimbolReturn(e,e.getEsquerre(),e.getDreta());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CRIDA_PROC ::= R 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("CRIDA_PROC");
            if(!errorSemantic){
                if(r.getMvp() =="procc"){

                }else{
                    report_error_semantic("No es pot posar una referència tota sola", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                }        
            }
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDA_PROC",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CRIDA_PROC ::= ID LPAREN RPAREN 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		System.out.println("CRIDA_PROC -> ID LPAREN RPAREN");
               Descripcio d = taula_simbols.consulta((String)i.valor);
               if(d!=null){
                    if(!(d instanceof Dproc)){
                        report_error_semantic("L'identificador "+(String)i.valor+" no es un procediment", i.esquerre,i.dreta);
                        errorSemantic = true;
                }
               }else{
                    report_error_semantic("L'identificador "+(String)i.valor+" li falten parametres o no existeix", i.esquerre,i.dreta);
                    errorSemantic = true;
               }
               
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDA_PROC",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MAIN ::= metode main LPAREN cadena ID M2 LCORCH RCORCH RPAREN LCLAUDAT SENTENCIES RCLAUDAT M3 
            {
              Object RESULT =null;
		System.out.println("MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // M2 ::= 
            {
              Object RESULT =null;
		System.out.println("M2");
    taula_simbols.entra_bloc();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M2",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // M3 ::= 
            {
              Object RESULT =null;
		System.out.println("M3");
    taula_simbols.surtbloc();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M3",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPUS ::= decimal 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> decimal");
                RESULT = new SimbolTipus("decimal");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPUS ::= enter 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> enter");
                RESULT = new SimbolTipus("ent");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TIPUS ::= logic 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> logic");
                RESULT = new SimbolTipus("bool");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPUS ::= cadena 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> cadena");
                RESULT = new SimbolTipus("cad");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPUS ::= caracter 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> caracter");
                RESULT = new SimbolTipus("car");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGS ::= ARGS_1 
            {
              SimbolArgs RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolArgsp a = (SimbolArgsp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("ARGS -> ARGS_1");
                RESULT = new SimbolArgs(a.getLlista());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARGS ::= 
            {
              SimbolArgs RESULT =null;
		System.out.println("@");
                RESULT = new SimbolArgs();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARGS_1 ::= ARG COMA ARGS_1 
            {
              SimbolArgsp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolArg a = (SimbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolArgsp b = (SimbolArgsp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("ARGS_1 -> ARG COMA ARGS_1");
                b.afegeix(a.getId(),a.getTipus());
                RESULT = b;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARGS_1 ::= ARG 
            {
              SimbolArgsp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolArg a = (SimbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("ARGS_1 -> ARG");
                SimbolArgsp p = new SimbolArgsp();
                p.afegeix(a.getId(),a.getTipus());
                RESULT = p;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARG ::= TIPUS ID 
            {
              SimbolArg RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("ARG -> TIPUS ID");
    RESULT = new SimbolArg((String)d.valor,t.getTipus());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MENTRE ::= mentres LPAREN E RPAREN fer LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		System.out.println("MENTRE");
            if(!errorSemantic){
                if(e.getTsb()!="ts_boolea"){
                    report_error_semantic("La expresió ha de ser de tipus booleà", e.getEsquerre(),e.getDreta());
                    errorSemantic = true;
                }
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MENTRE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF ::= si LPAREN E RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		System.out.println("IF");
                if(!errorSemantic){
                    if(e.getTsb()!="ts_boolea"){
                        report_error_semantic("La expresió ha de ser de tipus booleà", e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_1 ::= sino si LPAREN E RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		System.out.println("IF_1");
                if(!errorSemantic){
                    if(e.getTsb()!="ts_boolea"){
                        report_error_semantic("La expresió ha de ser de tipus booleà", e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                    }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_1 ::= sino LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("IF_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_1 ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SWITCH ::= seleccio LPAREN E RPAREN LCLAUDAT SWITCH_1 DEF RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SWITCH_1 ::= cas E DOSPUNTS SENTENCIES acaba PUNTICOMA SWITCH_1 
            {
              Object RESULT =null;
		System.out.println("SWITCH_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SWITCH_1 ::= 
            {
              Object RESULT =null;
		System.out.println("SWITCH_1 -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DEF ::= pdefecte DOSPUNTS SENTENCIES acaba PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DEF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEF",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FOR ::= per LPAREN INICI PUNTICOMA FOR_1 PUNTICOMA FOR_2 RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FOR ::= per LPAREN PUNTICOMA FOR_1 PUNTICOMA FOR_2 RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FOR_1 ::= E 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("FOR_1 -> E");
    if(!errorSemantic){
                    if(e.getTsb()!="ts_boolea"){
                        report_error_semantic("La expresió ha de ser de tipus booleà", e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                    }
                }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FOR_1 ::= 
            {
              Object RESULT =null;
		System.out.println("FOR_1 -> NULL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_1",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR_2 ::= MODIF_TIPUS M1 
            {
              Object RESULT =null;
		System.out.println("FOR_2 -> E");
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_2",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR_2 ::= 
            {
              Object RESULT =null;
		System.out.println("FOR_2 -> NULL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_2",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INICI ::= DECL COMA INICI 
            {
              Object RESULT =null;
		System.out.println("INICI -> DECL COMA INICI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICI",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INICI ::= DECL 
            {
              Object RESULT =null;
		System.out.println("INICI -> DECL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICI",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INICI ::= MODIF 
            {
              Object RESULT =null;
		System.out.println("INICI -> MODIF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICI",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INICI ::= MODIF COMA INICI 
            {
              Object RESULT =null;
		System.out.println("INICI -> MODIF COMA INICI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICI",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ENTRADAS ::= entradaS LPAREN TIPUS COMA R RPAREN 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("ENTRADAS");
            if(!errorSemantic){
                if(r.getTsb()!="ts_record"){
                    if(t.getTipus()!=r.getTipus()){
                        report_error_semantic("Els tipus no coincideixen", r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                    } 
                }else{
                    report_error_semantic("No es pot posar la entrada dins una tupla", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                }
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADAS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SORTIDAS ::= sortidaS LPAREN E RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("SORTIDAS");
        if(!errorSemantic){
            if((e.getTsb()=="ts_nul")&&(e.getTsb()=="ts_record")){
                report_error_semantic("Tipus erroni de sortida de teclat", e.getEsquerre(),e.getDreta());
                errorSemantic = true;
            } 
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SORTIDAS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECL_CONST ::= constant TIPUS ID ASSIGN E 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_CONST -> constant TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                    errorSemantic = true;
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Boolean bol = taula_simbols.posar((String)a.valor,new Dconst(ti));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }
                }
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECL_CONST ::= constant TIPUS ID ASSIGN MODIF_TIPUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_CONST -> constant TIPUS A ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat",a.esquerre,a.dreta);
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificador
                    Boolean bol = taula_simbols.posar((String)a.valor,new Dconst(ti));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }
                }
            }    
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECL_TIPUS ::= TIPUS ID 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_TIPUS -> TIPUS ID ");
            String tipus = t.getTipus(); //tipus que afegirem als identificadors
            Boolean bol = taula_simbols.posar((String) a.valor,new Dvar(tipus));
            if(!bol){
                report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                errorSemantic = true;
            }
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECL_TIPUS ::= TIPUS ID ASSIGN E 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_TIPUS -> TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Boolean bol = taula_simbols.posar((String) a.valor,new Dvar(ti));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }

                }
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECL_TIPUS ::= TIPUS ID ASSIGN MODIF_TIPUS 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_TIPUS -> TIPUS ID ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat",a.esquerre,a.dreta);
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificadors

                    Boolean bol = taula_simbols.posar((String) a.valor,new Dvar(ti));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }

                }
            }
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MODIF_TIPUS ::= R I_1 
            {
              SimbolModifTipus RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolI i = (SimbolI)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("MODIF_TIPUS -> R I_1");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{
                if(r.getMvp()=="const"){ //malament
                    report_error_semantic("No es pot modificar una constant", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else if(r.getMvp()=="procc"){
                    report_error_semantic("No es pot modificar un procediment", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else{
                    switch(i.getOperacio()){
                    case "as": //cas ++
                        if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_decimal")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("Tipus equivocat per a la operació ++", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta());
                        }
                        break;
                    case "ar":
                        if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_decimal")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("Tipus equivocat per a la operació --", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta());
                        }
                        break;
                    case "si":
                        if((i.getTsb()!="ts_enter")&&(i.getTsb()!="ts_caracter")&&(i.getTsb()!="ts_decimal")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: +=", i.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta());
                        }
                        break;
                    case "ri":
                        if((i.getTsb()!="ts_enter")&&(i.getTsb()!="ts_caracter")&&(i.getTsb()!="ts_decimal")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: -=", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_caracter")&&(r.getTsb()!="ts_decimal")){
                            report_error_semantic("La Referència te un tipus equivocat per l'operació: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                            }else{
                             RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta()); 
                            }
                        }
                        break;
                    case "ig":
                        if(!(i.getTsb().equals(r.getTsb()))){
                            report_error_semantic("El tipus de la referència i la expresió no coincideixen amb l'operacio: =", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta());
                        }
                        break;
                }
                }
                
            }

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MODIF_TIPUS ::= R ASSIGN MODIF_TIPUS 
            {
              SimbolModifTipus RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("MODIF_TIPUS -> R ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{

                if(!m.getTsb().equals(r.getTsb())){
                    report_error_semantic("El tipus de la referència i la modificacio no coincideixen amb l'operacio: =", r.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else{
                    RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),m.getDreta()); 
                }
            }
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // R ::= ID 
            {
              SimbolR RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("R -> ID ");
        Descripcio descripcio = taula_simbols.consulta((String)d.valor);
        if(descripcio == null){ //no es troba a la taula de simbols
            report_error_semantic("Undefined id \""+d.valor+"\"", d.esquerre,d.dreta);
            errorSemantic = true;
            RESULT  = new SimbolR();
        }else{ //ja es troba a la taula de simbols.
            if(descripcio instanceof Dvar){ //variable
                Dvar var = (Dvar) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR
                RESULT = new SimbolR((String)d.valor,tipus.dt().tipus_subjacent(),var.tipus(),"var",d.esquerre,d.dreta);
            }else if(descripcio instanceof Dconst){ //variable o tupla
                Dconst c = (Dconst) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(c.tipus()); //ALERTA EN NO TROBAR
                RESULT = new SimbolR((String)d.valor,tipus.dt().tipus_subjacent(),c.tipus(),"const",d.esquerre,d.dreta);
                //el tipus pot ser tupla També
                //això es per quan ens interessa ficar una tupla dins una tupla o un subprograma
                //id(a) on 'a' és una tupla.
            }else{ //si no es tracta ni d'una variable, ni d'una constant, error
                report_error_semantic("ID es un procediment \""+d.valor+"\"", d.esquerre,d.dreta);
                errorSemantic = true;
                RESULT  = new SimbolR();
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // R ::= ID LPAREN VALORS RPAREN 
            {
              SimbolR RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("R -> ID (VALORS)"); //subprograma
        //1: mirar si id es un subprograma, amb els valors
        //2: comprovar si el subprograma te un tipus subjacent
        //si en té l'afegim a R amb la resta de informació

        ArrayList<SimbolE> llista = v.getLlista(); //llista amb els paràmetres
        if(llista.isEmpty()){ //crida a un subprograma fora paràmetres
           Descripcio descripcio = taula_simbols.consulta((String)id.valor);
           if(descripcio == null){
            report_error_semantic("Undefined id \""+id.valor+"\"", id.esquerre,id.dreta);
            errorSemantic = true;
            RESULT  = new SimbolR();
            }else{
                if(descripcio instanceof Dproc){
                    Dproc proc = (Dproc) descripcio;
                    String tipus = proc.getTipus(); //miram si el procediment té algun tipus de retorn
                    if(tipus == "id_nula"){
                      RESULT = new SimbolR((String)id.valor,"ts_nul","id_nula","procc",id.esquerre,id.dreta);  
                    }else{
                        Descripcio t = taula_simbols.consulta(proc.getTipus());
                        if(t instanceof Dtipus){ //no fa falta crec
                            Dtipus t1 = (Dtipus) t;
                            RESULT = new SimbolR((String)id.valor,t1.dt().tipus_subjacent(),tipus,"procc",id.esquerre,id.dreta); 
                        }else{
                            report_error_semantic("El tipus del subprograma \""+id.valor+"\" es erroni", id.esquerre,id.dreta);
                            errorSemantic = true;
                            RESULT  = new SimbolR();
                        }
                    }
                    
                }else{
                    report_error_semantic("L'ID \""+id.valor+"\" no és un subprograma", id.esquerre,id.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }
            } 
        }else{
            Iterator <SimbolE> it = llista.iterator();
            String nom = (String)id.valor;
            while(it.hasNext()){
                SimbolE e = it.next();
                if(e.getTsb() == "ts_nul"){
                    report_error_semantic("El paràmetre no té el tipus adecuat per un subprograma", e.getEsquerre(),e.getDreta());
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }else{
                    switch(e.getTsb()){
                        case "ts_boolea":
                                nom += "_"+"bool";
                                break;
                        case "ts_cadena":
                                nom+= "_"+"cad";
                                break;
                        case "ts_decimal":
                                nom+= "_"+"decimal";
                                break;
                        case "ts_enter":
                                nom+= "_"+"ent";
                                break;
                        case "ts_caracter":
                                nom+= "_"+"car";
                                break;
                        case "ts_record":
                                nom+= "_"+"tupla";
                                break;
                    }
                }
            }
            Descripcio descripcio = taula_simbols.consulta(nom);
            if(descripcio == null){
                report_error_semantic("El subprograma amb aquests paràmetres no existeix", id.esquerre,r.dreta);
                errorSemantic = true;
                RESULT  = new SimbolR();
            }else{
                if(descripcio instanceof Dproc){
                    Dproc proc = (Dproc) descripcio;
                    if(proc.getTipus() == "id_nula"){
                        RESULT = new SimbolR(nom,"ts_nul","id_nula","procc",id.esquerre,r.dreta);
                    }else{
                      Dtipus tipus = (Dtipus) taula_simbols.consulta(proc.getTipus()); //alerta
                      RESULT = new SimbolR(nom,tipus.dt().tipus_subjacent(),proc.getTipus(),"procc",id.esquerre,r.dreta); 
                    }
                }else{ //per si acàs
                    report_error_semantic("Id no és un subprograma", id.esquerre,r.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // R ::= R PUNT ID 
            {
              SimbolR RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("R -> R PUNT ID "+(String)i.valor);
        if(errorSemantic){
            RESULT  = new SimbolR();
        }else{
            if((r.getMvp()=="const")&&(r.getTsb()=="ts_record")){
                Dcamp c = (Dcamp) taula_simbols.consultacamp(r.getIdb_dreta(),(String)i.valor);
                if(c!=null){
                    Dtipus tipus = (Dtipus) taula_simbols.consulta(c.tipus());
                    if(c.tipus()=="tupla"){
                        RESULT = new SimbolR(r.getIdb(),c.getIdb(),tipus.dt().tipus_subjacent(),c.tipus(),"const",r.getEsquerre(),i.dreta);
                    }else{
                        RESULT = new SimbolR(r.getIdb(),(String)i.valor,tipus.dt().tipus_subjacent(),c.tipus(),"var",r.getEsquerre(),i.dreta);
                    }
                }else{
                    report_error_semantic("Id no es un camp de la tupla: "+r.getIdb_dreta(), i.esquerre,i.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR(); 
                }
            }else{
            report_error_semantic("La referència "+r.getIdb_dreta()+" no és una tupla", r.getEsquerre(),r.getDreta());
                errorSemantic = true;
                RESULT  = new SimbolR(); 
            } 
        }
        

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // I_1 ::= AUTOSUM 
            {
              SimbolI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> AUTOSUM");
    RESULT = new SimbolI("as","id_nula","ts_nul",a.esquerre,a.dreta);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // I_1 ::= AUTOSUB 
            {
              SimbolI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> AUTOSUB");
    RESULT = new SimbolI("ar","id_nula","ts_nul",a.esquerre,a.dreta);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // I_1 ::= SUMAHI E 
            {
              SimbolI RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> SUMAHI E");
        if(errorSemantic){
        RESULT = new SimbolI();
        }else{
        RESULT = new SimbolI("si",e.getTipus(),e.getTsb(),s.esquerre,e.getDreta());   
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // I_1 ::= RESTAHI E 
            {
              SimbolI RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> RESTAHI E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ri",e.getTipus(),e.getTsb(),r.esquerre,e.getDreta());   
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // I_1 ::= ASSIGN E 
            {
              SimbolI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> ASSIGN E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ig",e.getTipus(),e.getTsb(),a.esquerre,e.getDreta());   
        }
    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VALORS ::= E 
            {
              SimbolValors RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALORS -> E");
        if(errorSemantic){ //error a E
            RESULT = new SimbolValors();
        }else{
            SimbolValors v = new SimbolValors();
            v.afegirE(e); //afegim e
            RESULT = v;
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VALORS ::= E COMA VALORS 
            {
              SimbolValors RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALORS -> E  COMA VALORS");
            if(errorSemantic){
                RESULT = new SimbolValors();
            }else{
                v.afegirE(e); //alreves, hauriem d'agafar la llista, i després ficarli
                RESULT = new SimbolValors(v.getLlista());
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VALS_TUPLA ::= E COMA VALS_TUPLA 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix("buit", e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VALS_TUPLA ::= E DOSPUNTS ID COMA VALS_TUPLA 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E DOSPUNTS ID COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix((String)d.valor, e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VALS_TUPLA ::= E 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix("buit", e);
                    RESULT = sim;
                }  
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VALS_TUPLA ::= E DOSPUNTS ID 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E DOSPUNTS ID");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix((String) d.valor, e);
                    RESULT = sim;
                }  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECL_TUPLA ::= tupla ID LPAREN RPAREN ASSIGN LPAREN VALS_TUPLA RPAREN 
            {
              SimbolDeclTupla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("DECL_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolDeclTupla();
                }else{
                    //Gestió
                    int n =0;
                    Stack<KeyValue> llista = v.getLlista();
                    Boolean bol = taula_simbols.posar((String)i.valor,new Dconst("tupla")); //mirar si posar es true o false
                    if(bol){
                        while(!llista.isEmpty()){
                            KeyValue k = llista.pop();
                            String nom = k.key; //nom del paràmetre
                            SimbolE simbol = k.value; //valor o variable a afegir
                            if(nom == "buit"){ //no té identificador
                                nom = "Item"+n; //nom que li posam als camps que no tenen id
                                n++;
                            }else{
                                n++; 
                            }
                            if(simbol.getTsb()=="ts_record"){
                                bol = taula_simbols.posarcamp((String)i.valor,nom,new Dcamp(simbol.getIdb(),simbol.getTipus(),n,simbol.getTsb()));
                            }else{
                                bol = taula_simbols.posarcamp((String)i.valor,nom,new Dcamp(simbol.getTipus(),n,simbol.getTsb()));
                            }
                            if(bol == false){
                                report_error_semantic("El camp amb nom \""+nom+"\" ja existeix", simbol.getEsquerre(),simbol.getDreta());
                                errorSemantic = true;
                                //break; //pensar be
                            }
                        }
                        //no retornam res encara
                    }else{
                        report_error_semantic("La tupla \""+(String)i.valor+"\" ja existeix", i.esquerre,r.dreta);
                        errorSemantic = true;
                    }
                }

                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECL_TUPLA ::= tupla ID LPAREN RPAREN ASSIGN R 
            {
              SimbolDeclTupla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("TUPLA -> R"); //revisar
                if(r.getTsb() != "ts_record"){
                    report_error_semantic("A la tupla \""+(String)i.valor+"\" no es pot assignar una referència que no sigui tupla", i.esquerre,r.getDreta());
                    errorSemantic = true;
                }else{
                    Boolean bol = taula_simbols.posar((String)i.valor,new Dconst("tupla")); //mirar si posar es true o false
                    if(bol){
                        String tu = r.getIdb_dreta(); //id de la nostra referència
                        Dada1 d = taula_simbols.consulta_tupla(tu);
                        Descripcio descripcio = d.td();

                        if(descripcio instanceof Dconst){
                            Dada2 first = d.first(); //volem obtenir els elements de R

                            while(first!=null){
                                Dcamp camp = (Dcamp) taula_simbols.consultacamp(tu,first.idcamp());
                                if(camp.getTsb() == "ts_record"){
                                    taula_simbols.posarcamp((String)i.valor,first.idcamp(),new Dcamp(camp.getIdb(),camp.tipus(),camp.getDespl(),camp.getTsb()));
                                }else{
                                    taula_simbols.posarcamp((String)i.valor,first.idcamp(),new Dcamp(camp.tipus(),camp.getDespl(),camp.getTsb()));
                                }
                                first = first.next();
                            }
                        }else{
                           report_error_semantic("La referència "+r.getIdb()+"no es una tupla", i.esquerre,r.getDreta());
                            errorSemantic = true; 
                        }
                    }else{
                        report_error_semantic("La tupla \""+(String)i.valor+"\" ja existeix", i.esquerre,r.getDreta());
                        errorSemantic = true;
                    }
                }
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E ::= T E_1 
            {
              SimbolE RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("E -> T E_1");
    if(errorSemantic){
        RESULT = new SimbolE();
    }else{
        if((e==null)||(e.getTsb()=="ts_nul")){
            RESULT = new SimbolE(t.getIdb(),t.getTsb(),t.getTipus(),t.getMode(),t.getEsquerre(),t.getDreta());
        }else{
           if(t.getTsb()!="ts_boolea"){
                report_error_semantic("L'operand ha de ser de tipus booleà", t.getEsquerre(),t.getDreta());
                errorSemantic = true;
                RESULT = new SimbolE();
            }else{
                e.setTs_heretat("ts_boolea"); //calcular
                RESULT = new SimbolE("ts_boolea","id_nula","moderesult",t.getEsquerre(),e.getDreta());
            } 
        }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E_1 ::= AND T E_1 
            {
              SimbolEp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("E_1 -> AND T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació AND", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",t.getDreta());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    e.setTs_heretat("ts_boolea");
                    //operació
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",e.getDreta());
                }  
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // E_1 ::= OR T E_1 
            {
              SimbolEp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("E_1 -> OR T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació OR", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",t.getDreta());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    e.setTs_heretat("ts_boolea");
                    //operació
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",e.getDreta());
                }  
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // E_1 ::= 
            {
              SimbolEp RESULT =null;
		System.out.println("E_1 -> @");
        RESULT = new SimbolEp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // T ::= N T_1 
            {
              SimbolT RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolTp t = (SimbolTp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T -> N T_1");
    if(errorSemantic){
        RESULT = new SimbolT();
    }else{
        if((t==null)||(t.getTsb() == "ts_nul")){ //venim de Tp -> @
            RESULT = new SimbolT(n.getIdb(),n.getTsb(),n.getTipus(),n.getMode(),n.getEsquerre(),n.getDreta());
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                report_error_semantic("El terminal no es adequat per una operació lògica", n.getEsquerre(),n.getDreta()); //arreglar
                errorSemantic = true;
                RESULT = new SimbolT();
            }else{
                t.setTs_heretat(n.getTsb()); //li afegim per si després hem de fer operacions
                RESULT = new SimbolT("ts_boolea","id_nula","moderesult",n.getEsquerre(),t.getDreta());
            }   
        }
    }

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // T_1 ::= IGIG N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> IGIG N T_1");
    if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de comparacio", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.IGIG,"moderesult",n.getDreta());
                    }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // T_1 ::= DIF N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> DIF N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de DIF", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.DIF,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // T_1 ::= MENOR N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MENOR N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MENOR", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MENORI,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // T_1 ::= MAJOR N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MAJOR N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MAJOR", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MAJOR,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // T_1 ::= MENORI N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MENORI N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MENORI", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MENORI,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // T_1 ::= MAJORI N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MAJORI N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb() == "ts_cadena")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MAJORI", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MAJORI,"moderesult",n.getDreta());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // T_1 ::= 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> @");
        RESULT = new SimbolTp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N ::= M N_1 
            {
              SimbolN RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("N -> M N_1");
        if(errorSemantic){
            RESULT = new SimbolN();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolN(m.getIdb(),m.getTsb(),m.getTipus(),m.getMode(),m.getEsquerre(),m.getDreta()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                   report_error_semantic("El terminal no té un tipus adequat", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolN(); 
                }else{
                    n.setTs_heretat(m.getTsb());
                    String tsb = n.obtenir_sintetitzat();
                    RESULT = new SimbolN(tsb,"id_nula","moderesult",m.getEsquerre(),n.getDreta());
                }
                
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_1 ::= ADD M N_1 
            {
              SimbolNp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("N_1 -> ADD M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.ADD,"moderesult",m.getDreta());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 
                        n.setTs_heretat(m.getTsb());
                        String resultat = n.obtenir_sintetitzat();

                        if(resultat == "ts_nul"){
                            report_error_semantic("No és pot fer una operació amb aquest tipus", m.getEsquerre(),m.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolNp();
                        }else{
                            RESULT = new SimbolNp(resultat,"id_nula",ParserSym.ADD,"moderesult",n.getDreta());
                        }

                    }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // N_1 ::= SUB M N_1 
            {
              SimbolNp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("N_1 -> SUB M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de resta", m.getDreta(),m.getEsquerre());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.ADD,"moderesult",m.getDreta());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de resta", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 
                        n.setTs_heretat(m.getTsb());
                        String resultat = n.obtenir_sintetitzat();

                        if(resultat == "ts_nul"){
                            report_error_semantic("No es pot fer una operació amb aquest tipus", m.getDreta(),m.getEsquerre());
                            errorSemantic = true;
                            RESULT = new SimbolNp();
                        }else{
                            RESULT = new SimbolNp(resultat,"id_nula",ParserSym.SUB,"moderesult",n.getDreta());
                        }

                    }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // N_1 ::= 
            {
              SimbolNp RESULT =null;
		System.out.println("N_1 -> @");
        RESULT = new SimbolNp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // M ::= F M_1 
            {
              SimbolM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M -> F M_1");
        if(errorSemantic){
            RESULT = new SimbolM();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolM(f.getIdb(),f.getTsb(),f.getTipus(),f.getMode(),f.getEsquerre(),f.getDreta()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de suma/resta/multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolM();
                }else{
                    //comprovar si f es decimal
                    m.setTs_heretat(f.getTsb());
                    String tsb = m.obtenir_sintetitzat();

                    if(tsb=="ts_nul"){
                        report_error_semantic("no es pot fer el mòdul d'un decimal ", f.getEsquerre(),f.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolM();
                    }else{
                       RESULT = new SimbolM(tsb,"id_nula","moderesult",f.getEsquerre(),m.getDreta()); 
                    }
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // M_1 ::= MULT F M_1 
            {
              SimbolMp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> MULT F M_1");
        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MULT,"moderesult",f.getDreta());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = cadena o decimal o caracter 
                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    if(resultat == "ts_nul"){
                        report_error_semantic("no es pot fer el mòdul d'un decimal ", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.MULT,"moderesult",m.getDreta());
                    }

                }
            }
        }

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // M_1 ::= DIV F M_1 
            {
              SimbolMp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> DIV F M_1");

        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de divisió", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.DIV,"moderesult",f.getDreta());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = cadena o decimal o caracter 
                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    if(resultat == "ts_nul"){
                        report_error_semantic("no es pot fer el mòdul amb un nombre decimal", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.DIV,"moderesult",m.getDreta());
                    }

                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // M_1 ::= MOD F M_1 
            {
              SimbolMp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> MOD F M_1");

        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_decimal")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MOD,"moderesult",f.getDreta());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_decimal")){
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = enter o caracter

                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    //pensant que resultat tendrà un ts correcte

                    if(resultat == "ts_decimal"){
                        report_error_semantic("No es pot fer el mòdul d'un valor decimal", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                      RESULT = new SimbolMp(resultat,"id_nula",ParserSym.MOD,"moderesult",m.getDreta());  
                    }
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // M_1 ::= 
            {
              SimbolMp RESULT =null;
		System.out.println("M_1 -> @");
        RESULT = new SimbolMp();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // F ::= LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> LPAREN E RPAREN"); //pendent intermedi
                if(errorSemantic){
                    RESULT = new SimbolF();
                }else{
                    if(e.getTsb() == "ts_nul"){ //ho trob error
                        report_error("(E) té tsb null", e);
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",l.esquerre,l.dreta); //no tenc clar es mode
                    }   
                } 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // F ::= venter 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> venter");
                Integer n = novavar(true);
                RESULT = new SimbolF("ts_enter","ent","modeconst",v.esquerre,v.dreta,n,null);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // F ::= SUB venter 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB venter");
                Integer n = novavar(true);
                taula_intermedi.genera(Operacio.copia,(Integer)v.valor*-1,null,n);
                RESULT = new SimbolF("ts_enter","ent","modeconst",s.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // F ::= ADD venter 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD venter");
                RESULT = new SimbolF("ts_enter","ent","modeconst",a.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // F ::= vdecimal 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vdecimal");
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",v.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // F ::= ADD vdecimal 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD vdecimal");
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",a.esquerre,a.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // F ::= SUB vdecimal 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB vdecimal");
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",s.esquerre,s.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // F ::= vcaracter 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vcaracter");
                RESULT = new SimbolF("ts_caracter","car","modeconst",v.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // F ::= ADD vcaracter 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD");
                RESULT = new SimbolF("ts_caracter","car","modeconst",a.esquerre,v.dreta); //assegurar que a car hi posam ts_caracter
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // F ::= SUB vcaracter 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB");
                RESULT = new SimbolF("ts_caracter","car","modeconst",s.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // F ::= vcadena 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vcadena");
                RESULT = new SimbolF("ts_cadena","cad","modeconst",v.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // F ::= R 
            {
              SimbolF RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ID");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta());
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){
                            RESULT = new SimbolF(r.getIdb(),r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // F ::= SUB R 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",s.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta());
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // F ::= ADD R 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",a.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta());
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // F ::= vlogic 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vlogic");
                RESULT = new SimbolF("ts_boolea","bool","modeconst",v.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // F ::= SUB LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB LPAREN E RPAREN"); //REVISAR

                if(errorSemantic){ //si s'ha comés un error Semantic a E
                   RESULT  = new SimbolF(); 
                }else{
                    if(e.getTsb() == "ts_nul"){
                        report_error_semantic("No es pot restar l'expresió entre parèntesis", e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else if((e.getTsb() != "ts_enter")&&(e.getTsb() != "ts_decimal")&&(e.getTsb() != "ts_caracter")){
                        report_error_semantic("No es pot restar l'expresió entre parèntesis",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",s.esquerre,r.dreta);
                    } 
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // F ::= NOT vlogic 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT vlogic");
                RESULT = new SimbolF("ts_boolea","bool","modeconst",n.esquerre,v.dreta);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // F ::= NOT R 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT ID");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            if(r.getTsb() != "ts_boolea"){
                                report_error_semantic("La referència "+r.getIdb()+" no té tsb booleà", n.esquerre,r.getDreta());
                                errorSemantic = true;
                                RESULT  = new SimbolF();
                            }else{
                              RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta());  
                            }
                            
                        }else if(r.getMvp() == "const"){
                            if(r.getTsb() != "ts_boolea"){
                                report_error_semantic("La referència "+r.getIdb()+" no té tsb booleà", n.esquerre,r.getDreta());
                                errorSemantic = true;
                             RESULT  = new SimbolF();
                            }else{
                              RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());  
                            }
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // F ::= NOT LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT LPAREN E RPAREN"); //posar error semantic
                if(errorSemantic){ //si a E s'ha comés un error semántic
                    RESULT  = new SimbolF();
                }else{
                    if(e.getTsb() != "ts_boolea"){
                        report_error_semantic("L'expresió no és booleana ",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",n.esquerre,r.dreta);
                    }   
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
