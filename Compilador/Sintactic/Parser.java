
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Compilador.Sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\021\004\000\002\021" +
    "\002\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\004\012\000\002\004\014\000\002" +
    "\030\004\000\002\032\007\000\002\005\015\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\026\003\000\002\026\002\000" +
    "\002\033\005\000\002\033\003\000\002\035\004\000\002" +
    "\022\012\000\002\023\012\000\002\037\013\000\002\037" +
    "\006\000\002\037\002\000\002\025\013\000\002\024\011" +
    "\000\002\040\011\000\002\040\007\000\002\040\002\000" +
    "\002\010\004\000\002\010\004\000\002\020\004\000\002" +
    "\043\004\000\002\044\005\000\002\044\003\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\042\003\000\002\042\003\000\002\042\004\000" +
    "\002\042\004\000\002\042\003\000\002\007\010\000\002" +
    "\007\006\000\002\046\007\000\002\046\005\000\002\056" +
    "\003\000\002\056\005\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\005\000\002\015\007\000" +
    "\002\016\005\000\002\006\007\000\002\006\006\000\002" +
    "\047\006\000\002\012\007\000\002\013\010\000\002\014" +
    "\010\000\002\017\005\000\002\045\004\000\002\051\005" +
    "\000\002\051\005\000\002\051\005\000\002\051\005\000" +
    "\002\051\005\000\002\051\002\000\002\050\005\000\002" +
    "\050\003\000\002\050\004\000\002\050\004\000\002\050" +
    "\003\000\002\050\004\000\002\050\004\000\002\050\003" +
    "\000\002\050\004\000\002\050\004\000\002\050\003\000" +
    "\002\050\003\000\002\050\003\000\002\050\006\000\002" +
    "\036\004\000\002\060\005\000\002\060\004\000\002\057" +
    "\005\000\002\057\003\000\002\057\003\000\002\053\003" +
    "\000\002\053\003\000\002\052\006\000\002\052\005\000" +
    "\002\052\003\000\002\054\005\000\002\054\006\000\002" +
    "\054\006\000\002\054\007\000\002\055\003\000\002\055" +
    "\003\000\002\055\003\000\002\055\003\000\002\055\003" +
    "\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\020\050\011\051\013\052\005\053\007\054" +
    "\012\055\021\067\010\001\002\000\004\002\u011f\001\002" +
    "\000\004\004\uffe3\001\002\000\004\002\ufffe\001\002\000" +
    "\004\004\uffe2\001\002\000\020\004\235\050\011\051\013" +
    "\052\005\053\007\054\012\075\236\001\002\000\004\004" +
    "\uffe5\001\002\000\004\004\uffe1\001\002\000\004\004\uffe4" +
    "\001\002\000\020\050\011\051\013\052\005\053\007\054" +
    "\012\055\021\067\010\001\002\000\004\027\233\001\002" +
    "\000\020\050\011\051\013\052\005\053\007\054\012\055" +
    "\021\067\010\001\002\000\004\004\162\001\002\000\004" +
    "\027\160\001\002\000\004\004\024\001\002\000\004\027" +
    "\023\001\002\000\040\004\ufffc\020\ufffc\034\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\060" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\067\ufffc\001\002\000\004" +
    "\017\025\001\002\000\004\020\026\001\002\000\006\021" +
    "\030\027\uffb5\001\002\000\004\027\uffb6\001\002\000\004" +
    "\017\031\001\002\000\026\004\041\005\033\006\036\007" +
    "\035\010\053\011\046\012\047\013\042\017\040\047\034" +
    "\001\002\000\006\045\153\046\151\001\002\000\064\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\020\uffa4\026\uffa4" +
    "\027\uffa4\034\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042" +
    "\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4" +
    "\052\uffa4\053\uffa4\054\uffa4\055\uffa4\067\uffa4\001\002\000" +
    "\024\004\041\005\033\006\036\007\035\010\053\011\046" +
    "\012\047\013\042\017\135\001\002\000\064\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\020\uff9c\026\uff9c\027\uff9c" +
    "\034\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c" +
    "\053\uff9c\054\uff9c\055\uff9c\067\uff9c\001\002\000\064\012" +
    "\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\020\uffa7\026\uffa7" +
    "\027\uffa7\034\uffa7\036\uffa7\037\uffa7\040\uffa7\041\uffa7\042" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\050\uffa7\051\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\055\uffa7\067\uffa7\001\002\000" +
    "\032\020\uffbc\026\uffbc\027\uffbc\034\uffbc\036\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055\uffbc\067\uffbc\001" +
    "\002\000\026\004\041\005\033\006\036\007\035\010\053" +
    "\011\046\012\047\013\042\017\126\047\034\001\002\000" +
    "\064\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\020\uff9d" +
    "\026\uff9d\027\uff9d\034\uff9d\036\uff9d\037\uff9d\040\uff9d\041" +
    "\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\050\uff9d" +
    "\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\067\uff9d\001" +
    "\002\000\012\005\117\006\120\011\121\017\122\001\002" +
    "\000\064\012\103\013\101\014\102\015\104\016\100\020" +
    "\uffa9\026\uffa9\027\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\067\uffa9" +
    "\001\002\000\052\020\uffbb\026\uffbb\027\uffbb\034\uffbb\036" +
    "\uffbb\037\064\040\063\041\062\042\070\043\067\044\065" +
    "\045\uff96\046\uff96\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054" +
    "\uffbb\055\uffbb\067\uffbb\001\002\000\036\020\uff90\026\uff90" +
    "\027\uff90\034\uff90\036\uff90\045\uff90\046\uff90\050\uff90\051" +
    "\uff90\052\uff90\053\uff90\054\uff90\055\uff90\067\uff90\001\002" +
    "\000\064\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\020" +
    "\uffa1\026\uffa1\027\uffa1\034\uffa1\036\uffa1\037\uffa1\040\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050" +
    "\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\067\uffa1" +
    "\001\002\000\010\005\057\006\060\011\061\001\002\000" +
    "\004\020\056\001\002\000\036\020\uffba\026\uffba\027\uffba" +
    "\034\uffba\036\uffba\045\uff95\046\uff95\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\067\uffba\001\002\000\010" +
    "\020\uffbe\034\uffbe\036\054\001\002\000\064\012\uff9e\013" +
    "\uff9e\014\uff9e\015\uff9e\016\uff9e\020\uff9e\026\uff9e\027\uff9e" +
    "\034\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\052\uff9e" +
    "\053\uff9e\054\uff9e\055\uff9e\067\uff9e\001\002\000\026\004" +
    "\041\005\033\006\036\007\035\010\053\011\046\012\047" +
    "\013\042\017\040\047\034\001\002\000\006\020\uffbd\034" +
    "\uffbd\001\002\000\004\027\uffb4\001\002\000\064\012\uffa3" +
    "\013\uffa3\014\uffa3\015\uffa3\016\uffa3\020\uffa3\026\uffa3\027" +
    "\uffa3\034\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3" +
    "\043\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052" +
    "\uffa3\053\uffa3\054\uffa3\055\uffa3\067\uffa3\001\002\000\064" +
    "\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\020\uffa5\026" +
    "\uffa5\027\uffa5\034\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5" +
    "\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\050\uffa5\051" +
    "\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\067\uffa5\001\002" +
    "\000\064\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\020" +
    "\uffa0\026\uffa0\027\uffa0\034\uffa0\036\uffa0\037\uffa0\040\uffa0" +
    "\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050" +
    "\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\067\uffa0" +
    "\001\002\000\026\004\uff8b\005\uff8b\006\uff8b\007\uff8b\010" +
    "\uff8b\011\uff8b\012\uff8b\013\uff8b\017\uff8b\047\uff8b\001\002" +
    "\000\026\004\uff87\005\uff87\006\uff87\007\uff87\010\uff87\011" +
    "\uff87\012\uff87\013\uff87\017\uff87\047\uff87\001\002\000\026" +
    "\004\uff86\005\uff86\006\uff86\007\uff86\010\uff86\011\uff86\012" +
    "\uff86\013\uff86\017\uff86\047\uff86\001\002\000\026\004\uff88" +
    "\005\uff88\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\013" +
    "\uff88\017\uff88\047\uff88\001\002\000\026\004\041\005\033" +
    "\006\036\007\035\010\053\011\046\012\047\013\042\017" +
    "\072\047\071\001\002\000\026\004\uff89\005\uff89\006\uff89" +
    "\007\uff89\010\uff89\011\uff89\012\uff89\013\uff89\017\uff89\047" +
    "\uff89\001\002\000\026\004\uff8a\005\uff8a\006\uff8a\007\uff8a" +
    "\010\uff8a\011\uff8a\012\uff8a\013\uff8a\017\uff8a\047\uff8a\001" +
    "\002\000\024\004\041\005\033\006\036\007\035\010\053" +
    "\011\046\012\047\013\042\017\072\001\002\000\024\004" +
    "\041\005\033\006\036\007\035\010\053\011\046\012\047" +
    "\013\042\017\072\001\002\000\036\020\uff8f\026\uff8f\027" +
    "\uff8f\034\uff8f\036\uff8f\045\uff8f\046\uff8f\050\uff8f\051\uff8f" +
    "\052\uff8f\053\uff8f\054\uff8f\055\uff8f\067\uff8f\001\002\000" +
    "\004\020\075\001\002\000\064\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\020\uffa8\026\uffa8\027\uffa8\034\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\067\uffa8\001\002\000\036\020\uff8d\026\uff8d" +
    "\027\uff8d\034\uff8d\036\uff8d\045\uff8d\046\uff8d\050\uff8d\051" +
    "\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\067\uff8d\001\002" +
    "\000\052\020\uffaf\026\uffaf\027\uffaf\034\uffaf\036\uffaf\037" +
    "\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf" +
    "\046\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055" +
    "\uffaf\067\uffaf\001\002\000\024\004\041\005\033\006\036" +
    "\007\035\010\053\011\046\012\047\013\042\017\072\001" +
    "\002\000\024\004\041\005\033\006\036\007\035\010\053" +
    "\011\046\012\047\013\042\017\072\001\002\000\024\004" +
    "\041\005\033\006\036\007\035\010\053\011\046\012\047" +
    "\013\042\017\072\001\002\000\024\004\041\005\033\006" +
    "\036\007\035\010\053\011\046\012\047\013\042\017\072" +
    "\001\002\000\024\004\041\005\033\006\036\007\035\010" +
    "\053\011\046\012\047\013\042\017\072\001\002\000\064" +
    "\012\103\013\101\014\102\015\104\016\100\020\uffa9\026" +
    "\uffa9\027\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\067\uffa9\001\002" +
    "\000\052\020\uffab\026\uffab\027\uffab\034\uffab\036\uffab\037" +
    "\uffab\040\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab" +
    "\046\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055" +
    "\uffab\067\uffab\001\002\000\064\012\103\013\101\014\102" +
    "\015\104\016\100\020\uffa9\026\uffa9\027\uffa9\034\uffa9\036" +
    "\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054" +
    "\uffa9\055\uffa9\067\uffa9\001\002\000\052\020\uffae\026\uffae" +
    "\027\uffae\034\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050\uffae\051\uffae" +
    "\052\uffae\053\uffae\054\uffae\055\uffae\067\uffae\001\002\000" +
    "\064\012\103\013\101\014\102\015\104\016\100\020\uffa9" +
    "\026\uffa9\027\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050\uffa9" +
    "\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\067\uffa9\001" +
    "\002\000\052\020\uffac\026\uffac\027\uffac\034\uffac\036\uffac" +
    "\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045" +
    "\uffac\046\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\067\uffac\001\002\000\064\012\103\013\101\014" +
    "\102\015\104\016\100\020\uffa9\026\uffa9\027\uffa9\034\uffa9" +
    "\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044" +
    "\uffa9\045\uffa9\046\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\067\uffa9\001\002\000\052\020\uffad\026" +
    "\uffad\027\uffad\034\uffad\036\uffad\037\uffad\040\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\050\uffad\051" +
    "\uffad\052\uffad\053\uffad\054\uffad\055\uffad\067\uffad\001\002" +
    "\000\064\012\103\013\101\014\102\015\104\016\100\020" +
    "\uffa9\026\uffa9\027\uffa9\034\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\050" +
    "\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9\067\uffa9" +
    "\001\002\000\052\020\uffaa\026\uffaa\027\uffaa\034\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\067\uffaa\001\002\000\064\012\uffa2\013\uffa2" +
    "\014\uffa2\015\uffa2\016\uffa2\020\uffa2\026\uffa2\027\uffa2\034" +
    "\uffa2\036\uffa2\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2" +
    "\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\067\uffa2\001\002\000\064\012\uffa6" +
    "\013\uffa6\014\uffa6\015\uffa6\016\uffa6\020\uffa6\026\uffa6\027" +
    "\uffa6\034\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6" +
    "\043\uffa6\044\uffa6\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052" +
    "\uffa6\053\uffa6\054\uffa6\055\uffa6\067\uffa6\001\002\000\064" +
    "\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f\020\uff9f\026" +
    "\uff9f\027\uff9f\034\uff9f\036\uff9f\037\uff9f\040\uff9f\041\uff9f" +
    "\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\050\uff9f\051" +
    "\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f\067\uff9f\001\002" +
    "\000\024\004\041\005\033\006\036\007\035\010\053\011" +
    "\046\012\047\013\042\017\072\001\002\000\004\020\124" +
    "\001\002\000\064\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016" +
    "\uff9b\020\uff9b\026\uff9b\027\uff9b\034\uff9b\036\uff9b\037\uff9b" +
    "\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046" +
    "\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b" +
    "\067\uff9b\001\002\000\004\020\134\001\002\000\026\004" +
    "\041\005\033\006\036\007\035\010\053\011\046\012\047" +
    "\013\042\017\126\047\034\001\002\000\010\020\131\045" +
    "\uff95\046\uff95\001\002\000\024\020\075\037\064\040\063" +
    "\041\062\042\070\043\067\044\065\045\uff96\046\uff96\001" +
    "\002\000\036\020\uff91\026\uff91\027\uff91\034\uff91\036\uff91" +
    "\045\uff91\046\uff91\050\uff91\051\uff91\052\uff91\053\uff91\054" +
    "\uff91\055\uff91\067\uff91\001\002\000\004\020\133\001\002" +
    "\000\036\020\uff97\026\uff97\027\uff97\034\uff97\036\uff97\045" +
    "\uff97\046\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\067\uff97\001\002\000\036\020\uffb9\026\uffb9\027" +
    "\uffb9\034\uffb9\036\uffb9\045\uff97\046\uff97\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\067\uffb9\001\002\000" +
    "\026\004\041\005\033\006\036\007\035\010\053\011\046" +
    "\012\047\013\042\017\143\047\034\001\002\000\016\037" +
    "\064\040\063\041\062\042\070\043\067\044\065\001\002" +
    "\000\026\004\041\005\033\006\036\007\035\010\053\011" +
    "\046\012\047\013\042\017\072\047\140\001\002\000\024" +
    "\004\041\005\033\006\036\007\035\010\053\011\046\012" +
    "\047\013\042\017\072\001\002\000\036\020\uff8e\026\uff8e" +
    "\027\uff8e\034\uff8e\036\uff8e\045\uff8e\046\uff8e\050\uff8e\051" +
    "\uff8e\052\uff8e\053\uff8e\054\uff8e\055\uff8e\067\uff8e\001\002" +
    "\000\036\020\uff8c\026\uff8c\027\uff8c\034\uff8c\036\uff8c\045" +
    "\uff8c\046\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\067\uff8c\001\002\000\026\004\041\005\033\006" +
    "\036\007\035\010\053\011\046\012\047\013\042\017\143" +
    "\047\034\001\002\000\004\020\146\001\002\000\020\020" +
    "\075\037\064\040\063\041\062\042\070\043\067\044\065" +
    "\001\002\000\036\020\uff92\026\uff92\027\uff92\034\uff92\036" +
    "\uff92\045\uff92\046\uff92\050\uff92\051\uff92\052\uff92\053\uff92" +
    "\054\uff92\055\uff92\067\uff92\001\002\000\004\020\131\001" +
    "\002\000\026\004\041\005\033\006\036\007\035\010\053" +
    "\011\046\012\047\013\042\017\126\047\034\001\002\000" +
    "\026\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93" +
    "\012\uff93\013\uff93\017\uff93\047\uff93\001\002\000\032\020" +
    "\uff9a\026\uff9a\027\uff9a\034\uff9a\036\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\067\uff9a\001\002\000" +
    "\026\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94" +
    "\012\uff94\013\uff94\017\uff94\047\uff94\001\002\000\036\020" +
    "\uff98\026\uff98\027\uff98\034\uff98\036\uff98\045\153\046\151" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\067" +
    "\uff98\001\002\000\036\020\uff95\026\uff95\027\uff95\034\uff95" +
    "\036\uff95\045\uff95\046\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\067\uff95\001\002\000\052\020\uff96" +
    "\026\uff96\027\uff96\034\uff96\036\uff96\037\064\040\063\041" +
    "\062\042\070\043\067\044\065\045\uff96\046\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96\067\uff96\001" +
    "\002\000\032\020\uff99\026\uff99\027\uff99\034\uff99\036\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\055\uff99\067" +
    "\uff99\001\002\000\040\004\ufffb\020\ufffb\034\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\060" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\067\ufffb\001\002\000\004" +
    "\027\uffd1\001\002\000\012\021\uffcc\027\uffcc\031\214\036" +
    "\213\001\002\000\006\021\165\027\uffd0\001\002\000\004" +
    "\027\uffce\001\002\000\026\004\171\005\033\006\036\007" +
    "\035\010\053\011\046\012\047\013\042\017\040\047\034" +
    "\001\002\000\004\027\uffc8\001\002\000\004\027\uffca\001" +
    "\002\000\004\027\uffc9\001\002\000\054\012\uff9d\013\uff9d" +
    "\014\uff9d\015\uff9d\016\uff9d\017\201\021\165\022\176\023" +
    "\173\024\202\025\174\027\uff9d\031\175\037\uff9d\040\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\001" +
    "\002\000\004\027\uffcb\001\002\000\004\027\uffc6\001\002" +
    "\000\026\004\041\005\033\006\036\007\035\010\053\011" +
    "\046\012\047\013\042\017\040\047\034\001\002\000\004" +
    "\006\207\001\002\000\004\027\uffc7\001\002\000\004\027" +
    "\uffcf\001\002\000\004\027\uffc3\001\002\000\004\006\204" +
    "\001\002\000\026\004\041\005\033\006\036\007\035\010" +
    "\053\011\046\012\047\013\042\017\040\047\034\001\002" +
    "\000\004\027\uffc5\001\002\000\004\020\205\001\002\000" +
    "\014\021\165\022\176\023\173\024\202\025\174\001\002" +
    "\000\004\027\uffb3\001\002\000\004\032\210\001\002\000" +
    "\014\021\165\022\176\023\173\024\202\025\174\001\002" +
    "\000\004\027\uffb8\001\002\000\004\027\uffc4\001\002\000" +
    "\004\004\230\001\002\000\004\032\215\001\002\000\006" +
    "\021\216\027\uffc1\001\002\000\006\033\220\071\221\001" +
    "\002\000\004\027\uffc2\001\002\000\026\004\041\005\033" +
    "\006\036\007\035\010\053\011\046\012\047\013\042\017" +
    "\040\047\034\001\002\000\004\004\222\001\002\000\004" +
    "\031\223\001\002\000\004\006\224\001\002\000\004\032" +
    "\225\001\002\000\004\027\uffc0\001\002\000\004\034\227" +
    "\001\002\000\004\027\uffbf\001\002\000\010\021\uffcc\027" +
    "\uffcc\036\213\001\002\000\006\021\uffcd\027\uffcd\001\002" +
    "\000\004\002\uffff\001\002\000\040\004\ufffd\020\ufffd\034" +
    "\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd" +
    "\056\ufffd\060\ufffd\063\ufffd\064\ufffd\065\ufffd\067\ufffd\001" +
    "\002\000\004\002\000\001\002\000\004\017\u0119\001\002" +
    "\000\004\017\u0110\001\002\000\004\004\240\001\002\000" +
    "\004\017\241\001\002\000\016\020\uffdf\050\011\051\013" +
    "\052\005\053\007\054\012\001\002\000\006\020\uffdd\036" +
    "\u010e\001\002\000\004\020\247\001\002\000\004\004\246" +
    "\001\002\000\004\020\uffe0\001\002\000\006\020\uffdc\036" +
    "\uffdc\001\002\000\004\033\250\001\002\000\032\004\263" +
    "\034\ufff2\050\011\051\013\052\005\053\007\054\012\055" +
    "\021\056\273\060\256\064\275\065\262\001\002\000\004" +
    "\027\u010d\001\002\000\004\027\u010c\001\002\000\036\004" +
    "\ufff0\020\ufff0\034\ufff0\050\ufff0\051\ufff0\052\ufff0\053\ufff0" +
    "\054\ufff0\055\ufff0\056\ufff0\060\ufff0\063\ufff0\064\ufff0\065" +
    "\ufff0\001\002\000\036\004\263\020\ufff2\034\ufff2\050\011" +
    "\051\013\052\005\053\007\054\012\055\021\056\273\060" +
    "\256\063\ufff2\064\275\065\262\001\002\000\036\004\uffec" +
    "\020\uffec\034\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054" +
    "\uffec\055\uffec\056\uffec\060\uffec\063\uffec\064\uffec\065\uffec" +
    "\001\002\000\004\017\371\001\002\000\036\004\uffed\020" +
    "\uffed\034\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\056\uffed\060\uffed\063\uffed\064\uffed\065\uffed\001" +
    "\002\000\004\027\370\001\002\000\036\004\uffef\020\uffef" +
    "\034\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\056\uffef\060\uffef\063\uffef\064\uffef\065\uffef\001\002" +
    "\000\004\017\360\001\002\000\022\017\342\021\340\022" +
    "\176\023\173\024\202\025\174\031\175\035\341\001\002" +
    "\000\004\027\337\001\002\000\004\027\336\001\002\000" +
    "\036\004\ufff1\020\ufff1\034\ufff1\050\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\054\ufff1\055\ufff1\056\ufff1\060\ufff1\063\ufff1\064" +
    "\ufff1\065\ufff1\001\002\000\036\004\uffeb\020\uffeb\034\uffeb" +
    "\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056" +
    "\uffeb\060\uffeb\063\uffeb\064\uffeb\065\uffeb\001\002\000\004" +
    "\027\335\001\002\000\004\034\331\001\002\000\004\027" +
    "\330\001\002\000\004\017\305\001\002\000\036\004\uffee" +
    "\020\uffee\034\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054" +
    "\uffee\055\uffee\056\uffee\060\uffee\063\uffee\064\uffee\065\uffee" +
    "\001\002\000\004\017\276\001\002\000\026\004\041\005" +
    "\033\006\036\007\035\010\053\011\046\012\047\013\042" +
    "\017\040\047\034\001\002\000\004\020\300\001\002\000" +
    "\004\065\301\001\002\000\004\033\302\001\002\000\032" +
    "\004\263\034\ufff2\050\011\051\013\052\005\053\007\054" +
    "\012\055\021\056\273\060\256\064\275\065\262\001\002" +
    "\000\004\034\304\001\002\000\036\004\uffdb\020\uffdb\034" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\055\uffdb" +
    "\056\uffdb\060\uffdb\063\uffdb\064\uffdb\065\uffdb\001\002\000" +
    "\026\004\041\005\033\006\036\007\035\010\053\011\046" +
    "\012\047\013\042\017\040\047\034\001\002\000\004\020" +
    "\307\001\002\000\004\033\310\001\002\000\032\004\263" +
    "\034\ufff2\050\011\051\013\052\005\053\007\054\012\055" +
    "\021\056\273\060\256\064\275\065\262\001\002\000\004" +
    "\034\312\001\002\000\040\004\uffd7\020\uffd7\034\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7" +
    "\057\313\060\uffd7\063\uffd7\064\uffd7\065\uffd7\001\002\000" +
    "\006\033\316\056\315\001\002\000\036\004\uffda\020\uffda" +
    "\034\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda\055" +
    "\uffda\056\uffda\060\uffda\063\uffda\064\uffda\065\uffda\001\002" +
    "\000\004\017\321\001\002\000\032\004\263\034\ufff2\050" +
    "\011\051\013\052\005\053\007\054\012\055\021\056\273" +
    "\060\256\064\275\065\262\001\002\000\004\034\320\001" +
    "\002\000\036\004\uffd8\020\uffd8\034\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\060\uffd8\063" +
    "\uffd8\064\uffd8\065\uffd8\001\002\000\026\004\041\005\033" +
    "\006\036\007\035\010\053\011\046\012\047\013\042\017" +
    "\040\047\034\001\002\000\004\020\323\001\002\000\004" +
    "\033\324\001\002\000\032\004\263\034\ufff2\050\011\051" +
    "\013\052\005\053\007\054\012\055\021\056\273\060\256" +
    "\064\275\065\262\001\002\000\004\034\326\001\002\000" +
    "\040\004\uffd7\020\uffd7\034\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\313\060\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\001\002\000\036\004\uffd9\020\uffd9" +
    "\034\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\060\uffd9\063\uffd9\064\uffd9\065\uffd9\001\002" +
    "\000\036\004\ufff9\020\ufff9\034\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\060\ufff9\063\ufff9" +
    "\064\ufff9\065\ufff9\001\002\000\004\070\333\001\002\000" +
    "\020\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\067\uffe9\001\002\000\026\004\041\005\033\006\036\007" +
    "\035\010\053\011\046\012\047\013\042\017\040\047\034" +
    "\001\002\000\020\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\067\uffe8\001\002\000\036\004\ufff5\020\ufff5" +
    "\034\ufff5\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055" +
    "\ufff5\056\ufff5\060\ufff5\063\ufff5\064\ufff5\065\ufff5\001\002" +
    "\000\036\004\ufff8\020\ufff8\034\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\060\ufff8\063\ufff8" +
    "\064\ufff8\065\ufff8\001\002\000\036\004\ufff6\020\ufff6\034" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\060\ufff6\063\ufff6\064\ufff6\065\ufff6\001\002\000" +
    "\034\004\171\005\033\006\036\007\035\010\053\011\046" +
    "\012\047\013\042\017\040\021\030\033\220\047\034\071" +
    "\221\001\002\000\006\076\347\077\346\001\002\000\020" +
    "\006\204\020\uffdf\050\011\051\013\052\005\053\007\054" +
    "\012\001\002\000\004\020\344\001\002\000\004\027\345" +
    "\001\002\000\036\004\uffe7\020\uffe7\034\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\053\uffe7\054\uffe7\055\uffe7\056\uffe7\060\uffe7" +
    "\063\uffe7\064\uffe7\065\uffe7\001\002\000\004\017\353\001" +
    "\002\000\004\017\350\001\002\000\026\004\041\005\033" +
    "\006\036\007\035\010\053\011\046\012\047\013\042\017" +
    "\040\047\034\001\002\000\004\020\352\001\002\000\004" +
    "\027\uffb2\001\002\000\026\004\041\005\033\006\036\007" +
    "\035\010\053\011\046\012\047\013\042\017\040\047\034" +
    "\001\002\000\004\020\355\001\002\000\004\027\uffb1\001" +
    "\002\000\004\027\uffb7\001\002\000\004\027\uffb0\001\002" +
    "\000\032\004\263\020\ufff2\050\011\051\013\052\005\053" +
    "\007\054\012\055\021\056\273\060\256\064\275\065\262" +
    "\001\002\000\004\020\362\001\002\000\004\064\363\001" +
    "\002\000\004\017\364\001\002\000\026\004\041\005\033" +
    "\006\036\007\035\010\053\011\046\012\047\013\042\017" +
    "\126\047\034\001\002\000\004\020\366\001\002\000\004" +
    "\027\367\001\002\000\036\004\uffd6\020\uffd6\034\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\060\uffd6\063\uffd6\064\uffd6\065\uffd6\001\002\000\036\004" +
    "\ufffa\020\ufffa\034\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\060\ufffa\063\ufffa\064\ufffa\065" +
    "\ufffa\001\002\000\026\004\041\005\033\006\036\007\035" +
    "\010\053\011\046\012\047\013\042\017\040\047\034\001" +
    "\002\000\004\020\373\001\002\000\004\033\374\001\002" +
    "\000\010\034\uffd2\061\375\062\377\001\002\000\026\004" +
    "\041\005\033\006\036\007\035\010\053\011\046\012\047" +
    "\013\042\017\040\047\034\001\002\000\004\034\u0104\001" +
    "\002\000\004\026\u0100\001\002\000\032\004\263\050\011" +
    "\051\013\052\005\053\007\054\012\055\021\056\273\060" +
    "\256\063\ufff2\064\275\065\262\001\002\000\004\063\u0102" +
    "\001\002\000\004\027\u0103\001\002\000\004\034\uffd3\001" +
    "\002\000\036\004\uffd5\020\uffd5\034\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\060\uffd5\063" +
    "\uffd5\064\uffd5\065\uffd5\001\002\000\004\026\u0106\001\002" +
    "\000\032\004\263\050\011\051\013\052\005\053\007\054" +
    "\012\055\021\056\273\060\256\063\ufff2\064\275\065\262" +
    "\001\002\000\004\063\u0108\001\002\000\004\027\u0109\001" +
    "\002\000\010\034\uffd2\061\375\062\377\001\002\000\004" +
    "\034\uffd4\001\002\000\010\020\ufff3\034\ufff3\063\ufff3\001" +
    "\002\000\036\004\ufff4\020\ufff4\034\ufff4\050\ufff4\051\ufff4" +
    "\052\ufff4\053\ufff4\054\ufff4\055\ufff4\056\ufff4\060\ufff4\063" +
    "\ufff4\064\ufff4\065\ufff4\001\002\000\036\004\ufff7\020\ufff7" +
    "\034\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054\ufff7\055" +
    "\ufff7\056\ufff7\060\ufff7\063\ufff7\064\ufff7\065\ufff7\001\002" +
    "\000\014\050\011\051\013\052\005\053\007\054\012\001" +
    "\002\000\004\020\uffde\001\002\000\004\053\u0111\001\002" +
    "\000\004\004\u0112\001\002\000\004\031\u0113\001\002\000" +
    "\004\032\u0114\001\002\000\004\020\u0115\001\002\000\004" +
    "\033\u0116\001\002\000\032\004\263\034\ufff2\050\011\051" +
    "\013\052\005\053\007\054\012\055\021\056\273\060\256" +
    "\064\275\065\262\001\002\000\004\034\u0118\001\002\000" +
    "\004\002\uffe6\001\002\000\016\020\uffdf\050\011\051\013" +
    "\052\005\053\007\054\012\001\002\000\004\020\u011b\001" +
    "\002\000\004\033\u011c\001\002\000\032\004\263\034\ufff2" +
    "\050\011\051\013\052\005\053\007\054\012\055\021\056" +
    "\273\060\256\064\275\065\262\001\002\000\004\034\u011e" +
    "\001\002\000\020\050\uffea\051\uffea\052\uffea\053\uffea\054" +
    "\uffea\055\uffea\067\uffea\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011d\000\022\002\003\003\013\004\015\005\005\006" +
    "\014\007\021\010\017\027\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\233\003\013\004\015\005" +
    "\005\006\014\007\021\010\017\027\016\001\001\000\002" +
    "\001\001\000\022\002\231\003\013\004\015\005\005\006" +
    "\014\007\021\010\017\027\016\001\001\000\006\043\160" +
    "\044\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\031\051\036\036\045\043\050\042" +
    "\052\050\054\044\056\047\057\031\001\001\000\006\053" +
    "\147\060\151\001\001\000\002\001\001\000\006\045\135" +
    "\050\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\036\124\045\127\050\042\052\126" +
    "\054\044\057\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\051\076\001\001\000\004\055\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\031\051\036\036\045\043\050\042\052" +
    "\050\054\044\056\054\057\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\045\072\050\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\075" +
    "\050\042\001\001\000\006\045\073\050\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\114\001\001\000" +
    "\004\050\112\001\001\000\004\050\110\001\001\000\004" +
    "\050\106\001\001\000\004\050\104\001\001\000\004\051" +
    "\105\001\001\000\002\001\001\000\004\051\107\001\001" +
    "\000\002\001\001\000\004\051\111\001\001\000\002\001" +
    "\001\000\004\051\113\001\001\000\002\001\001\000\004" +
    "\051\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\045\122\050\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\036\131\045\127\050\042\052\126\054\044" +
    "\057\031\001\001\000\002\001\001\000\004\055\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\045\144\050\042\052\143\054" +
    "\044\001\001\000\004\055\136\001\001\000\006\045\140" +
    "\050\042\001\001\000\006\045\141\050\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\045\144\050\042" +
    "\052\146\054\044\001\001\000\002\001\001\000\004\055" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\045\155\050\042\052\154\054\044\057\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\053\147\060\156\001\001\000\002\001\001\000\004\055" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\163\001\001\000" +
    "\002\001\001\000\026\012\167\015\165\020\166\031\171" +
    "\036\036\045\043\050\042\052\050\054\044\057\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\177\042\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\211\036\036\045\043\050\042" +
    "\052\050\054\044\057\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\031\202\036\036\045\043\050\042\052" +
    "\050\054\044\057\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\177\042\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\177\042\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\230\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\216" +
    "\001\001\000\002\001\001\000\022\031\051\036\036\045" +
    "\043\050\042\052\050\054\044\056\225\057\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\242\027\243\033\244\035\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\265" +
    "\006\014\007\021\010\017\011\252\012\257\013\271\014" +
    "\264\015\250\016\263\017\267\020\251\021\270\022\260" +
    "\023\256\024\254\025\273\027\016\032\266\034\253\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\265\006\014\007\021\010\017\011\252\012" +
    "\257\013\271\014\264\015\250\016\263\017\267\020\251" +
    "\021\u010a\022\260\023\256\024\254\025\273\027\016\032" +
    "\266\034\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\177\042\176\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\031\276\036\036\045\043\050\042\052\050\054\044" +
    "\057\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\265\006\014\007\021\010\017" +
    "\011\252\012\257\013\271\014\264\015\250\016\263\017" +
    "\267\020\251\021\302\022\260\023\256\024\254\025\273" +
    "\027\016\032\266\034\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\305\036\036\045\043\050\042" +
    "\052\050\054\044\057\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\265\006\014\007\021\010\017" +
    "\011\252\012\257\013\271\014\264\015\250\016\263\017" +
    "\267\020\251\021\310\022\260\023\256\024\254\025\273" +
    "\027\016\032\266\034\253\001\001\000\002\001\001\000" +
    "\004\037\313\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\265\006\014\007\021\010" +
    "\017\011\252\012\257\013\271\014\264\015\250\016\263" +
    "\017\267\020\251\021\316\022\260\023\256\024\254\025" +
    "\273\027\016\032\266\034\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\031\321\036\036\045\043\050" +
    "\042\052\050\054\044\057\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\265\006\014\007\021\010" +
    "\017\011\252\012\257\013\271\014\264\015\250\016\263" +
    "\017\267\020\251\021\324\022\260\023\256\024\254\025" +
    "\273\027\016\032\266\034\253\001\001\000\002\001\001" +
    "\000\004\037\326\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\331\001\001\000\002\001\001\000\020" +
    "\031\333\036\036\045\043\050\042\052\050\054\044\057" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\012\167\015\165\020" +
    "\166\031\171\036\036\045\043\046\355\047\356\050\042" +
    "\052\050\054\044\057\031\001\001\000\002\001\001\000" +
    "\012\026\342\027\243\033\244\035\241\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\031\350\036\036\045\043" +
    "\050\042\052\050\054\044\057\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\031\353\036\036\045\043" +
    "\050\042\052\050\054\044\057\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\003\265\006\014\007\021\010\017\011\252\012" +
    "\257\013\271\014\264\015\250\016\263\017\267\020\251" +
    "\021\360\022\260\023\256\024\254\025\273\027\016\032" +
    "\266\034\253\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\036\364\045\155\050\042\052" +
    "\154\054\044\057\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\031" +
    "\371\036\036\045\043\050\042\052\050\054\044\057\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\040" +
    "\375\001\001\000\020\031\u0104\036\036\045\043\050\042" +
    "\052\050\054\044\057\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\265\006\014\007\021\010\017" +
    "\011\252\012\257\013\271\014\264\015\250\016\263\017" +
    "\267\020\251\021\u0100\022\260\023\256\024\254\025\273" +
    "\027\016\032\266\034\253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\052\003\265\006\014\007\021\010\017\011" +
    "\252\012\257\013\271\014\264\015\250\016\263\017\267" +
    "\020\251\021\u0106\022\260\023\256\024\254\025\273\027" +
    "\016\032\266\034\253\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\u0109\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\027\243\033\u010e\035\241\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\265\006\014\007\021\010\017\011\252\012\257\013\271" +
    "\014\264\015\250\016\263\017\267\020\251\021\u0116\022" +
    "\260\023\256\024\254\025\273\027\016\032\266\034\253" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\u0119\027\243\033\244\035\241\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\003\265\006\014\007\021\010" +
    "\017\011\252\012\257\013\271\014\264\015\250\016\263" +
    "\017\267\020\251\021\u011c\022\260\023\256\024\254\025" +
    "\273\027\016\032\266\034\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    /**********************************************************************
     *             Creació i Gestió de la Taula de Simbols                *
     **********************************************************************/


    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> DECL PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= PROCEDIMENT PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> PROCEDIMENT PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= MAIN 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL ::= DECL_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= DECL_TAULA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL_TAULA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= DECL_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MODIF ::= MODIF_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> TUPLA PUNITCOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODIF ::= REM_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REM_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODIF ::= AFG_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> AFG_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODIF ::= MODIF_TAULA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> MODIF_TAULA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIF ::= REDEF_TAULA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REDEF_TAULA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIF ::= REDEF_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REDEF_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODIF ::= MODIF_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> MODIF_TIPUS PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIES ::= SENT SENTENCIES 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> SENT SENTENCIES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIES ::= 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= DECL 
            {
              Object RESULT =null;
		System.out.println("SENT -> DECL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= MODIF 
            {
              Object RESULT =null;
		System.out.println("SENT -> MODIF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= MENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= FMENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= IF 
            {
              Object RESULT =null;
		System.out.println("SENT -> IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= SWITCH 
            {
              Object RESULT =null;
		System.out.println("SENT -> SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= CRIDA_PROC 
            {
              Object RESULT =null;
		System.out.println("SENT -> CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROCEDIMENT ::= metode ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROCEDIMENT ::= metode TIPUS ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT RETURN 
            {
              Object RESULT =null;
		System.out.println("PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RETURN ::= retorna VALOR 
            {
              Object RESULT =null;
		System.out.println("RETURN -> retorna VALOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CRIDA_PROC ::= ID LPAREN ARGS RPAREN PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDA_PROC",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MAIN ::= metode main LPAREN cadena ID LCORCH RCORCH RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPUS ::= decimal 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> decimal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPUS ::= enter 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> enter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPUS ::= logic 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> logic");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPUS ::= cadena 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> cadena");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPUS ::= caracter 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> caracter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARGS ::= ARGS_1 
            {
              Object RESULT =null;
		System.out.println("ARGS -> ARGS_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARGS ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARGS_1 ::= ARG COMA ARGS_1 
            {
              Object RESULT =null;
		System.out.println("ARGS_1 -> ARG COMA ARGS_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGS_1 ::= ARG 
            {
              Object RESULT =null;
		System.out.println("ARGS_1 -> ARG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARG ::= TIPUS ID 
            {
              Object RESULT =null;
		System.out.println("ARG -> TIPUS ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MENTRE ::= mentres LPAREN VALOR RPAREN fer LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MENTRE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= si LPAREN VALOR RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		System.out.println("IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF_1 ::= sino si LPAREN VALOR RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		System.out.println("IF_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF_1 ::= sino LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("IF_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF_1 ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FMENTRE ::= fer LPAREN SENTENCIES RPAREN mentres LPAREN L RPAREN PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FMENTRE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SWITCH ::= seleccio LPAREN VALOR RPAREN LCLAUDAT SWITCH_1 RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SWITCH_1 ::= cas VALOR DOSPUNTS SENTENCIES acaba PUNTICOMA SWITCH_1 
            {
              Object RESULT =null;
		System.out.println("SWITCH_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SWITCH_1 ::= pdefecte DOSPUNTS SENTENCIES acaba PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SWITCH_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SWITCH_1 ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECL_TIPUS ::= TIPUS A 
            {
              Object RESULT =null;
		System.out.println("DECL_TIPUS -> TIPUS A ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECL_TIPUS ::= TIPUS A_1 
            {
              Object RESULT =null;
		System.out.println("DECL_TIPUS -> TIPUS A_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MODIF_TIPUS ::= ID I_1 
            {
              Object RESULT =null;
		System.out.println("MODIF_TIPUS -> ID I_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // A ::= A_1 I 
            {
              Object RESULT =null;
		System.out.println("A");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // A_1 ::= ID COMA A_1 
            {
              Object RESULT =null;
		System.out.println("A_1 -> ID COMA A_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // A_1 ::= ID 
            {
              Object RESULT =null;
		System.out.println("A_1 -> ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // I ::= ASSIGN VALOR 
            {
              Object RESULT =null;
		System.out.println("I -> ASSIGN VALOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // I ::= ASSIGN MODIF_TIPUS 
            {
              Object RESULT =null;
		System.out.println("ASSIGN MODIF_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // I ::= ASSIGN MODIF_TUPLA 
            {
              Object RESULT =null;
		System.out.println("ASSIGN MODIF_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // I ::= ASSIGN MODIF_TAULA 
            {
              Object RESULT =null;
		System.out.println("ASSIGN MODIF_TAULA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // I_1 ::= AUTOSUM 
            {
              Object RESULT =null;
		System.out.println("I_1 -> AUTOSUM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // I_1 ::= AUTOSUB 
            {
              Object RESULT =null;
		System.out.println("I_1 -> AUTOSUB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // I_1 ::= SUMAHI VALOR 
            {
              Object RESULT =null;
		System.out.println("I_1 -> SUMAHI VALOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // I_1 ::= RESTAHI VALOR 
            {
              Object RESULT =null;
		System.out.println("I_1 -> RESTAHI VALOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // I_1 ::= I 
            {
              Object RESULT =null;
		System.out.println("I_1 -> I");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECL_TAULA ::= TIPUS ID LCORCH RCORCH ASSIGN NOVA_TAULA 
            {
              Object RESULT =null;
		System.out.println("DECL_TAULA 1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TAULA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECL_TAULA ::= TIPUS ID LCORCH RCORCH 
            {
              Object RESULT =null;
		System.out.println("DECL_TAULA 2");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TAULA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NOVA_TAULA ::= nou ID LCORCH venter RCORCH 
            {
              Object RESULT =null;
		System.out.println("NOVA_TAULA 1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TAULA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NOVA_TAULA ::= LCLAUDAT VALORS RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("NOVA_TAULA 2");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TAULA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORS ::= VALOR 
            {
              Object RESULT =null;
		System.out.println("VALORS -> VALOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORS ::= VALOR COMA VALORS 
            {
              Object RESULT =null;
		System.out.println("VALORS -> VALOR COMA VALORS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALOR ::= L 
            {
              Object RESULT =null;
		System.out.println("VALOR -> L");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALOR ::= E 
            {
              Object RESULT =null;
		System.out.println("VALOR -> E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALOR ::= EXPRESIO 
            {
              Object RESULT =null;
		System.out.println("VALOR -> EXPRESSIO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALOR ::= LPAREN L RPAREN 
            {
              Object RESULT =null;
		System.out.println("VALOR -> LPAREN L RPAREN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // MODIF_TAULA ::= ID LCORCH venter RCORCH I_1 
            {
              Object RESULT =null;
		System.out.println("MODIF_TAULA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TAULA",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // REDEF_TAULA ::= ID ASSIGN NOVA_TAULA 
            {
              Object RESULT =null;
		System.out.println("REDEF_TAULA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REDEF_TAULA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECL_TUPLA ::= tupla ID LPAREN RPAREN NOVA_TUPLA 
            {
              Object RESULT =null;
		System.out.println("DECL_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECL_TUPLA ::= tupla ID LPAREN RPAREN 
            {
              Object RESULT =null;
		System.out.println("DECL_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NOVA_TUPLA ::= ASSIGN LPAREN VALORS RPAREN 
            {
              Object RESULT =null;
		System.out.println("NOVA_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TUPLA",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // MODIF_TUPLA ::= ID LPAREN venter RPAREN I_1 
            {
              Object RESULT =null;
		System.out.println("MODIF_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TUPLA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // REM_TUPLA ::= ID PUNT borra LPAREN VALOR RPAREN 
            {
              Object RESULT =null;
		System.out.println("REM_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REM_TUPLA",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // AFG_TUPLA ::= ID PUNT afegeix LPAREN VALOR RPAREN 
            {
              Object RESULT =null;
		System.out.println("ARG_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AFG_TUPLA",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // REDEF_TUPLA ::= ID ASSIGN NOVA_TUPLA 
            {
              Object RESULT =null;
		System.out.println("REDEF_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REDEF_TUPLA",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // E ::= F OP 
            {
              Object RESULT =null;
		System.out.println("E -> F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP ::= ADD F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> ADD F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP ::= SUB F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> SUB F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP ::= MULT F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> MULT F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OP ::= DIV F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> DIV F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP ::= MOD F OP 
            {
              Object RESULT =null;
		System.out.println("OP -> MOD F OP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP ::= 
            {
              Object RESULT =null;
		System.out.println("OP -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // F ::= LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("F -> LPAREN E RPAREN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // F ::= venter 
            {
              Object RESULT =null;
		System.out.println("F -> venter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // F ::= SUB venter 
            {
              Object RESULT =null;
		System.out.println("F -> SUB venter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // F ::= ADD venter 
            {
              Object RESULT =null;
		System.out.println("F -> ADD venter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // F ::= vdecimal 
            {
              Object RESULT =null;
		System.out.println("F -> vdecimal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // F ::= ADD vdecimal 
            {
              Object RESULT =null;
		System.out.println("F -> ADD vdecimal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // F ::= SUB vdecimal 
            {
              Object RESULT =null;
		System.out.println("F -> SUB vdecimal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // F ::= vcaracter 
            {
              Object RESULT =null;
		System.out.println("F -> vcaracter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // F ::= ADD vcaracter 
            {
              Object RESULT =null;
		System.out.println("F -> ADD");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // F ::= SUB vcaracter 
            {
              Object RESULT =null;
		System.out.println("F -> SUB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // F ::= vcadena 
            {
              Object RESULT =null;
		System.out.println("F -> vcadena");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // F ::= ID 
            {
              Object RESULT =null;
		System.out.println("F -> ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // F ::= vlogic 
            {
              Object RESULT =null;
		System.out.println("F -> vlogic");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // F ::= SUB LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("F -> SUB LPAREN E RPAREN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // L ::= F_1 OPP 
            {
              Object RESULT =null;
		System.out.println("L -> F_1 OPP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPP ::= COMP_LOG F_1 OPP 
            {
              Object RESULT =null;
		System.out.println("COMP_LOG F_1 OPP");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPP",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPP ::= COMP_LOG F_1 
            {
              Object RESULT =null;
		System.out.println("COMP_LOG F_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPP",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // F_1 ::= LPAREN L RPAREN 
            {
              Object RESULT =null;
		System.out.println("F_1 -> LPAREN L RPAREN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // F_1 ::= E 
            {
              Object RESULT =null;
		System.out.println("F_1 -> E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // F_1 ::= EXPRESIO 
            {
              Object RESULT =null;
		System.out.println("F_1 -> EXPRESSIO");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F_1",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // COMP_LOG ::= OR 
            {
              Object RESULT =null;
		System.out.println("COMP_LOG -> OR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP_LOG",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // COMP_LOG ::= AND 
            {
              Object RESULT =null;
		System.out.println("COMP_LOG -> AND");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP_LOG",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESIO ::= NOT LPAREN EXPRESIO RPAREN 
            {
              Object RESULT =null;
		System.out.println("EXPRESSIO -> NOT LPAREN EXPRESIO RPAREN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESIO ::= LPAREN EXPRESIO RPAREN 
            {
              Object RESULT =null;
		System.out.println("EXPRESSIO -> LPAREN EXPRESIO RPAREN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESIO ::= EXPRESIO_1 
            {
              Object RESULT =null;
		System.out.println("EXPRESIO -> EXPRESSIO_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESIO_1 ::= E COMP E 
            {
              Object RESULT =null;
		System.out.println("EXPRESSIO_1 -> E COMP E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESIO_1 ::= NOT E COMP E 
            {
              Object RESULT =null;
		System.out.println("EXPRESSIO_1 -> NOT E COMP E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESIO_1 ::= E COMP NOT E 
            {
              Object RESULT =null;
		System.out.println("EXPRESSIO_1 -> E COMP NOT E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESIO_1 ::= NOT E COMP NOT E 
            {
              Object RESULT =null;
		System.out.println("EXPRESSIO_1 -> NOT E COMP NOT E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COMP ::= MENORI 
            {
              Object RESULT =null;
		System.out.println("COMP -> MENORI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COMP ::= MAJORI 
            {
              Object RESULT =null;
		System.out.println("COMP -> MAJORI");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COMP ::= MENOR 
            {
              Object RESULT =null;
		System.out.println("COMP -> MENOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // COMP ::= MAJOR 
            {
              Object RESULT =null;
		System.out.println("COMP -> MAJOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // COMP ::= IGIG 
            {
              Object RESULT =null;
		System.out.println("COMP -> IGIG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // COMP ::= DIF 
            {
              Object RESULT =null;
		System.out.println("COMP -> DIF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
