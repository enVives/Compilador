
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador.Sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import Compilador.Lexic.Scanner.Token;
import Compilador.Intermedi.TaulaIntermedi;
import Compilador.Intermedi.TaulaIntermedi.Sentencia;
import Compilador.Intermedi.Operacio;
import Compilador.Intermedi.TaulaVariables;
import Compilador.Intermedi.TaulaProcediments;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.PrintStream;
import java.util.HashMap;
import Compilador.TSimbols.Taula;
import Compilador.TSimbols.DT.*;
import Compilador.TSimbols.TD.*;
import Compilador.Sintactic.Simbols.*;
import Compilador.Sintactic.Simbols.SimbolValsTupla.KeyValue;
import Compilador.Intermedi.TaulaVariables.*;
import java.util.Iterator;
import java.util.Stack;
import java.util.ArrayList;
import Compilador.TSimbols.Dada1;
import Compilador.TSimbols.Dada2;
import Compilador.Sintactic.Simbols.SimbolArgsp.KeyValor;
import java.util.Stack;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\164\000\002\002\004\000\002\070\004\000\002\002" +
    "\005\000\002\002\004\000\002\002\003\000\002\055\002" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\004\000\002\056\002\000\002\007\003\000\002" +
    "\007\003\000\002\016\004\000\002\016\002\000\002\023" +
    "\004\000\002\023\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\004\000\002\023\003\000" +
    "\002\023\004\000\002\106\007\000\002\107\010\000\002" +
    "\004\006\000\002\004\007\000\002\101\005\000\002\100" +
    "\003\000\002\100\002\000\002\077\005\000\002\077\003" +
    "\000\002\076\004\000\002\022\003\000\002\005\013\000" +
    "\002\060\002\000\002\061\002\000\002\074\003\000\002" +
    "\074\003\000\002\074\003\000\002\074\003\000\002\017" +
    "\007\000\002\064\002\000\002\057\006\000\002\066\005" +
    "\000\002\067\005\000\002\065\007\000\002\065\006\000" +
    "\002\065\002\000\002\021\010\000\002\062\006\000\002" +
    "\036\006\000\002\037\007\000\002\037\007\000\002\073" +
    "\004\000\002\073\006\000\002\073\006\000\002\075\004" +
    "\000\002\075\005\000\002\051\003\000\002\051\006\000" +
    "\002\051\005\000\002\071\003\000\002\071\003\000\002" +
    "\071\004\000\002\071\004\000\002\071\004\000\002\053" +
    "\003\000\002\053\002\000\002\063\003\000\002\063\005" +
    "\000\002\052\005\000\002\052\007\000\002\052\003\000" +
    "\002\052\005\000\002\054\012\000\002\041\004\000\002" +
    "\042\005\000\002\042\005\000\002\042\002\000\002\043" +
    "\004\000\002\044\004\000\002\044\004\000\002\044\004" +
    "\000\002\044\004\000\002\044\004\000\002\044\004\000" +
    "\002\044\002\000\002\045\004\000\002\046\005\000\002" +
    "\046\005\000\002\046\002\000\002\047\004\000\002\050" +
    "\005\000\002\050\005\000\002\050\005\000\002\050\002" +
    "\000\002\040\005\000\002\040\003\000\002\040\003\000" +
    "\002\040\004\000\002\040\004\000\002\040\003\000\002" +
    "\040\004\000\002\040\004\000\002\040\003\000\002\040" +
    "\004\000\002\040\004\000\002\040\003\000\002\040\004" +
    "\000\002\040\004\000\002\040\003\000\002\040\006\000" +
    "\002\040\004\000\002\040\004\000\002\040\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\022\003\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\066\ufffc\071\ufffc\001\002\000\004\002\344" +
    "\001\002\000\022\003\021\050\010\051\024\052\023\053" +
    "\015\054\020\066\012\071\011\001\002\000\004\002\000" +
    "\001\002\000\004\004\340\001\002\000\006\004\uffdc\020" +
    "\uffdc\001\002\000\012\050\010\051\024\052\023\053\015" +
    "\001\002\000\016\004\304\050\010\051\024\052\023\053" +
    "\015\073\305\001\002\000\022\003\021\050\010\051\024" +
    "\052\023\053\015\054\020\066\012\071\011\001\002\000" +
    "\004\027\ufff9\001\002\000\006\004\uffd9\020\uffd9\001\002" +
    "\000\004\027\301\001\002\000\004\002\ufffd\001\002\000" +
    "\004\004\263\001\002\000\004\027\262\001\002\000\004" +
    "\027\ufffa\001\002\000\006\004\uffda\020\uffda\001\002\000" +
    "\006\004\uffdb\020\uffdb\001\002\000\004\027\ufffb\001\002" +
    "\000\004\033\253\001\002\000\004\033\030\001\002\000" +
    "\034\003\021\004\041\034\ufff3\050\010\051\024\052\023" +
    "\053\015\054\020\055\051\063\052\064\037\071\011\072" +
    "\031\001\002\000\004\017\250\001\002\000\004\027\ufff5" +
    "\001\002\000\020\021\236\022\237\023\240\024\241\025" +
    "\242\027\uffe0\035\125\001\002\000\004\027\234\001\002" +
    "\000\036\003\021\004\041\034\ufff3\050\010\051\024\052" +
    "\023\053\015\054\020\055\051\063\052\064\037\067\ufff3" +
    "\071\011\072\031\001\002\000\036\003\uffee\004\uffee\034" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\063\uffee\064\uffee\067\uffee\071\uffee\072\uffee\001\002\000" +
    "\004\033\uffd7\001\002\000\036\003\ufff0\004\ufff0\034\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\063" +
    "\ufff0\064\ufff0\067\ufff0\071\ufff0\072\ufff0\001\002\000\062" +
    "\012\uffc6\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\217\020" +
    "\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6" +
    "\027\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\042" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\001\002\000\004" +
    "\027\216\001\002\000\004\027\215\001\002\000\004\027" +
    "\214\001\002\000\004\027\ufff6\001\002\000\004\034\213" +
    "\001\002\000\036\003\uffec\004\uffec\034\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\063\uffec\064\uffec" +
    "\067\uffec\071\uffec\072\uffec\001\002\000\036\003\uffef\004" +
    "\uffef\034\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef" +
    "\055\uffef\063\uffef\064\uffef\067\uffef\071\uffef\072\uffef\001" +
    "\002\000\004\017\054\001\002\000\004\017\uffd7\001\002" +
    "\000\004\017\054\001\002\000\026\004\041\005\064\006" +
    "\076\007\066\010\075\011\070\012\071\013\073\017\100" +
    "\047\077\001\002\000\004\064\056\001\002\000\004\033" +
    "\060\001\002\000\036\003\uffd8\004\uffd8\034\uffd8\050\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\063\uffd8\064" +
    "\uffd8\067\uffd8\071\uffd8\072\uffd8\001\002\000\034\003\021" +
    "\004\041\034\ufff3\050\010\051\024\052\023\053\015\054" +
    "\020\055\051\063\052\064\037\071\011\072\031\001\002" +
    "\000\004\034\062\001\002\000\040\003\uffd4\004\uffd4\034" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4" +
    "\056\uffd4\063\uffd4\064\uffd4\067\uffd4\071\uffd4\072\uffd4\001" +
    "\002\000\044\012\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e" +
    "\020\uff9e\026\uff9e\027\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\001\002" +
    "\000\044\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\020" +
    "\uff9b\026\uff9b\027\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\001\002\000" +
    "\016\020\uffb2\026\uffb2\027\uffb2\036\uffb2\045\173\046\171" +
    "\001\002\000\044\012\uff92\013\uff92\014\uff92\015\uff92\016" +
    "\uff92\020\uff92\026\uff92\027\uff92\036\uff92\037\uff92\040\uff92" +
    "\041\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\001" +
    "\002\000\046\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95" +
    "\020\uff95\026\uff95\027\uff95\035\125\036\uff95\037\uff95\040" +
    "\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95" +
    "\001\002\000\004\017\166\001\002\000\012\004\041\005" +
    "\162\006\163\010\165\001\002\000\032\020\uffaa\026\uffaa" +
    "\027\uffaa\036\uffaa\037\147\040\145\041\146\042\153\043" +
    "\152\044\151\045\uffaa\046\uffaa\001\002\000\014\004\041" +
    "\005\136\006\137\010\141\017\142\001\002\000\036\012" +
    "\131\013\127\020\uffa6\026\uffa6\027\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\001\002\000\044\012\uff98\013\uff98\014\uff98\015\uff98" +
    "\016\uff98\020\uff98\026\uff98\027\uff98\036\uff98\037\uff98\040" +
    "\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046\uff98" +
    "\001\002\000\044\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\020\uff9f\026\uff9f\027\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\001" +
    "\002\000\010\004\041\007\121\017\122\001\002\000\026" +
    "\004\041\005\064\006\076\007\066\010\075\011\070\012" +
    "\071\013\073\017\100\047\077\001\002\000\044\012\uffa1" +
    "\013\uffa1\014\105\015\106\016\104\020\uffa1\026\uffa1\027" +
    "\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1" +
    "\044\uffa1\045\uffa1\046\uffa1\001\002\000\004\020\103\001" +
    "\002\000\010\027\uffd5\033\uffd5\064\uffd5\001\002\000\026" +
    "\004\041\005\064\006\076\007\066\010\075\011\070\012" +
    "\071\013\073\017\100\047\077\001\002\000\026\004\041" +
    "\005\064\006\076\007\066\010\075\011\070\012\071\013" +
    "\073\017\100\047\077\001\002\000\026\004\041\005\064" +
    "\006\076\007\066\010\075\011\070\012\071\013\073\017" +
    "\100\047\077\001\002\000\036\012\uffa5\013\uffa5\020\uffa5" +
    "\026\uffa5\027\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\001\002\000\044" +
    "\012\uffa1\013\uffa1\014\105\015\106\016\104\020\uffa1\026" +
    "\uffa1\027\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\001\002\000\036\012" +
    "\uffa3\013\uffa3\020\uffa3\026\uffa3\027\uffa3\036\uffa3\037\uffa3" +
    "\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046" +
    "\uffa3\001\002\000\044\012\uffa1\013\uffa1\014\105\015\106" +
    "\016\104\020\uffa1\026\uffa1\027\uffa1\036\uffa1\037\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1" +
    "\001\002\000\036\012\uffa4\013\uffa4\020\uffa4\026\uffa4\027" +
    "\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\046\uffa4\001\002\000\044\012\uffa1\013" +
    "\uffa1\014\105\015\106\016\104\020\uffa1\026\uffa1\027\uffa1" +
    "\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044" +
    "\uffa1\045\uffa1\046\uffa1\001\002\000\036\012\uffa2\013\uffa2" +
    "\020\uffa2\026\uffa2\027\uffa2\036\uffa2\037\uffa2\040\uffa2\041" +
    "\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\001\002" +
    "\000\004\020\117\001\002\000\044\012\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\020\uffa0\026\uffa0\027\uffa0\036\uffa0" +
    "\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\001\002\000\046\012\uff8f\013\uff8f\014\uff8f" +
    "\015\uff8f\016\uff8f\020\uff8f\026\uff8f\027\uff8f\035\125\036" +
    "\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\001\002\000\044\012\uff90\013\uff90\014" +
    "\uff90\015\uff90\016\uff90\020\uff90\026\uff90\027\uff90\036\uff90" +
    "\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045" +
    "\uff90\046\uff90\001\002\000\026\004\041\005\064\006\076" +
    "\007\066\010\075\011\070\012\071\013\073\017\100\047" +
    "\077\001\002\000\004\020\124\001\002\000\044\012\uff8e" +
    "\013\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e\026\uff8e\027" +
    "\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\044\uff8e\045\uff8e\046\uff8e\001\002\000\004\004\126\001" +
    "\002\000\060\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4" +
    "\020\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\027\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\001\002\000" +
    "\026\004\041\005\064\006\076\007\066\010\075\011\070" +
    "\012\071\013\073\017\100\047\077\001\002\000\032\020" +
    "\uffa9\026\uffa9\027\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\001\002\000" +
    "\026\004\041\005\064\006\076\007\066\010\075\011\070" +
    "\012\071\013\073\017\100\047\077\001\002\000\036\012" +
    "\131\013\127\020\uffa6\026\uffa6\027\uffa6\036\uffa6\037\uffa6" +
    "\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046" +
    "\uffa6\001\002\000\032\020\uffa8\026\uffa8\027\uffa8\036\uffa8" +
    "\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\001\002\000\036\012\131\013\127\020\uffa6" +
    "\026\uffa6\027\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\001\002\000\032" +
    "\020\uffa7\026\uffa7\027\uffa7\036\uffa7\037\uffa7\040\uffa7\041" +
    "\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\001\002" +
    "\000\044\012\uff99\013\uff99\014\uff99\015\uff99\016\uff99\020" +
    "\uff99\026\uff99\027\uff99\036\uff99\037\uff99\040\uff99\041\uff99" +
    "\042\uff99\043\uff99\044\uff99\045\uff99\046\uff99\001\002\000" +
    "\044\012\uff9d\013\uff9d\014\uff9d\015\uff9d\016\uff9d\020\uff9d" +
    "\026\uff9d\027\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\001\002\000\046" +
    "\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\020\uff94\026" +
    "\uff94\027\uff94\035\125\036\uff94\037\uff94\040\uff94\041\uff94" +
    "\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\001\002\000" +
    "\044\012\uff96\013\uff96\014\uff96\015\uff96\016\uff96\020\uff96" +
    "\026\uff96\027\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042" +
    "\uff96\043\uff96\044\uff96\045\uff96\046\uff96\001\002\000\026" +
    "\004\041\005\064\006\076\007\066\010\075\011\070\012" +
    "\071\013\073\017\100\047\077\001\002\000\004\020\144" +
    "\001\002\000\044\012\uff91\013\uff91\014\uff91\015\uff91\016" +
    "\uff91\020\uff91\026\uff91\027\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\001" +
    "\002\000\026\004\041\005\064\006\076\007\066\010\075" +
    "\011\070\012\071\013\073\017\100\047\077\001\002\000" +
    "\026\004\041\005\064\006\076\007\066\010\075\011\070" +
    "\012\071\013\073\017\100\047\077\001\002\000\026\004" +
    "\041\005\064\006\076\007\066\010\075\011\070\012\071" +
    "\013\073\017\100\047\077\001\002\000\016\020\uffb1\026" +
    "\uffb1\027\uffb1\036\uffb1\045\uffb1\046\uffb1\001\002\000\026" +
    "\004\041\005\064\006\076\007\066\010\075\011\070\012" +
    "\071\013\073\017\100\047\077\001\002\000\026\004\041" +
    "\005\064\006\076\007\066\010\075\011\070\012\071\013" +
    "\073\017\100\047\077\001\002\000\026\004\041\005\064" +
    "\006\076\007\066\010\075\011\070\012\071\013\073\017" +
    "\100\047\077\001\002\000\016\020\uffab\026\uffab\027\uffab" +
    "\036\uffab\045\uffab\046\uffab\001\002\000\016\020\uffae\026" +
    "\uffae\027\uffae\036\uffae\045\uffae\046\uffae\001\002\000\016" +
    "\020\uffad\026\uffad\027\uffad\036\uffad\045\uffad\046\uffad\001" +
    "\002\000\016\020\uffaf\026\uffaf\027\uffaf\036\uffaf\045\uffaf" +
    "\046\uffaf\001\002\000\016\020\uffac\026\uffac\027\uffac\036" +
    "\uffac\045\uffac\046\uffac\001\002\000\016\020\uffb0\026\uffb0" +
    "\027\uffb0\036\uffb0\045\uffb0\046\uffb0\001\002\000\044\012" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a\026\uff9a" +
    "\027\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\001\002\000\044\012\uff9c" +
    "\013\uff9c\014\uff9c\015\uff9c\016\uff9c\020\uff9c\026\uff9c\027" +
    "\uff9c\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\001\002\000\046\012\uff93\013" +
    "\uff93\014\uff93\015\uff93\016\uff93\020\uff93\026\uff93\027\uff93" +
    "\035\125\036\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\001\002\000\044\012\uff97" +
    "\013\uff97\014\uff97\015\uff97\016\uff97\020\uff97\026\uff97\027" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97" +
    "\044\uff97\045\uff97\046\uff97\001\002\000\012\050\010\051" +
    "\024\052\023\053\015\001\002\000\004\020\170\001\002" +
    "\000\044\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\020" +
    "\uffcf\026\uffcf\027\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\001\002\000" +
    "\026\004\041\005\064\006\076\007\066\010\075\011\070" +
    "\012\071\013\073\017\100\047\077\001\002\000\012\020" +
    "\uffb5\026\uffb5\027\uffb5\036\uffb5\001\002\000\026\004\041" +
    "\005\064\006\076\007\066\010\075\011\070\012\071\013" +
    "\073\017\100\047\077\001\002\000\016\020\uffb2\026\uffb2" +
    "\027\uffb2\036\uffb2\045\173\046\171\001\002\000\012\020" +
    "\uffb3\026\uffb3\027\uffb3\036\uffb3\001\002\000\016\020\uffb2" +
    "\026\uffb2\027\uffb2\036\uffb2\045\173\046\171\001\002\000" +
    "\012\020\uffb4\026\uffb4\027\uffb4\036\uffb4\001\002\000\004" +
    "\033\060\001\002\000\040\003\uffd1\004\uffd1\034\uffd1\050" +
    "\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\202" +
    "\063\uffd1\064\uffd1\067\uffd1\071\uffd1\072\uffd1\001\002\000" +
    "\006\033\205\055\204\001\002\000\036\003\uffd6\004\uffd6" +
    "\034\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055" +
    "\uffd6\063\uffd6\064\uffd6\067\uffd6\071\uffd6\072\uffd6\001\002" +
    "\000\004\017\054\001\002\000\034\003\021\004\041\034" +
    "\ufff3\050\010\051\024\052\023\053\015\054\020\055\051" +
    "\063\052\064\037\071\011\072\031\001\002\000\004\034" +
    "\207\001\002\000\036\003\uffd2\004\uffd2\034\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\063\uffd2\064" +
    "\uffd2\067\uffd2\071\uffd2\072\uffd2\001\002\000\004\033\060" +
    "\001\002\000\040\003\uffd1\004\uffd1\034\uffd1\050\uffd1\051" +
    "\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\202\063\uffd1" +
    "\064\uffd1\067\uffd1\071\uffd1\072\uffd1\001\002\000\036\003" +
    "\uffd3\004\uffd3\034\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3" +
    "\054\uffd3\055\uffd3\063\uffd3\064\uffd3\067\uffd3\071\uffd3\072" +
    "\uffd3\001\002\000\022\003\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\053\uffe8\054\uffe8\066\uffe8\071\uffe8\001\002\000\036\003" +
    "\uffed\004\uffed\034\uffed\050\uffed\051\uffed\052\uffed\053\uffed" +
    "\054\uffed\055\uffed\063\uffed\064\uffed\067\uffed\071\uffed\072" +
    "\uffed\001\002\000\036\003\ufff2\004\ufff2\034\ufff2\050\ufff2" +
    "\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\063\ufff2\064" +
    "\ufff2\067\ufff2\071\ufff2\072\ufff2\001\002\000\036\003\uffeb" +
    "\004\uffeb\034\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\063\uffeb\064\uffeb\067\uffeb\071\uffeb\072\uffeb" +
    "\001\002\000\030\004\041\005\064\006\076\007\066\010" +
    "\075\011\070\012\071\013\073\017\100\020\uffbd\047\077" +
    "\001\002\000\006\020\uffbc\036\224\001\002\000\004\020" +
    "\223\001\002\000\004\020\uffbe\001\002\000\060\012\uffc5" +
    "\013\uffc5\014\uffc5\015\uffc5\016\uffc5\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\045\uffc5\046\uffc5\001\002\000\026\004\041\005\064" +
    "\006\076\007\066\010\075\011\070\012\071\013\073\017" +
    "\100\047\077\001\002\000\004\020\uffbb\001\002\000\004" +
    "\033\060\001\002\000\004\063\230\001\002\000\004\017" +
    "\054\001\002\000\004\027\232\001\002\000\036\003\uffd0" +
    "\004\uffd0\034\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054" +
    "\uffd0\055\uffd0\063\uffd0\064\uffd0\067\uffd0\071\uffd0\072\uffd0" +
    "\001\002\000\006\034\ufff4\067\ufff4\001\002\000\036\003" +
    "\ufff1\004\ufff1\034\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1" +
    "\054\ufff1\055\ufff1\063\ufff1\064\ufff1\067\ufff1\071\ufff1\072" +
    "\ufff1\001\002\000\004\027\uffc8\001\002\000\004\027\uffc3" +
    "\001\002\000\004\027\uffc2\001\002\000\026\004\041\005" +
    "\064\006\076\007\066\010\075\011\070\012\071\013\073" +
    "\017\100\047\077\001\002\000\026\004\041\005\064\006" +
    "\076\007\066\010\075\011\070\012\071\013\073\017\100" +
    "\047\077\001\002\000\026\004\041\005\064\006\076\007" +
    "\066\010\075\011\070\012\071\013\073\017\100\047\077" +
    "\001\002\000\004\027\uffc7\001\002\000\052\012\uff95\013" +
    "\uff95\014\uff95\015\uff95\016\uff95\021\236\022\237\023\240" +
    "\024\241\025\242\027\uff95\035\125\037\uff95\040\uff95\041" +
    "\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046\uff95\001\002" +
    "\000\004\027\uffbf\001\002\000\004\027\uffc0\001\002\000" +
    "\004\027\uffc1\001\002\000\026\004\041\005\064\006\076" +
    "\007\066\010\075\011\070\012\071\013\073\017\100\047" +
    "\077\001\002\000\004\020\252\001\002\000\004\027\uffce" +
    "\001\002\000\034\003\021\004\041\050\010\051\024\052" +
    "\023\053\015\054\020\055\051\063\052\064\037\067\ufff3" +
    "\071\011\072\031\001\002\000\004\067\256\001\002\000" +
    "\004\034\261\001\002\000\026\004\041\005\064\006\076" +
    "\007\066\010\075\011\070\012\071\013\073\017\100\047" +
    "\077\001\002\000\004\027\260\001\002\000\004\034\uffe6" +
    "\001\002\000\022\003\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\066\uffe7\071\uffe7\001\002\000\004\027\ufff8" +
    "\001\002\000\004\017\264\001\002\000\004\020\265\001" +
    "\002\000\004\025\266\001\002\000\004\017\267\001\002" +
    "\000\026\004\041\005\064\006\076\007\066\010\075\011" +
    "\070\012\071\013\073\017\100\047\077\001\002\000\010" +
    "\020\uffb8\026\274\036\273\001\002\000\004\020\272\001" +
    "\002\000\004\027\uffb6\001\002\000\026\004\041\005\064" +
    "\006\076\007\066\010\075\011\070\012\071\013\073\017" +
    "\100\047\077\001\002\000\004\004\275\001\002\000\006" +
    "\020\uffb7\036\276\001\002\000\026\004\041\005\064\006" +
    "\076\007\066\010\075\011\070\012\071\013\073\017\100" +
    "\047\077\001\002\000\004\020\uffb9\001\002\000\004\020" +
    "\uffba\001\002\000\022\003\021\050\010\051\024\052\023" +
    "\053\015\054\020\066\012\071\011\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\ufffe\001\002\000\004\017\330" +
    "\001\002\000\004\017\321\001\002\000\004\004\307\001" +
    "\002\000\004\017\310\001\002\000\014\020\uffe4\050\010" +
    "\051\024\052\023\053\015\001\002\000\004\020\uffe5\001" +
    "\002\000\004\004\320\001\002\000\004\020\317\001\002" +
    "\000\006\020\uffe2\036\315\001\002\000\012\050\010\051" +
    "\024\052\023\053\015\001\002\000\004\020\uffe3\001\002" +
    "\000\004\033\uffe9\001\002\000\006\020\uffe1\036\uffe1\001" +
    "\002\000\004\020\uffde\001\002\000\004\020\323\001\002" +
    "\000\004\033\324\001\002\000\034\003\021\004\041\034" +
    "\ufff3\050\010\051\024\052\023\053\015\054\020\055\051" +
    "\063\052\064\037\071\011\072\031\001\002\000\004\034" +
    "\326\001\002\000\004\002\uffdd\001\002\000\004\002\uffdf" +
    "\001\002\000\014\020\uffe4\050\010\051\024\052\023\053" +
    "\015\001\002\000\004\020\332\001\002\000\004\033\uffea" +
    "\001\002\000\004\004\334\001\002\000\004\025\335\001" +
    "\002\000\026\004\041\005\064\006\076\007\066\010\075" +
    "\011\070\012\071\013\073\017\100\047\077\001\002\000" +
    "\004\027\uffcc\001\002\000\004\027\uffcd\001\002\000\006" +
    "\025\341\027\uffcb\001\002\000\026\004\041\005\064\006" +
    "\076\007\066\010\075\011\070\012\071\013\073\017\100" +
    "\047\077\001\002\000\004\027\uffc9\001\002\000\004\027" +
    "\uffca\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\342\000\006\055\004\070\003\001\001\000\002\001" +
    "\001\000\026\002\005\003\015\004\012\005\016\037\013" +
    "\054\024\073\021\074\006\106\026\107\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\074\332\001\001\000\004\074\305\001\001\000\026\002" +
    "\302\003\015\004\012\005\016\037\013\054\024\073\021" +
    "\074\006\106\026\107\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\042\007\033\015\044\016" +
    "\045\017\037\021\047\022\043\023\034\033\046\036\041" +
    "\037\013\051\032\054\024\057\035\073\021\074\006\075" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\234\001\001\000\002\001\001\000\044\003\042\007" +
    "\033\015\044\016\232\017\037\021\047\022\043\023\034" +
    "\033\046\036\041\037\013\051\032\054\024\057\035\073" +
    "\021\074\006\075\031\001\001\000\002\001\001\000\004" +
    "\064\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\177\001\001\000\004\064\052\001\001" +
    "\000\004\066\054\001\001\000\020\040\100\041\101\043" +
    "\064\045\071\047\073\051\066\062\062\001\001\000\002" +
    "\001\001\000\004\067\056\001\001\000\002\001\001\000" +
    "\044\003\042\007\033\015\044\016\060\017\037\021\047" +
    "\022\043\023\034\033\046\036\041\037\013\051\032\054" +
    "\024\057\035\073\021\074\006\075\031\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\171\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\163\001\001\000" +
    "\004\044\147\001\001\000\004\051\137\001\001\000\004" +
    "\046\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\051\117\001\001\000\020\040\100\041\115\043\064" +
    "\045\071\047\073\051\066\062\062\001\001\000\004\050" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\040\113\051\066\062\062\001\001\000\010\040\111\051" +
    "\066\062\062\001\001\000\010\040\107\051\066\062\062" +
    "\001\001\000\002\001\001\000\004\050\110\001\001\000" +
    "\002\001\001\000\004\050\112\001\001\000\002\001\001" +
    "\000\004\050\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\040\100\041\122\043\064\045\071\047\073\051" +
    "\066\062\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\040\100\047" +
    "\133\051\066\062\062\001\001\000\002\001\001\000\012" +
    "\040\100\047\131\051\066\062\062\001\001\000\004\046" +
    "\132\001\001\000\002\001\001\000\004\046\134\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\040\100\041\142" +
    "\043\064\045\071\047\073\051\066\062\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\040\100\045\160" +
    "\047\073\051\066\062\062\001\001\000\014\040\100\045" +
    "\157\047\073\051\066\062\062\001\001\000\014\040\100" +
    "\045\156\047\073\051\066\062\062\001\001\000\002\001" +
    "\001\000\014\040\100\045\155\047\073\051\066\062\062" +
    "\001\001\000\014\040\100\045\154\047\073\051\066\062" +
    "\062\001\001\000\014\040\100\045\153\047\073\051\066" +
    "\062\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\166\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\040\100\043\175\045" +
    "\071\047\073\051\066\062\062\001\001\000\002\001\001" +
    "\000\016\040\100\043\173\045\071\047\073\051\066\062" +
    "\062\001\001\000\004\042\174\001\001\000\002\001\001" +
    "\000\004\042\176\001\001\000\002\001\001\000\004\067" +
    "\200\001\001\000\004\065\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\207\001\001\000\044\003" +
    "\042\007\033\015\044\016\205\017\037\021\047\022\043" +
    "\023\034\033\046\036\041\037\013\051\032\054\024\057" +
    "\035\073\021\074\006\075\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\210\001\001\000\004\065" +
    "\211\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\040" +
    "\100\041\217\043\064\045\071\047\073\051\066\053\220" +
    "\062\062\063\221\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\040\100" +
    "\041\217\043\064\045\071\047\073\051\066\062\062\063" +
    "\224\001\001\000\002\001\001\000\004\067\226\001\001" +
    "\000\002\001\001\000\004\066\230\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\040\100\041\246\043\064\045\071\047\073\051\066" +
    "\062\062\001\001\000\020\040\100\041\245\043\064\045" +
    "\071\047\073\051\066\062\062\001\001\000\022\040\100" +
    "\041\244\043\064\045\071\047\073\051\243\062\062\075" +
    "\242\001\001\000\002\001\001\000\004\071\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\040\100\041\250\043\064\045\071\047\073\051\066" +
    "\062\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\003\042\007\033\015\044\016\253\017\037\021\047" +
    "\022\043\023\034\033\046\036\041\037\013\051\032\054" +
    "\024\057\035\073\021\074\006\075\031\001\001\000\004" +
    "\101\254\001\001\000\002\001\001\000\020\040\100\041" +
    "\256\043\064\045\071\047\073\051\066\062\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\040\100\041\267\043" +
    "\064\045\071\047\073\051\066\052\270\062\062\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\040\100\041\267\043\064\045\071\047\073\051\066" +
    "\052\277\062\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\040\100\041\267\043\064\045\071\047\073" +
    "\051\066\052\276\062\062\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\002\301\003\015\004\012\005\016" +
    "\037\013\054\024\073\021\074\006\106\026\107\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\074\311\076\313\077\310\100\312\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\074\311\076\313\077\315\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\321\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\003\042\007\033\015\044\016\324\017\037\021\047\022" +
    "\043\023\034\033\046\036\041\037\013\051\032\054\024" +
    "\057\035\073\021\074\006\075\031\001\001\000\002\001" +
    "\001\000\004\061\326\001\001\000\002\001\001\000\012" +
    "\074\311\076\313\077\310\100\330\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\040\100\041\336\043\064\045\071\047\073\051" +
    "\243\062\062\075\335\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\040\100\041\342\043" +
    "\064\045\071\047\073\051\243\062\062\075\341\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    /**********************************************************************
     *             Creació i Gestió de la Taula de Simbols                *
     **********************************************************************/

    Taula taula_simbols = new Taula();

    /**********************************************************************
     *             Tot sobre el codi Intermedi                            *
     **********************************************************************/

    //Pila de subprograma actual

    Stack<Integer> pila_procediments = new Stack<>();
    Integer etiquetes = 0; //anirà incrementant
    TaulaIntermedi taula_intermedi = new TaulaIntermedi();
    TaulaVariables taula_variables = new TaulaVariables();
    TaulaProcediments taula_procediments = new TaulaProcediments();
    Stack<Integer> pila_pendents = new Stack<>();

    public Integer novavar(Boolean temporal,Integer ocupacio){ //revisar lo des parametres
        if(temporal){
            new Dvar(); //incrementam n antes de afegir-ho
        }
        if(!pila_procediments.isEmpty()){
            Integer procediment = pila_procediments.peek();
            taula_variables.afegeix_variable(procediment,null,ocupacio);
        }else{
            taula_variables.afegeix_variable(null,null,ocupacio);
        }
        return taula_variables.n(); //darrer n
    }

    public Integer novavar(Boolean temporal){ //revisar lo des parametres
        if(temporal){
            new Dvar(); //incrementam n antes de afegir-ho
        }
        if(!pila_procediments.isEmpty()){
            Integer procediment = pila_procediments.peek();
            taula_variables.afegeix_variable(procediment,null,null);
        }else{
            taula_variables.afegeix_variable(null,null,null);
        }
        return taula_variables.n(); //darrer n
    }

    public void nouproc(Integer nivell, Integer parametres, Integer etiqueta, Integer np){
        Integer ocupacio = ocupacio(np);
        taula_procediments.afegeix_procediment(np,etiqueta,ocupacio,parametres);
    }

    public Integer ocupacio(Integer np){
        ArrayList<Entrada> llista = taula_variables.getFiles();
        Iterator <Entrada> it = llista.iterator();
        Integer ocupacio =0;

        while(it.hasNext()){
            Entrada ent = (Entrada) it.next();
            if(ent.getSubprograma() == np){
                if(ent.ocupacio()!=null){
                  ocupacio += ent.ocupacio();  
                } 
            }
        }

        return ocupacio;
    }

    public void mostra_intermedi() throws IOException {
      FileWriter sortidap;
      BufferedWriter sortida;

      sortidap = new FileWriter("Intermedi.txt");
      sortida = new BufferedWriter(sortidap);
    

    ArrayList<Sentencia> llista = taula_intermedi.get_Llista();
    Iterator<Sentencia> iterator = llista.iterator();
    while (iterator.hasNext()) {
      Sentencia s = iterator.next();
      try {
        sortida.write(
            "Operacio: " + s.getOperacio() + " Op1: " + s.getOp1() + " Op2: " + s.getOp2() + " Desti: " + s.getDesti());
            sortida.write("\n");
      } catch (IOException error) {
        System.out.println(error.toString());
      }
    }

    try {
      sortida.close();
    } catch (IOException error) {
      System.out.println(error.toString());
    }
  }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    private boolean errorSemantic = false;

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);

    }

    public void report_error_semantic(String message,Location left, Location right){
        System.err.println("ERROR "+message+" desde: "+left.getLine()+"/"+left.getColumn()+" fins: "+right.getLine()+"/"+right.getColumn());

    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROG ::= M0 PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROG -> M0 PROGRAMA");
        if(errorSemantic){
            taula_intermedi.clear();
        }
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROG",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= DECL PUNTICOMA PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> DECL PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= PROCEDIMENT PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> PROCEDIMENT PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PROGRAMA ::= MAIN 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // M0 ::= 
            {
              Object RESULT =null;
		System.out.println("Inicialització");
        taula_simbols.posar("ent", new Dtipus(new Escalar("ts_enter", Integer.MIN_VALUE, Integer.MAX_VALUE,4)));
        taula_simbols.posar("decimal", new Dtipus(new Escalar("ts_decimal", (int)Double.MIN_VALUE, (int)Double.MAX_VALUE,4)));
        //taula_simbols.posar("cad", new Dtipus(new DefinicioTipus("ts_cadena")));
        taula_simbols.posar("bool", new Dtipus(new Escalar("ts_boolea", -1, 0,1)));
        taula_simbols.posar("car", new Dtipus(new Escalar("ts_enter", 0, 255,2)));
        taula_simbols.posar("tupla", new Dtipus(new Tupla()));
        taula_simbols.posar("VER", new Dconst(-1,"boolea"));
        taula_simbols.posar("FALS", new Dconst(0,"boolea"));
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M0",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= DECL_TUPLA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= DECL_TIPUS 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DECL ::= DECL_CONST 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DECL ::= error PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // M1 ::= 
            {
              Object RESULT =null;
		System.out.println("Reiniciar Error Semantic");
        errorSemantic = false;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M1",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIF ::= REDEF_TUPLA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REDEF_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIF ::= MODIF_TIPUS 
            {
              Object RESULT =null;
		System.out.println("MODIF -> MODIF_TIPUS PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIES ::= SENT SENTENCIES 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> SENT SENTENCIES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIES ::= 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= DECL PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> DECL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= MODIF PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> MODIF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= MENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= FMENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= IF 
            {
              Object RESULT =null;
		System.out.println("SENT -> IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= CRIDA_PROC PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= FOR 
            {
              Object RESULT =null;
		System.out.println("SENT -> FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= SORTIDAS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> SORTIDAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROCEDIMENT_1 ::= metode ID LPAREN ARGS RPAREN 
            {
              SimbolProcediment2 RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolArgs a = (SimbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("PROCEDIMENT_1");

                    if(!errorSemantic){
                        String nom = (String) i.valor;
                        Stack<KeyValor> llista = a.getLlista();

                        Dproc procediment = new Dproc();
                        Boolean bol = taula_simbols.posar(nom, procediment);

                        if(bol == false){
                            report_error_semantic("No es pot crear el procediment amb nom "+(String)i.valor+" ja hi un altre component amb aquest nom", i.esquerre,i.dreta);
                            errorSemantic = true;
                        }else{
                            Integer par = 0;

                            Integer etiqueta = etiquetes++;
                            taula_intermedi.genera(Operacio.skip,null,null,etiqueta);
                            
                            while(!llista.isEmpty()){
                                    KeyValor k = llista.pop();
                                    String id = k.key; //nom del paràmetre
                                    String tipus = k.tipus; //valor o variable a afegir

                                    Darg g = new Darg(tipus,id);
                                    bol = taula_simbols.posarparam(nom,id,g);
                                    if(bol == false){
                                        report_error_semantic("Ja hi ha un argument amb el nom "+id+" al subprograma "+(String) i.valor, i.esquerre,i.dreta);
                                        errorSemantic = true;
                                        break;
                                    }
                                    nom += "_"+tipus;
                                    par++;
                            }

                            RESULT = new SimbolProcediment2(taula_simbols.getN(),etiqueta,par,procediment.np());

                            taula_simbols.entra_bloc();

                            Dada2 dada = taula_simbols.primer_parametre(nom);
                            while(dada!=null){
                                String idparam = dada.idcamp();
                                Darg d = (Darg) dada.td();

                                Dvar var = new Dvar();
                                Integer n = novavar(false);

                                Dargin arg = new Dargin(var.getMy_nv(), d.tipus());
                                taula_intermedi.genera(Operacio.pmb,null,null,var.getMy_nv());
                                taula_simbols.posar(idparam, arg);
                                dada = dada.next();
                            }

                            pila_procediments.push(procediment.np());
                        }
                    }   

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT_1",68, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROCEDIMENT_2 ::= metode TIPUS ID LPAREN ARGS RPAREN 
            {
              SimbolProcediment2 RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolArgs a = (SimbolArgs)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("PROCEDIMENT_2");
                        if(!errorSemantic){
                            String nom = (String) i.valor;
                            Stack<KeyValor> llista = a.getLlista();

                            Dproc procediment = new Dproc(t.getTipus());
                            Boolean bol = taula_simbols.posar(nom, procediment);

                            if(bol == false){
                                report_error_semantic("No es pot crear el procediment amb nom "+(String)i.valor+" ja hi un altre component amb aquest nom", i.esquerre,i.dreta);
                                errorSemantic = true;
                            }else{
                                Integer par = 0;

                                Integer etiqueta = etiquetes++;
                                taula_intermedi.genera(Operacio.skip,null,null,etiqueta);

                                while(!llista.isEmpty()){
                                        KeyValor k = llista.pop();
                                        String id = k.key; //nom del paràmetre
                                        String tipus = k.tipus; //valor o variable a afegir

                                        Darg g = new Darg(tipus,id);
                                        bol = taula_simbols.posarparam(nom,id,g);
                                        if(false){
                                            report_error_semantic("Ja hi ha un argument amb el nom "+id+" al subprograma "+(String) i.valor, i.esquerre,i.dreta);
                                            errorSemantic = true;
                                            break;
                                        }
                                        nom += "_"+tipus;
                                        par++;
                                }

                                Integer nivell = taula_simbols.getN();

                                taula_simbols.entra_bloc();

                                Dada2 dada = taula_simbols.primer_parametre(nom);
                                while(dada!=null){
                                    String idparam = dada.idcamp();
                                    Darg d = (Darg) dada.td();

                                    Dvar var = new Dvar();
                                    Integer n = novavar(false);
                                    Dargin arg = new Dargin(var.getMy_nv(), d.tipus());
                                    taula_intermedi.genera(Operacio.pmb,null,null,var.getMy_nv());
                                    taula_simbols.posar(idparam, arg);
                                    dada = dada.next();
                                }
                                
                                pila_procediments.push(procediment.np());
                                RESULT = new SimbolProcediment2(t.getTipus(),nivell,etiqueta,par,procediment.np());    
                            }   
                        }
                                        

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT_2",69, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // PROCEDIMENT ::= PROCEDIMENT_1 LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolProcediment2 p = (SimbolProcediment2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		System.out.println("PROC");
                    if(!errorSemantic){
                        Integer n = p.getNivell();
                        Integer parametres = p.getParametres();
                        Integer etiqueta = p.getEtiqueta();
                        Integer np = p.getNp();

                        taula_intermedi.genera(Operacio.retorn,null,null,np);

                        nouproc(n,parametres,etiqueta,np);
                        taula_simbols.surtbloc();
                        pila_procediments.pop();  
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PROCEDIMENT ::= PROCEDIMENT_2 LCLAUDAT SENTENCIES RETURN RCLAUDAT 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolProcediment2 p = (SimbolProcediment2)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolReturn r = (SimbolReturn)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("PROC");
                    if(!errorSemantic){
                        Dtipus ti = (Dtipus) taula_simbols.consulta(p.getTipus());
                        if(ti.dt().tipus_subjacent()!=r.getExpresio().getTsb()){
                            report_error_semantic("El tipus de retorn es diferent del procediment", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                        }

                        Integer n = p.getNivell();
                        Integer parametres = p.getParametres();
                        Integer etiqueta = p.getEtiqueta();
                        Integer np = p.getNp();


                        taula_intermedi.genera(Operacio.retorn,r.getExpresio().getR(),null,np);
                        nouproc(n,parametres,etiqueta,np);
                        taula_simbols.surtbloc();
                        pila_procediments.pop();  
                    }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETURN ::= retorna E PUNTICOMA 
            {
              SimbolReturn RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("RETURN -> retorna E");
        RESULT = new SimbolReturn(e,e.getEsquerre(),e.getDreta());
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARGS ::= ARGS_1 
            {
              SimbolArgs RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolArgsp a = (SimbolArgsp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("ARGS -> ARGS_1");
                RESULT = new SimbolArgs(a.getLlista());
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARGS ::= 
            {
              SimbolArgs RESULT =null;
		System.out.println("@");
                RESULT = new SimbolArgs();
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARGS_1 ::= ARG COMA ARGS_1 
            {
              SimbolArgsp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolArg a = (SimbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolArgsp b = (SimbolArgsp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("ARGS_1 -> ARG COMA ARGS_1");
                b.afegeix(a.getId(),a.getTipus());
                RESULT = b;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARGS_1 ::= ARG 
            {
              SimbolArgsp RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolArg a = (SimbolArg)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("ARGS_1 -> ARG");
                SimbolArgsp p = new SimbolArgsp();
                p.afegeix(a.getId(),a.getTipus());
                RESULT = p;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARG ::= TIPUS ID 
            {
              SimbolArg RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("ARG -> TIPUS ID");
    RESULT = new SimbolArg((String)d.valor,t.getTipus());
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CRIDA_PROC ::= R 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("CRIDA_PROC");
            if(!errorSemantic){
                if(r.getMvp() =="procc"){

                }else{
                    report_error_semantic("No es pot posar una referència tota sola", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                }        
            }
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDA_PROC",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MAIN ::= metode main LPAREN M2 RPAREN LCLAUDAT SENTENCIES RCLAUDAT M3 
            {
              Object RESULT =null;
		System.out.println("MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // M2 ::= 
            {
              Object RESULT =null;
		System.out.println("M2");
    taula_simbols.entra_bloc();
    taula_intermedi.genera(Operacio.skip,null,null,-1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M2",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // M3 ::= 
            {
              Object RESULT =null;
		System.out.println("M3");
    taula_simbols.surtbloc();
    taula_intermedi.genera(Operacio.retorn,null,null,-1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M3",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPUS ::= decimal 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> decimal");
                RESULT = new SimbolTipus("decimal");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPUS ::= enter 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> enter");
                RESULT = new SimbolTipus("ent");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPUS ::= logic 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> logic");
                RESULT = new SimbolTipus("bool");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPUS ::= caracter 
            {
              SimbolTipus RESULT =null;
		System.out.println("TIPUS -> caracter");
                RESULT = new SimbolTipus("car");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MENTRE ::= mentres M4 CONDICIO fer RESTA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolCondicio c = (SimbolCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolResta r = (SimbolResta)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("MENTRE");
            if(!errorSemantic){
                Integer nostra = etiquetes++;
                Integer fin = etiquetes++;
                taula_intermedi.afegeix_Llista(c.getLlista());
                Integer n = novavar(true,1);
                taula_intermedi.genera(Operacio.copia_valor,0,null,n);
                taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),fin);
                taula_intermedi.afegeix_Llista(r.getLlista());
                taula_intermedi.genera(Operacio.salt_incondicional,null,null,nostra);
                taula_intermedi.genera(Operacio.skip,null,null,fin);
                taula_intermedi.canvia_etiqueta(nostra,pila_pendents.pop());
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MENTRE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // M4 ::= 
            {
              Object RESULT =null;
		System.out.println("M4");
        taula_intermedi.genera(Operacio.skip,null,null,-1);
        pila_pendents.push(taula_intermedi.size()-1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M4",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF ::= si CONDICIO RESTA IF_1 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolCondicio c = (SimbolCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolResta r = (SimbolResta)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolIf1 i = (SimbolIf1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("IF");
                if(!errorSemantic){
                        if(i!=null){
                            Integer et = i.getEtiqueta(); //etiqueta final
                            Integer nostra = etiquetes++;
                            ArrayList<Sentencia> llista1 = c.getLlista();
                            ArrayList<Sentencia> llista2 = r.getLlista();
                            ArrayList<Sentencia> llista3 = new ArrayList<>();
                            llista3.addAll(taula_intermedi.get_Llista());
                            taula_intermedi.clear();

                            taula_intermedi.set_Llista(llista1);
                            Integer n = novavar(true,1);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);
                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista2);
                            taula_intermedi.genera(Operacio.salt_incondicional,null,null,et);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);

                            taula_intermedi.afegeix_Llista(llista3);   
                        }else{
                            Integer nostra = etiquetes++;

                            ArrayList<Sentencia> llista1 = c.getLlista();
                            ArrayList<Sentencia> llista2 = r.getLlista();
                            taula_intermedi.clear();

                            taula_intermedi.set_Llista(llista1);
                            Integer n = novavar(true,1);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);
                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista2);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);
                        }
                    }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CONDICIO ::= LPAREN E RPAREN 
            {
              SimbolCondicio RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        System.out.println("CONDICIO");
        if(e.getTsb()!="ts_boolea"){
            report_error_semantic("La expresió ha de ser de tipus booleà", e.getEsquerre(),e.getDreta());
            errorSemantic = true;
        }else{ 
            RESULT = new SimbolCondicio(taula_intermedi.get_Llista(),e.getR());
            taula_intermedi.clear();
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONDICIO",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // RESTA ::= LCLAUDAT SENTENCIES RCLAUDAT 
            {
              SimbolResta RESULT =null;
		
    System.out.println("RESTA");
    RESULT = new SimbolResta(taula_intermedi.get_Llista());
    taula_intermedi.clear();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RESTA",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF_1 ::= sino si CONDICIO RESTA IF_1 
            {
              SimbolIf1 RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolCondicio c = (SimbolCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolResta r = (SimbolResta)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolIf1 i = (SimbolIf1)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("IF_1");
                if(!errorSemantic){
                        if(i!=null){
                            Integer et = i.getEtiqueta(); //etiqueta final
                            Integer nostra = etiquetes++;
                            
                            ArrayList<Sentencia> llista1 = r.getLlista();
                            ArrayList<Sentencia> llista2 = c.getLlista();
                            ArrayList<Sentencia> llista3 = new ArrayList<>();
                            llista3.addAll(taula_intermedi.get_Llista());
                            taula_intermedi.clear();

                            taula_intermedi.afegeix_Llista(llista2);
                            Integer n = novavar(true,1);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);

                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista1);
                            taula_intermedi.genera(Operacio.salt_incondicional,null,null,et);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);
                            taula_intermedi.afegeix_Llista(llista3);
                            RESULT = new SimbolIf1(et);  
                        }else{
                            Integer nostra = etiquetes++;
                            ArrayList<Sentencia> llista1 = r.getLlista();
                            ArrayList<Sentencia> llista2 = c.getLlista();
                            taula_intermedi.clear();

                            taula_intermedi.afegeix_Llista(llista2);
                            Integer n = novavar(true,1);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);

                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista1);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);
                            RESULT = new SimbolIf1(nostra);
                        }
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF_1 ::= sino LCLAUDAT SENTENCIES RCLAUDAT 
            {
              SimbolIf1 RESULT =null;
		System.out.println("sino");
                taula_intermedi.genera(Operacio.skip,null,null,etiquetes);
                RESULT = new SimbolIf1(etiquetes++);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF_1 ::= 
            {
              SimbolIf1 RESULT =null;
		System.out.println("@");
                RESULT = new SimbolIf1();
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FMENTRE ::= fer M4 RESTA mentres CONDICIO PUNTICOMA 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolResta r = (SimbolResta)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolCondicio c = (SimbolCondicio)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("FMENTRE");
            if(!errorSemantic){
                Integer nostra = etiquetes++;
                taula_intermedi.afegeix_Llista(r.getLlista());
                taula_intermedi.afegeix_Llista(c.getLlista());
                Integer n = novavar(true,1);
                taula_intermedi.genera(Operacio.copia_valor,-1,null,n);
                taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                taula_intermedi.canvia_etiqueta(nostra,pila_pendents.pop());
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FMENTRE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ENTRADAS ::= entradaS LPAREN TIPUS RPAREN 
            {
              SimbolEntrada RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("ENTRADAS");
            if(!errorSemantic){
                Dtipus d = (Dtipus) taula_simbols.consulta(t.getTipus());
                Escalar e = (Escalar) d.dt();
                Integer n = novavar(true,e.getBytes());
                RESULT = new SimbolEntrada(t.getTipus(),d.dt().tipus_subjacent(),n,s.esquerre,r.dreta);
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADAS",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SORTIDAS ::= sortidaS LPAREN E RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("SORTIDAS");
        if(!errorSemantic){
            if((e.getTsb()=="ts_nul")&&(e.getTsb()=="ts_record")){
                report_error_semantic("Tipus erroni de sortida de teclat", e.getEsquerre(),e.getDreta());
                errorSemantic = true;
            } 
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SORTIDAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECL_CONST ::= constant TIPUS ID ASSIGN E 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_CONST -> constant TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                    errorSemantic = true;
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Integer n = novavar(true,taula_variables.get_ocupacio(e.getR()));
                    Boolean bol = taula_simbols.posar((String)a.valor,new Dconst(ti,n));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //*****************Intermedi********************
                        taula_intermedi.genera(Operacio.copia,e.getR(),null,n);
                        //****************************************************
                    }
                }
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECL_CONST ::= constant TIPUS ID ASSIGN MODIF_TIPUS 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_CONST -> constant TIPUS A ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat",a.esquerre,a.dreta);
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificador
                    Integer n = novavar(true,taula_variables.get_ocupacio(m.getR()));
                    Boolean bol = taula_simbols.posar((String)a.valor,new Dconst(ti,n));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //*****************Intermedi********************
                        taula_intermedi.genera(Operacio.copia,m.getR(),null,n);
                        //****************************************************
                    }
                }
            }    
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECL_TIPUS ::= TIPUS ID 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_TIPUS -> TIPUS ID ");
            String tipus = t.getTipus(); //tipus que afegirem als identificadors
            Dvar d = new Dvar(tipus);
            Boolean bol = taula_simbols.posar((String) a.valor,d);
            if(!bol){
                report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                errorSemantic = true;
            }
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECL_TIPUS ::= TIPUS ID ASSIGN E 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_TIPUS -> TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Dvar var = new Dvar(ti);
                    Boolean bol = taula_simbols.posar((String) a.valor,var);
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //*****************Intermedi********************
                        Integer n = novavar(false);
                        taula_intermedi.genera(Operacio.copia,e.getR(),null,var.getMy_nv());
                        //****************************************************
                    }

                }
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECL_TIPUS ::= TIPUS ID ASSIGN MODIF_TIPUS 
            {
              SimbolDeclTipus RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		SimbolTipus t = (SimbolTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("DECL_TIPUS -> TIPUS ID ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat",a.esquerre,a.dreta);
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Dvar var = new Dvar(ti);
                    Boolean bol = taula_simbols.posar((String) a.valor,var);
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //****************************Intermedi**********************************
                        //Integer n = novavar(false);
                        taula_intermedi.genera(Operacio.copia,m.getR(),null,var.getMy_nv());
                        //***********************************************************************
                    }

                }
            }
        
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // MODIF_TIPUS ::= R I_1 
            {
              SimbolModifTipus RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolI i = (SimbolI)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("MODIF_TIPUS -> R I_1");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{
                if(r.getMvp()=="const"){ //malament
                    report_error_semantic("No es pot modificar una constant", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else if(r.getMvp()=="procc"){
                    report_error_semantic("No es pot modificar un procediment", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else{
                    switch(i.getOperacio()){
                    case "as": //cas ++
                        if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_decimal")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("Tipus equivocat per a la operació ++", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            //******************Intermedi******************
                            Integer n = novavar(true,4);
                            taula_intermedi.genera(Operacio.copia_valor,1,null,n);
                            taula_intermedi.genera(Operacio.suma,r.getR(),n,r.getR()); //r.getR()++
                            //********************************************
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());
                        }
                        break;
                    case "ar": //--
                        if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_decimal")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("Tipus equivocat per a la operació --", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            //******************Intermedi******************
                            Integer n = novavar(true,4);
                            taula_intermedi.genera(Operacio.copia_valor,1,null,n);
                            taula_intermedi.genera(Operacio.resta,r.getR(),n,r.getR()); //r.getR()--
                            //********************************************
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());
                        }
                        break;
                    case "si": //+=
                        if((i.getTsb()!="ts_enter")&&(i.getTsb()!="ts_caracter")&&(i.getTsb()!="ts_decimal")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: +=", i.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_caracter")&&(r.getTsb()!="ts_decimal")){
                            report_error_semantic("La Referència te un tipus equivocat per l'operació: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                            }else{
                                //******************Intermedi******************
                                taula_intermedi.genera(Operacio.suma,r.getR(),i.getR(),r.getR()); //r.getR() += I
                                //********************************************

                                RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());  
                            }
                        }
                        break;
                    case "ri": //-=
                        if((i.getTsb()!="ts_enter")&&(i.getTsb()!="ts_caracter")&&(i.getTsb()!="ts_decimal")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: -=", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_caracter")&&(r.getTsb()!="ts_decimal")){
                            report_error_semantic("La Referència te un tipus equivocat per l'operació: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                            }else{
                                //******************Intermedi******************
                                taula_intermedi.genera(Operacio.resta,r.getR(),i.getR(),r.getR()); //r.getR() += I
                                //********************************************
                                RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR()); 
                            }
                        }
                        break;
                    case "ig":
                        if(!(i.getTsb().equals(r.getTsb()))){
                            report_error_semantic("El tipus de la referència i la expresió no coincideixen amb l'operacio: =", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            //******************Intermedi******************
                                taula_intermedi.genera(Operacio.copia,i.getR(),null,r.getR()); //r.getR() += I
                            //********************************************
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());
                        }
                        break;
                }
                }
                
            }

            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MODIF_TIPUS ::= R ASSIGN MODIF_TIPUS 
            {
              SimbolModifTipus RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolModifTipus m = (SimbolModifTipus)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("MODIF_TIPUS -> R ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{

                if(!m.getTsb().equals(r.getTsb())){
                    report_error_semantic("El tipus de la referència i la modificacio no coincideixen amb l'operacio: =", r.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else{
                    //******************Intermedi******************
                        taula_intermedi.genera(Operacio.copia,m.getR(),null,r.getR()); //r.getR() += I
                    //********************************************
                    RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),m.getDreta(),r.getR()); 
                }
            }
            
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // R ::= ID 
            {
              SimbolR RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("R -> ID ");
        Descripcio descripcio = taula_simbols.consulta((String)d.valor);
        if(descripcio == null){ //no es troba a la taula de simbols
            report_error_semantic("Undefined id \""+d.valor+"\"", d.esquerre,d.dreta);
            errorSemantic = true;
            RESULT  = new SimbolR();
        }else{ //no hem considerat els DargIns
            if(descripcio instanceof Dvar){ //variable
                Dvar var = (Dvar) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR
                RESULT = new SimbolR((String)d.valor,(String)d.valor,tipus.dt().tipus_subjacent(),var.tipus(),"var",var.getMy_nv(),0,var.tipus(),d.esquerre,d.dreta);
            }else if(descripcio instanceof Dconst){ //variable o tupla
                Dconst c = (Dconst) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(c.tipus()); //ALERTA EN NO TROBAR

                
                //novavar i afegir valor de la constant
                /*
                Integer n = novavar(true);
                if(c.tipus()=="tupla"){
                    taula_intermedi.genera(Operacio.copia,(String)d.valor,null,n); // t1 = a = tupla a
                }else{
                    taula_intermedi.genera(Operacio.copia,(String)d.valor,null,n); 
                }*/
                
                RESULT = new SimbolR((String)d.valor,(String)d.valor,tipus.dt().tipus_subjacent(),c.tipus(),"const",c.getTemporal(),0,c.tipus(),d.esquerre,d.dreta);
                //el tipus pot ser tupla També
                //això es per quan ens interessa ficar una tupla dins una tupla o un subprograma
                //id(a) on 'a' és una tupla.
            }else if(descripcio instanceof Dargin){
                Dargin var = (Dargin) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR
                RESULT = new SimbolR((String)d.valor,(String)d.valor,tipus.dt().tipus_subjacent(),var.tipus(),"var",var.nv(),0,var.tipus(),d.esquerre,d.dreta);

            }else{ //si no es tracta ni d'una variable, ni d'una constant, error
                report_error_semantic("ID es un procediment \""+d.valor+"\"", d.esquerre,d.dreta);
                errorSemantic = true;
                RESULT  = new SimbolR();
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // R ::= ID LPAREN VALORS RPAREN 
            {
              SimbolR RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("R -> ID (VALORS)"); //subprograma
        //1: mirar si id es un subprograma, amb els valors
        //2: comprovar si el subprograma te un tipus subjacent
        //si en té l'afegim a R amb la resta de informació

        if(v == null){ //crida a un subprograma fora paràmetres
           Descripcio descripcio = taula_simbols.consulta((String)id.valor);
           if(descripcio == null){
            report_error_semantic("Undefined id \""+id.valor+"\"", id.esquerre,id.dreta);
            errorSemantic = true;
            RESULT  = new SimbolR();
            }else{
                if(descripcio instanceof Dproc){
                    Dproc proc = (Dproc) descripcio;
                    String tipus = proc.getTipus(); //miram si el procediment té algun tipus de retorn
                    if(tipus == "id_nula"){
                      RESULT = new SimbolR((String)id.valor,"ts_nul","id_nula","procc",id.esquerre,id.dreta);
                      taula_intermedi.genera(Operacio.crida,null,null,proc.np());  
                    }else{
                        Descripcio t = taula_simbols.consulta(proc.getTipus());
                        if(t instanceof Dtipus){ //no fa falta crec
                            Dtipus t1 = (Dtipus) t;

                            //**********************Intermedi*************************
                            Integer nova = novavar(true);
                            taula_intermedi.genera(Operacio.crida,nova,null,proc.np());
                            //******************************************************** 

                            RESULT = new SimbolR((String)id.valor,t1.dt().tipus_subjacent(),tipus,"procc",nova,0,tipus,id.esquerre,id.dreta);
                        }else{
                            report_error_semantic("El tipus del subprograma \""+id.valor+"\" es erroni", id.esquerre,id.dreta);
                            errorSemantic = true;
                            RESULT  = new SimbolR();
                        }
                    }
                    
                }else{
                    report_error_semantic("L'ID \""+id.valor+"\" no és un subprograma", id.esquerre,id.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }
            } 
        }else{
            ArrayList<SimbolE> llista = v.getLlista(); //llista amb els paràmetres
            Iterator <SimbolE> it = llista.iterator();
            String nom = (String)id.valor;
            while(it.hasNext()){
                SimbolE e = it.next();
                if(e.getTsb() == "ts_nul"){
                    report_error_semantic("El paràmetre no té el tipus adecuat per un subprograma", e.getEsquerre(),e.getDreta());
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }else{
                    switch(e.getTsb()){
                        case "ts_boolea":
                                nom += "_"+"bool";
                                break;
                        case "ts_cadena":
                                nom+= "_"+"cad";
                                break;
                        case "ts_decimal":
                                nom+= "_"+"decimal";
                                break;
                        case "ts_enter":
                                nom+= "_"+"ent";
                                break;
                        case "ts_caracter":
                                nom+= "_"+"car";
                                break;
                        case "ts_record":
                                nom+= "_"+"tupla";
                                break;
                    }
                    taula_intermedi.genera(Operacio.param_simple,null,null,e.getR());
                }
            }
            Descripcio descripcio = taula_simbols.consulta(nom);
            if(descripcio == null){
                report_error_semantic("El subprograma amb aquests paràmetres no existeix", id.esquerre,r.dreta);
                errorSemantic = true;
                RESULT  = new SimbolR();
            }else{
                if(descripcio instanceof Dproc){
                    Dproc proc = (Dproc) descripcio;
                    if(proc.getTipus() == "id_nula"){
                        RESULT = new SimbolR(nom,"ts_nul","id_nula","procc",id.esquerre,r.dreta);
                        taula_intermedi.genera(Operacio.crida,null,null,proc.np());
                    }else{
                      Dtipus tipus = (Dtipus) taula_simbols.consulta(proc.getTipus()); //alerta
                        //**********************Intermedi*************************
                            Integer nova = novavar(true);
                            taula_intermedi.genera(Operacio.crida,nova,null,proc.np());
                        //******************************************************** 
                        
                        RESULT = new SimbolR(nom,tipus.dt().tipus_subjacent(),proc.getTipus(),"procc",nova,0,proc.getTipus(),id.esquerre,r.dreta);
                    }
                }else{ //per si acàs
                    report_error_semantic("Id no és un subprograma", id.esquerre,r.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // R ::= R PUNT ID 
            {
              SimbolR RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("R -> R PUNT ID "+(String)i.valor);
        if(errorSemantic){
            RESULT  = new SimbolR();
        }else{
            if((r.getMvp()=="const")&&(r.getTsb()=="ts_record")){
                Dcamp c = (Dcamp) taula_simbols.consultacamp(r.getIdb_dreta(),(String)i.valor);
                if(c!=null){
                    Dtipus tipus = (Dtipus) taula_simbols.consulta(c.tipus());
                    Integer despl = c.getDespl();
                    despl += r.getDpc();
                    
                    if(c.tipus()=="tupla"){ //comprovar cas pel intermedi
                        RESULT = new SimbolR(r.getIdb(),c.getIdb(),tipus.dt().tipus_subjacent(),c.tipus(),"const",r.getR(),despl,c.tipus(),r.getEsquerre(),i.dreta);
                    }else{
                        RESULT = new SimbolR(r.getIdb(),(String)i.valor,tipus.dt().tipus_subjacent(),c.tipus(),"var",r.getR(),despl,c.tipus(),r.getEsquerre(),i.dreta);
                    }
                }else{
                    report_error_semantic("Id no es un camp de la tupla: "+r.getIdb_dreta(), i.esquerre,i.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR(); 
                }
            }else{
            report_error_semantic("La referència "+r.getIdb_dreta()+" no és una tupla", r.getEsquerre(),r.getDreta());
                errorSemantic = true;
                RESULT  = new SimbolR(); 
            } 
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("R",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // I_1 ::= AUTOSUM 
            {
              SimbolI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> AUTOSUM");
    RESULT = new SimbolI("as","id_nula","ts_nul",a.esquerre,a.dreta);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // I_1 ::= AUTOSUB 
            {
              SimbolI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> AUTOSUB");
    RESULT = new SimbolI("ar","id_nula","ts_nul",a.esquerre,a.dreta);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // I_1 ::= SUMAHI E 
            {
              SimbolI RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> SUMAHI E");
        if(errorSemantic){
        RESULT = new SimbolI();
        }else{
        RESULT = new SimbolI("si",e.getTipus(),e.getTsb(),s.esquerre,e.getDreta(),e.getR());   
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // I_1 ::= RESTAHI E 
            {
              SimbolI RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> RESTAHI E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ri",e.getTipus(),e.getTsb(),r.esquerre,e.getDreta(),e.getR());   
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // I_1 ::= ASSIGN E 
            {
              SimbolI RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("I_1 -> ASSIGN E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ig",e.getTipus(),e.getTsb(),a.esquerre,e.getDreta(),e.getR());   
        }
    
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORS ::= VALS 
            {
              SimbolValors RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALORS -> VALS");
        RESULT = v;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORS ::= 
            {
              SimbolValors RESULT =null;
		System.out.println("VALORS -> @");
            RESULT = new SimbolValors();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALS ::= E 
            {
              SimbolValors RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALORS -> E");
        if(errorSemantic){ //error a E
            RESULT = new SimbolValors();
        }else{
            SimbolValors v = new SimbolValors();
            v.afegirE(e); //afegim e
            RESULT = v;
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // VALS ::= E COMA VALS 
            {
              SimbolValors RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValors v = (SimbolValors)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALORS -> E  COMA VALORS");
            if(errorSemantic){
                RESULT = new SimbolValors();
            }else{
                v.afegirE(e); //alreves, hauriem d'agafar la llista, i després ficarli
                RESULT = new SimbolValors(v.getLlista());
            }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // VALS_TUPLA ::= E COMA VALS_TUPLA 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix("buit", e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALS_TUPLA ::= E DOSPUNTS ID COMA VALS_TUPLA 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E DOSPUNTS ID COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix((String)d.valor, e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALS_TUPLA ::= E 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix("buit", e);
                    RESULT = sim;
                }  
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // VALS_TUPLA ::= E DOSPUNTS ID 
            {
              SimbolValsTupla RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("VALS_TUPLA -> E DOSPUNTS ID");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix((String) d.valor, e);
                    RESULT = sim;
                }  
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALS_TUPLA",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECL_TUPLA ::= tupla ID LPAREN RPAREN ASSIGN LPAREN VALS_TUPLA RPAREN 
            {
              SimbolDeclTupla RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolValsTupla v = (SimbolValsTupla)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("DECL_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolDeclTupla();
                }else{
                    //Gestió
                    int n =0;
                    Stack<KeyValue> llista = v.getLlista();
                    Integer nv = novavar(true); //per guardar els elements de la tupla
                    Boolean bol = taula_simbols.posar((String)i.valor,new Dconst("tupla",nv)); //mirar si posar es true o false
                    if(bol){
                        //*********Gestió Intermedi************
                        //Integer nv = novavar(true); //per guardar els elements de la tupla
                        Integer n2 =0;
                        //*************************************

                        while(!llista.isEmpty()){
                            KeyValue k = llista.pop();
                            String nom = k.key; //nom del paràmetre
                            SimbolE simbol = k.value; //valor o variable a afegir
                            if(nom == "buit"){ //no té identificador
                                nom = "Item"+n; //nom que li posam als camps que no tenen id
                                n++;
                            }else{
                                n++; 
                            }

                            if(simbol.getTsb()=="ts_record"){

                                taula_intermedi.genera(Operacio.param_compost,1,n2,nv);
                                n2++;
                                taula_intermedi.genera(Operacio.param_compost,simbol.getR(),n2,nv); //op,1,2,3 -> 3[2] = 1
                                n2++;

                                bol = taula_simbols.posarcamp((String)i.valor,nom,new Dcamp(simbol.getIdb(),simbol.getTipus(),n,simbol.getTsb()));
                            }else{
                                taula_intermedi.genera(Operacio.param_compost,0,n2,nv);
                                n2++;
                                taula_intermedi.genera(Operacio.param_compost,simbol.getR(),n2,nv); //op,1,2,3 -> 3[2] = 1
                                n2++;

                                bol = taula_simbols.posarcamp((String)i.valor,nom,new Dcamp(simbol.getTipus(),n,simbol.getTsb()));
                            }
                            if(bol == false){
                                report_error_semantic("El camp amb nom \""+nom+"\" ja existeix", simbol.getEsquerre(),simbol.getDreta());
                                errorSemantic = true;
                                //break; //pensar be
                            }
                        }
                        //no retornam res encara
                    }else{
                        report_error_semantic("La tupla \""+(String)i.valor+"\" ja existeix", i.esquerre,r.dreta);
                        errorSemantic = true;
                    }
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // E ::= T E_1 
            {
              SimbolE RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("E -> T E_1");
    if(errorSemantic){
        RESULT = new SimbolE();
    }else{
        if((e==null)||(e.getTsb()=="ts_nul")){
            RESULT = new SimbolE(t.getIdb(),t.getTsb(),t.getTipus(),t.getMode(),t.getEsquerre(),t.getDreta(),t.getR());
        }else{
           if(t.getTsb()!="ts_boolea"){
                report_error_semantic("L'operand ha de ser de tipus booleà", t.getEsquerre(),t.getDreta());
                errorSemantic = true;
                RESULT = new SimbolE();
            }else{
                e.setTs_heretat("ts_boolea");
                //*********************Intermedi*********************************
                    Integer n1 = novavar(true,1);
                    switch(e.getOperacio()){
                        case ParserSym.AND:
                            taula_intermedi.genera(Operacio.and,t.getR(),e.getR(),n1);
                            break;
                        case ParserSym.OR:
                            taula_intermedi.genera(Operacio.or,t.getR(),e.getR(),n1);
                            break;
                    }
                    //***************************************************************
                RESULT = new SimbolE("ts_boolea","id_nula","moderesult",t.getEsquerre(),e.getDreta(),n1);
            } 
        }
    }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // E_1 ::= AND T E_1 
            {
              SimbolEp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("E_1 -> AND T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació AND", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",t.getDreta(),t.getR());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    e.setTs_heretat("ts_boolea");
                    //*********************Intermedi*********************************
                    Integer n1 = novavar(true,1);
                    switch(e.getOperacio()){
                        case ParserSym.AND:
                            taula_intermedi.genera(Operacio.and,t.getR(),e.getR(),n1);
                            break;
                        case ParserSym.OR:
                            taula_intermedi.genera(Operacio.or,t.getR(),e.getR(),n1);
                            break;
                    }
                    //***************************************************************
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",e.getDreta(),n1);
                }  
            }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // E_1 ::= OR T E_1 
            {
              SimbolEp RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token op = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolT t = (SimbolT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEp e = (SimbolEp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("E_1 -> OR T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació OR", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",t.getDreta(),t.getR());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    e.setTs_heretat("ts_boolea");
                    //*********************Intermedi*********************************
                    Integer n1 = novavar(true,1);
                    switch(e.getOperacio()){
                        case ParserSym.AND:
                            taula_intermedi.genera(Operacio.and,t.getR(),e.getR(),n1);
                            break;
                        case ParserSym.OR:
                            taula_intermedi.genera(Operacio.or,t.getR(),e.getR(),n1);
                            break;
                    }
                    //***************************************************************
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",e.getDreta(),n1);
                }  
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E_1 ::= 
            {
              SimbolEp RESULT =null;
		System.out.println("E_1 -> @");
        RESULT = new SimbolEp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // T ::= N T_1 
            {
              SimbolT RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolTp t = (SimbolTp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T -> N T_1");
    if(errorSemantic){
        RESULT = new SimbolT();
    }else{
        if((t==null)||(t.getTsb() == "ts_nul")){ //venim de Tp -> @
            RESULT = new SimbolT(n.getIdb(),n.getTsb(),n.getTipus(),n.getMode(),n.getEsquerre(),n.getDreta(),n.getR());
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                report_error_semantic("El terminal no es adequat per una operació lògica", n.getEsquerre(),n.getDreta()); //arreglar
                errorSemantic = true;
                RESULT = new SimbolT();
            }else{
                t.setTs_heretat(n.getTsb()); //li afegim per si després hem de fer operacions
                //****************************Intermedi**************************************
                Integer e1 = etiquetes;
                etiquetes++;
                Integer e2 = etiquetes;
                etiquetes++;
                Integer n1 = novavar(true,1);

                switch(t.getOperacio()){
                    case ParserSym.IGIG:
                        taula_intermedi.genera(Operacio.salt_condicional_igual,n.getR(),t.getR(),e1);
                    break;
                    case ParserSym.DIF:
                        taula_intermedi.genera(Operacio.salt_condicional_diferent,n.getR(),t.getR(),e1);
                    break;
                    case ParserSym.MENOR:
                        taula_intermedi.genera(Operacio.salt_condicional_menor,n.getR(),t.getR(),e1);
                    break;
                    case ParserSym.MENORI:
                        taula_intermedi.genera(Operacio.salt_condicional_menorigual,n.getR(),t.getR(),e1);
                    break;
                    case ParserSym.MAJOR:
                        taula_intermedi.genera(Operacio.salt_condicional_major,n.getR(),t.getR(),e1);
                    break;
                    case ParserSym.MAJORI:
                        taula_intermedi.genera(Operacio.salt_condicional_majorigual,n.getR(),t.getR(),e1);
                    break;
                }
                taula_intermedi.genera(Operacio.copia_valor,0,null,n1);
                taula_intermedi.genera(Operacio.salt_incondicional,null,null,e2);
                taula_intermedi.genera(Operacio.skip,null,null,e1);
                taula_intermedi.genera(Operacio.copia_valor,-1,null,n1);
                taula_intermedi.genera(Operacio.skip,null,null,e2);

                //***************************************************************************

                RESULT = new SimbolT("ts_boolea","id_nula","moderesult",n.getEsquerre(),t.getDreta(),n1);
            }   
        }
    }

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // T_1 ::= IGIG N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> IGIG N T_1");
    if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de comparacio", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.IGIG,"moderesult",n.getDreta(),n.getR());
                    }
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // T_1 ::= DIF N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> DIF N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de DIF", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.DIF,"moderesult",n.getDreta(),n.getR());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // T_1 ::= MENOR N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MENOR N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MENOR", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MENORI,"moderesult",n.getDreta(),n.getR());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // T_1 ::= MAJOR N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MAJOR N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MAJOR", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MAJOR,"moderesult",n.getDreta(),n.getR());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // T_1 ::= MENORI N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MENORI N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MENORI", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MENORI,"moderesult",n.getDreta(),n.getR());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // T_1 ::= MAJORI N 
            {
              SimbolTp RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolN n = (SimbolN)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("T_1 -> MAJORI N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MAJORI", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MAJORI,"moderesult",n.getDreta(),n.getR());
                    }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // T_1 ::= 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> @");
        RESULT = new SimbolTp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // N ::= M N_1 
            {
              SimbolN RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("N -> M N_1");
        if(errorSemantic){
            RESULT = new SimbolN();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolN(m.getIdb(),m.getTsb(),m.getTipus(),m.getMode(),m.getEsquerre(),m.getDreta(),m.getR()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((m.getTsb() == "ts_nul")||(m.getTsb()=="ts_boolea")){
                   report_error_semantic("El terminal no té un tipus adequat", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolN(); 
                }else{
                    n.setTs_heretat(m.getTsb());
                    String tsb = n.obtenir_sintetitzat();

                    if(tsb == "ts_nul"){
                            report_error_semantic("No és pot fer una operació amb aquest tipus", m.getEsquerre(),m.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolN();
                    }else{
                        //**************Intermedi******************
                            Integer n1 = novavar(true,4);
                            switch(n.getOperacio()){
                                case ParserSym.ADD:
                                    taula_intermedi.genera(Operacio.suma,m.getR(),n.getR(),n1);
                                    break;
                                case ParserSym.SUB:
                                    taula_intermedi.genera(Operacio.resta,m.getR(),n.getR(),n1);
                                    break;
                            }
                        //*****************************************
                        RESULT = new SimbolN(tsb,"id_nula","moderesult",m.getEsquerre(),n.getDreta(),n1);
                    }
                }
                
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // N_1 ::= ADD M N_1 
            {
              SimbolNp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("N_1 -> ADD M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb() == "ts_nul")||(m.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.ADD,"moderesult",m.getDreta(),m.getR());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb() == "ts_nul")||(m.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 
                        n.setTs_heretat(m.getTsb());
                        String resultat = n.obtenir_sintetitzat();

                        if(resultat == "ts_nul"){
                            report_error_semantic("No és pot fer una operació amb aquest tipus", m.getEsquerre(),m.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolNp();
                        }else{
                            //**************Intermedi******************
                            Integer n1 = novavar(true,4);
                            switch(n.getOperacio()){
                                case ParserSym.ADD:
                                    taula_intermedi.genera(Operacio.suma,m.getR(),n.getR(),n1);
                                    break;
                                case ParserSym.SUB:
                                    taula_intermedi.genera(Operacio.resta,m.getR(),n.getR(),n1);
                                    break;
                            }
                            //*****************************************
                            RESULT = new SimbolNp(resultat,"id_nula",ParserSym.ADD,"moderesult",n.getDreta(),n1);
                        }

                    }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // N_1 ::= SUB M N_1 
            {
              SimbolNp RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolM m = (SimbolM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolNp n = (SimbolNp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("N_1 -> SUB M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de resta", m.getDreta(),m.getEsquerre());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.ADD,"moderesult",m.getDreta(),m.getR());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de resta", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 
                        n.setTs_heretat(m.getTsb());
                        String resultat = n.obtenir_sintetitzat();

                        if(resultat == "ts_nul"){
                            report_error_semantic("No es pot fer una operació amb aquest tipus", m.getDreta(),m.getEsquerre());
                            errorSemantic = true;
                            RESULT = new SimbolNp();
                        }else{
                            //**************Intermedi******************
                            Integer n1 = novavar(true,4);
                            switch(n.getOperacio()){
                                case ParserSym.ADD:
                                    taula_intermedi.genera(Operacio.producte,m.getR(),n.getR(),n1);
                                    break;
                                case ParserSym.SUB:
                                    taula_intermedi.genera(Operacio.divisio,m.getR(),n.getR(),n1);
                                    break;
                            }
                            //*****************************************
                            RESULT = new SimbolNp(resultat,"id_nula",ParserSym.SUB,"moderesult",n.getDreta(),n1);
                        }

                    }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // N_1 ::= 
            {
              SimbolNp RESULT =null;
		System.out.println("N_1 -> @");
        RESULT = new SimbolNp();
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // M ::= F M_1 
            {
              SimbolM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M -> F M_1");
        if(errorSemantic){
            RESULT = new SimbolM();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolM(f.getIdb(),f.getTsb(),f.getTipus(),f.getMode(),f.getEsquerre(),f.getDreta(),f.getR()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((f.getTsb() == "ts_nul")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de suma/resta/multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolM();
                }else{
                    //comprovar si f es decimal
                    m.setTs_heretat(f.getTsb());
                    String tsb = m.obtenir_sintetitzat();

                    if(tsb=="ts_nul"){
                        report_error_semantic("no es pot fer el mòdul d'un decimal ", f.getEsquerre(),f.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolM();
                    }else{
                        //**************Intermedi******************
                        Integer n = novavar(true);
                        switch(m.getOperacio()){
                            case ParserSym.MULT:
                                taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.DIV:
                                taula_intermedi.genera(Operacio.divisio,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.MOD:
                                taula_intermedi.genera(Operacio.modul,f.getR(),m.getR(),n);
                                break;
                        }
                        //*****************************************

                        RESULT = new SimbolM(tsb,"id_nula","moderesult",f.getEsquerre(),m.getDreta(),n); 
                    }
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // M_1 ::= MULT F M_1 
            {
              SimbolMp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> MULT F M_1");
        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb()=="ts_boolea")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MULT,"moderesult",f.getDreta(),f.getR());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = cadena o decimal o caracter 
                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    if(resultat == "ts_nul"){
                        report_error_semantic("no es pot fer el mòdul d'un decimal ", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                        //**************Intermedi******************
                        Integer n = novavar(true);
                        switch(m.getOperacio()){
                            case ParserSym.MULT:
                                taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.DIV:
                                taula_intermedi.genera(Operacio.divisio,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.MOD:
                                taula_intermedi.genera(Operacio.modul,f.getR(),m.getR(),n);
                                break;
                        }
                        //*****************************************
                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.MULT,"moderesult",m.getDreta(),n);
                    }

                }
            }
        }

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // M_1 ::= DIV F M_1 
            {
              SimbolMp RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token d = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> DIV F M_1");

        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de divisió", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{

                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.DIV,"moderesult",f.getDreta(),f.getR());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = cadena o decimal o caracter 
                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    if(resultat == "ts_nul"){
                        report_error_semantic("no es pot fer el mòdul amb un nombre decimal", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                        //**************Intermedi******************
                        Integer n = novavar(true);
                        switch(m.getOperacio()){
                            case ParserSym.MULT:
                                taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.DIV:
                                taula_intermedi.genera(Operacio.divisio,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.MOD:
                                taula_intermedi.genera(Operacio.modul,f.getR(),m.getR(),n);
                                break;
                        }
                        //*****************************************

                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.DIV,"moderesult",m.getDreta(),n);
                    }

                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // M_1 ::= MOD F M_1 
            {
              SimbolMp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> MOD F M_1");

        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_decimal")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MOD,"moderesult",f.getDreta(),f.getR());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_decimal")){
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = enter o caracter

                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    //pensant que resultat tendrà un ts correcte

                    if(resultat == "ts_decimal"){
                        report_error_semantic("No es pot fer el mòdul d'un valor decimal", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{

                        //**************Intermedi******************
                        Integer n = novavar(true);
                        switch(m.getOperacio()){
                            case ParserSym.MULT:
                                taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.DIV:
                                taula_intermedi.genera(Operacio.divisio,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.MOD:
                                taula_intermedi.genera(Operacio.modul,f.getR(),m.getR(),n);
                                break;
                        }
                        //*****************************************

                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.MOD,"moderesult",m.getDreta(),n);  
                    }
                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // M_1 ::= 
            {
              SimbolMp RESULT =null;
		System.out.println("M_1 -> @");
        RESULT = new SimbolMp();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // F ::= LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> LPAREN E RPAREN"); //pendent intermedi
                if(errorSemantic){
                    RESULT = new SimbolF();
                }else{
                    if(e.getTsb() == "ts_nul"){ //ho trob error
                        report_error("(E) té tsb null", e);
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",l.esquerre,l.dreta); //no tenc clar es mode
                    }   
                } 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // F ::= venter 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> venter");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor,null,n);
                RESULT = new SimbolF("ts_enter","ent","modeconst",v.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // F ::= ENTRADAS 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolEntrada s = (SimbolEntrada)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ENTRADAS");
                taula_intermedi.genera(Operacio.console_read,null,null,s.getR());
                RESULT = new SimbolF(s.getTsb(),s.getTipus(),"modeconst",s.getEsquerre(),s.getDreta(),s.getR());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // F ::= SUB venter 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB venter");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor*-1,null,n);
                RESULT = new SimbolF("ts_enter","ent","modeconst",s.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // F ::= ADD venter 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD venter");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor,null,n);
                RESULT = new SimbolF("ts_enter","ent","modeconst",a.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // F ::= vdecimal 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vdecimal");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Double)v.valor,null,n);
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",v.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // F ::= ADD vdecimal 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD vdecimal");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Double)v.valor,null,n);
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",a.esquerre,a.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // F ::= SUB vdecimal 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB vdecimal");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Double)v.valor*-1,null,n);
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",s.esquerre,s.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // F ::= vcaracter 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vcaracter");
                Integer n = novavar(true,2);
                taula_intermedi.genera(Operacio.copia_valor,(Character)v.valor,null,n);
                RESULT = new SimbolF("ts_caracter","car","modeconst",v.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // F ::= ADD vcaracter 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD");
                Integer n = novavar(true,2);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor,null,n); //revisar si passar a decimal o enter
                RESULT = new SimbolF("ts_caracter","car","modeconst",a.esquerre,v.dreta,n); //assegurar que a car hi posam ts_caracter
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // F ::= SUB vcaracter 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB");
                Integer n = novavar(true,2);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor*-1,null,n); //revisar si passar a decimal o enter
                RESULT = new SimbolF("ts_caracter","car","modeconst",s.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // F ::= R 
            {
              SimbolF RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ID");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n);
                        }else if(r.getMvp() == "const"){

                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }

                            RESULT = new SimbolF(r.getIdb(),r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n);
                        }else if(r.getMvp() == "procc"){ //gestionar el return
                            RESULT = new SimbolF(r.getIdb(),r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),r.getR());
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // F ::= SUB R 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",s.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }
                            Integer n2 = novavar(true);
                            taula_intermedi.genera(Operacio.menys,n,null,n2);

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n2);
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){

                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }
                            Integer n2 = novavar(true);
                            taula_intermedi.genera(Operacio.menys,n,null,n2);

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n2);
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // F ::= ADD R 
            {
              SimbolF RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ADD R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",a.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n);
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n);
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // F ::= vlogic 
            {
              SimbolF RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> vlogic");
                Integer n = novavar(true,1);
                switch((String)v.valor){
                    case "FALS":
                        taula_intermedi.genera(Operacio.copia_valor,false,null,n); //revisar si passar a decimal o enter
                        break;
                    default:
                        taula_intermedi.genera(Operacio.copia_valor,true,null,n); //revisar si passar a decimal o enter
                        break;
                }
                RESULT = new SimbolF("ts_boolea","bool","modeconst",v.esquerre,v.dreta,n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // F ::= SUB LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> SUB LPAREN E RPAREN"); //REVISAR

                if(errorSemantic){ //si s'ha comés un error Semantic a E
                   RESULT  = new SimbolF(); 
                }else{
                    if(e.getTsb() == "ts_nul"){
                        report_error_semantic("No es pot restar l'expresió entre parèntesis", e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else if((e.getTsb() != "ts_enter")&&(e.getTsb() != "ts_decimal")&&(e.getTsb() != "ts_caracter")){
                        report_error_semantic("No es pot restar l'expresió entre parèntesis",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer n = novavar(true);
                        taula_intermedi.genera(Operacio.menys,e.getR(),null,n);
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",s.esquerre,r.dreta,n);
                    } 
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // F ::= NOT vlogic 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT vlogic");
                Integer ni = novavar(true,1);
                switch((String)v.valor){
                    case "FALS":
                        taula_intermedi.genera(Operacio.copia_valor,true,null,ni); //revisar si passar a decimal o enter
                    break;
                    default:
                        taula_intermedi.genera(Operacio.copia_valor,false,null,ni); //revisar si passar a decimal o enter
                    break;
                }
                
                RESULT = new SimbolF("ts_boolea","bool","modeconst",n.esquerre,v.dreta,ni);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // F ::= NOT R 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolR r = (SimbolR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT ID");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            if(r.getTsb() != "ts_boolea"){
                                report_error_semantic("La referència "+r.getIdb()+" no té tsb booleà", n.esquerre,r.getDreta());
                                errorSemantic = true;
                                RESULT  = new SimbolF();
                            }else{
                                Integer n1;
                                if(r.getDpc()!=0){
                                    n1 = novavar(true);
                                    taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n1);
                                }else{
                                    n1 = r.getR();
                                }
                                Integer n2 = novavar(true);
                                taula_intermedi.genera(Operacio.not,n1,null,n2);
                                RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n2);  
                            }
                            
                        }else if(r.getMvp() == "const"){
                            if(r.getTsb() != "ts_boolea"){
                                report_error_semantic("La referència "+r.getIdb()+" no té tsb booleà", n.esquerre,r.getDreta());
                                errorSemantic = true;
                             RESULT  = new SimbolF();
                            }else{
                                Integer n1;
                                if(r.getDpc()!=0){
                                    n1 = novavar(true);
                                    taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n1);
                                }else{
                                    n1 = r.getR();
                                }
                                Integer n2 = novavar(true);
                                taula_intermedi.genera(Operacio.not,n1,null,n2);

                                RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());  
                            }
                        }
                    }  
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // F ::= NOT LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Token n = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT LPAREN E RPAREN"); //posar error semantic
                if(errorSemantic){ //si a E s'ha comés un error semántic
                    RESULT  = new SimbolF();
                }else{
                    if(e.getTsb() != "ts_boolea"){
                        report_error_semantic("L'expresió no és booleana ",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer n1 = novavar(true);
                        taula_intermedi.genera(Operacio.not,e.getR(),null,n1);
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",n.esquerre,r.dreta,n1);
                    }   
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
