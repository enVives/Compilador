
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Compilador.Sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java.io.PrintStream;
import java.util.HashMap;
import Compilador.TSimbols.Taula;
import Compilador.TSimbols.DT.*;
import Compilador.TSimbols.TD.*;
import Compilador.Sintactic.Simbols.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\021\004\000\002\021\002\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\004\000\002\033\004\000\002" +
    "\033\004\000\002\004\012\000\002\004\014\000\002\030" +
    "\004\000\002\031\007\000\002\005\015\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\026\003\000\002\026\002\000\002" +
    "\032\005\000\002\032\003\000\002\035\004\000\002\022" +
    "\012\000\002\023\012\000\002\037\013\000\002\037\006" +
    "\000\002\037\002\000\002\025\013\000\002\050\016\000" +
    "\002\050\014\000\002\051\003\000\002\051\002\000\002" +
    "\052\011\000\002\053\003\000\002\053\003\000\002\054" +
    "\010\000\002\055\006\000\002\024\011\000\002\040\011" +
    "\000\002\040\007\000\002\040\002\000\002\056\004\000" +
    "\002\010\004\000\002\010\004\000\002\020\004\000\002" +
    "\043\004\000\002\044\005\000\002\044\003\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\042\003\000\002\042\003\000\002\042\004\000" +
    "\002\042\004\000\002\042\003\000\002\047\003\000\002" +
    "\047\005\000\002\034\006\000\002\006\007\000\002\006" +
    "\006\000\002\046\006\000\002\012\007\000\002\013\010" +
    "\000\002\014\010\000\002\017\005\000\002\060\004\000" +
    "\002\061\005\000\002\061\005\000\002\061\002\000\002" +
    "\062\004\000\002\063\005\000\002\063\005\000\002\063" +
    "\005\000\002\063\005\000\002\063\005\000\002\063\005" +
    "\000\002\063\002\000\002\064\004\000\002\065\005\000" +
    "\002\065\005\000\002\065\002\000\002\066\004\000\002" +
    "\067\005\000\002\067\005\000\002\067\005\000\002\067" +
    "\002\000\002\057\005\000\002\057\003\000\002\057\004" +
    "\000\002\057\004\000\002\057\003\000\002\057\004\000" +
    "\002\057\004\000\002\057\003\000\002\057\004\000\002" +
    "\057\004\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\006\000\002\057\004\000\002\057\004" +
    "\000\002\057\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\024\003\017\050\012\051\014\052\006\053" +
    "\010\054\013\055\024\067\011\072\016\001\002\000\004" +
    "\027\u0137\001\002\000\004\002\u0136\001\002\000\006\004" +
    "\uffe0\036\uffe0\001\002\000\004\002\ufffe\001\002\000\006" +
    "\004\uffdf\036\uffdf\001\002\000\020\004\210\050\012\051" +
    "\014\052\006\053\010\054\013\075\207\001\002\000\006" +
    "\004\uffe2\036\uffe2\001\002\000\006\004\uffde\036\uffde\001" +
    "\002\000\006\004\uffe1\036\uffe1\001\002\000\024\003\017" +
    "\050\012\051\014\052\006\053\010\054\013\055\024\067" +
    "\011\072\016\001\002\000\014\050\012\051\014\052\006" +
    "\053\010\054\013\001\002\000\004\027\204\001\002\000" +
    "\004\027\203\001\002\000\024\003\017\050\012\051\014" +
    "\052\006\053\010\054\013\055\024\067\011\072\016\001" +
    "\002\000\004\004\153\001\002\000\004\027\151\001\002" +
    "\000\004\004\025\001\002\000\004\017\026\001\002\000" +
    "\004\020\027\001\002\000\006\021\031\027\uffb1\001\002" +
    "\000\004\027\uffb2\001\002\000\004\017\032\001\002\000" +
    "\026\004\042\005\033\006\045\007\035\010\036\011\044" +
    "\012\037\013\041\017\047\047\046\001\002\000\070\003" +
    "\uff92\012\uff92\013\uff92\014\uff92\015\uff92\016\uff92\020\uff92" +
    "\026\uff92\027\uff92\034\uff92\036\uff92\037\uff92\040\uff92\041" +
    "\uff92\042\uff92\043\uff92\044\uff92\045\uff92\046\uff92\050\uff92" +
    "\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92\067\uff92\072" +
    "\uff92\001\002\000\042\003\uffa8\020\uffa8\026\uffa8\027\uffa8" +
    "\034\uffa8\036\uffa8\045\144\046\142\050\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\067\uffa8\072\uffa8\001\002" +
    "\000\070\003\uff8a\012\uff8a\013\uff8a\014\uff8a\015\uff8a\016" +
    "\uff8a\020\uff8a\026\uff8a\027\uff8a\034\uff8a\036\uff8a\037\uff8a" +
    "\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046" +
    "\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a\055\uff8a" +
    "\067\uff8a\072\uff8a\001\002\000\070\003\uff8c\012\uff8c\013" +
    "\uff8c\014\uff8c\015\uff8c\016\uff8c\020\uff8c\026\uff8c\027\uff8c" +
    "\034\uff8c\036\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043" +
    "\uff8c\044\uff8c\045\uff8c\046\uff8c\050\uff8c\051\uff8c\052\uff8c" +
    "\053\uff8c\054\uff8c\055\uff8c\067\uff8c\072\uff8c\001\002\000" +
    "\010\005\137\006\140\011\141\001\002\000\056\003\uffa0" +
    "\020\uffa0\026\uffa0\027\uffa0\034\uffa0\036\uffa0\037\116\040" +
    "\114\041\115\042\122\043\121\044\117\045\uffa0\046\uffa0" +
    "\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0\067" +
    "\uffa0\072\uffa0\001\002\000\012\005\106\006\107\011\110" +
    "\017\111\001\002\000\070\003\uff8b\012\uff8b\013\uff8b\014" +
    "\uff8b\015\uff8b\016\uff8b\020\uff8b\026\uff8b\027\uff8b\034\uff8b" +
    "\036\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b" +
    "\054\uff8b\055\uff8b\067\uff8b\072\uff8b\001\002\000\062\003" +
    "\uff9c\012\101\013\077\020\uff9c\026\uff9c\027\uff9c\034\uff9c" +
    "\036\uff9c\037\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c" +
    "\054\uff9c\055\uff9c\067\uff9c\072\uff9c\001\002\000\070\003" +
    "\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016\uff8f\020\uff8f" +
    "\026\uff8f\027\uff8f\034\uff8f\036\uff8f\037\uff8f\040\uff8f\041" +
    "\uff8f\042\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\050\uff8f" +
    "\051\uff8f\052\uff8f\053\uff8f\054\uff8f\055\uff8f\067\uff8f\072" +
    "\uff8f\001\002\000\070\003\uff95\012\uff95\013\uff95\014\uff95" +
    "\015\uff95\016\uff95\020\uff95\026\uff95\027\uff95\034\uff95\036" +
    "\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95" +
    "\045\uff95\046\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054" +
    "\uff95\055\uff95\067\uff95\072\uff95\001\002\000\010\004\072" +
    "\007\073\017\074\001\002\000\026\004\042\005\033\006" +
    "\045\007\035\010\036\011\044\012\037\013\041\017\047" +
    "\047\046\001\002\000\070\003\uff97\012\uff97\013\uff97\014" +
    "\057\015\060\016\056\020\uff97\026\uff97\027\uff97\034\uff97" +
    "\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044" +
    "\uff97\045\uff97\046\uff97\050\uff97\051\uff97\052\uff97\053\uff97" +
    "\054\uff97\055\uff97\067\uff97\072\uff97\001\002\000\004\020" +
    "\055\001\002\000\006\020\uffb5\036\053\001\002\000\026" +
    "\004\042\005\033\006\045\007\035\010\036\011\044\012" +
    "\037\013\041\017\047\047\046\001\002\000\004\020\uffb4" +
    "\001\002\000\004\027\uffb0\001\002\000\026\004\042\005" +
    "\033\006\045\007\035\010\036\011\044\012\037\013\041" +
    "\017\047\047\046\001\002\000\026\004\042\005\033\006" +
    "\045\007\035\010\036\011\044\012\037\013\041\017\047" +
    "\047\046\001\002\000\026\004\042\005\033\006\045\007" +
    "\035\010\036\011\044\012\037\013\041\017\047\047\046" +
    "\001\002\000\062\003\uff9b\012\uff9b\013\uff9b\020\uff9b\026" +
    "\uff9b\027\uff9b\034\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b" +
    "\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\050\uff9b\051" +
    "\uff9b\052\uff9b\053\uff9b\054\uff9b\055\uff9b\067\uff9b\072\uff9b" +
    "\001\002\000\070\003\uff97\012\uff97\013\uff97\014\057\015" +
    "\060\016\056\020\uff97\026\uff97\027\uff97\034\uff97\036\uff97" +
    "\037\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045" +
    "\uff97\046\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97" +
    "\055\uff97\067\uff97\072\uff97\001\002\000\062\003\uff99\012" +
    "\uff99\013\uff99\020\uff99\026\uff99\027\uff99\034\uff99\036\uff99" +
    "\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045" +
    "\uff99\046\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99" +
    "\055\uff99\067\uff99\072\uff99\001\002\000\070\003\uff97\012" +
    "\uff97\013\uff97\014\057\015\060\016\056\020\uff97\026\uff97" +
    "\027\uff97\034\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042" +
    "\uff97\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\067\uff97\072\uff97\001" +
    "\002\000\062\003\uff9a\012\uff9a\013\uff9a\020\uff9a\026\uff9a" +
    "\027\uff9a\034\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\050\uff9a\051\uff9a" +
    "\052\uff9a\053\uff9a\054\uff9a\055\uff9a\067\uff9a\072\uff9a\001" +
    "\002\000\070\003\uff97\012\uff97\013\uff97\014\057\015\060" +
    "\016\056\020\uff97\026\uff97\027\uff97\034\uff97\036\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055" +
    "\uff97\067\uff97\072\uff97\001\002\000\062\003\uff98\012\uff98" +
    "\013\uff98\020\uff98\026\uff98\027\uff98\034\uff98\036\uff98\037" +
    "\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98" +
    "\046\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055" +
    "\uff98\067\uff98\072\uff98\001\002\000\004\020\071\001\002" +
    "\000\070\003\uff96\012\uff96\013\uff96\014\uff96\015\uff96\016" +
    "\uff96\020\uff96\026\uff96\027\uff96\034\uff96\036\uff96\037\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96\046" +
    "\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055\uff96" +
    "\067\uff96\072\uff96\001\002\000\070\003\uff87\012\uff87\013" +
    "\uff87\014\uff87\015\uff87\016\uff87\020\uff87\026\uff87\027\uff87" +
    "\034\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043" +
    "\uff87\044\uff87\045\uff87\046\uff87\050\uff87\051\uff87\052\uff87" +
    "\053\uff87\054\uff87\055\uff87\067\uff87\072\uff87\001\002\000" +
    "\070\003\uff88\012\uff88\013\uff88\014\uff88\015\uff88\016\uff88" +
    "\020\uff88\026\uff88\027\uff88\034\uff88\036\uff88\037\uff88\040" +
    "\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88" +
    "\050\uff88\051\uff88\052\uff88\053\uff88\054\uff88\055\uff88\067" +
    "\uff88\072\uff88\001\002\000\026\004\042\005\033\006\045" +
    "\007\035\010\036\011\044\012\037\013\041\017\047\047" +
    "\046\001\002\000\004\020\076\001\002\000\070\003\uff86" +
    "\012\uff86\013\uff86\014\uff86\015\uff86\016\uff86\020\uff86\026" +
    "\uff86\027\uff86\034\uff86\036\uff86\037\uff86\040\uff86\041\uff86" +
    "\042\uff86\043\uff86\044\uff86\045\uff86\046\uff86\050\uff86\051" +
    "\uff86\052\uff86\053\uff86\054\uff86\055\uff86\067\uff86\072\uff86" +
    "\001\002\000\026\004\042\005\033\006\045\007\035\010" +
    "\036\011\044\012\037\013\041\017\047\047\046\001\002" +
    "\000\056\003\uff9f\020\uff9f\026\uff9f\027\uff9f\034\uff9f\036" +
    "\uff9f\037\uff9f\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\067\uff9f\072\uff9f\001\002\000\026\004\042" +
    "\005\033\006\045\007\035\010\036\011\044\012\037\013" +
    "\041\017\047\047\046\001\002\000\062\003\uff9c\012\101" +
    "\013\077\020\uff9c\026\uff9c\027\uff9c\034\uff9c\036\uff9c\037" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055" +
    "\uff9c\067\uff9c\072\uff9c\001\002\000\056\003\uff9e\020\uff9e" +
    "\026\uff9e\027\uff9e\034\uff9e\036\uff9e\037\uff9e\040\uff9e\041" +
    "\uff9e\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e" +
    "\051\uff9e\052\uff9e\053\uff9e\054\uff9e\055\uff9e\067\uff9e\072" +
    "\uff9e\001\002\000\062\003\uff9c\012\101\013\077\020\uff9c" +
    "\026\uff9c\027\uff9c\034\uff9c\036\uff9c\037\uff9c\040\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\050\uff9c" +
    "\051\uff9c\052\uff9c\053\uff9c\054\uff9c\055\uff9c\067\uff9c\072" +
    "\uff9c\001\002\000\056\003\uff9d\020\uff9d\026\uff9d\027\uff9d" +
    "\034\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d\042\uff9d\043" +
    "\uff9d\044\uff9d\045\uff9d\046\uff9d\050\uff9d\051\uff9d\052\uff9d" +
    "\053\uff9d\054\uff9d\055\uff9d\067\uff9d\072\uff9d\001\002\000" +
    "\070\003\uff90\012\uff90\013\uff90\014\uff90\015\uff90\016\uff90" +
    "\020\uff90\026\uff90\027\uff90\034\uff90\036\uff90\037\uff90\040" +
    "\uff90\041\uff90\042\uff90\043\uff90\044\uff90\045\uff90\046\uff90" +
    "\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\055\uff90\067" +
    "\uff90\072\uff90\001\002\000\070\003\uff94\012\uff94\013\uff94" +
    "\014\uff94\015\uff94\016\uff94\020\uff94\026\uff94\027\uff94\034" +
    "\uff94\036\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94" +
    "\044\uff94\045\uff94\046\uff94\050\uff94\051\uff94\052\uff94\053" +
    "\uff94\054\uff94\055\uff94\067\uff94\072\uff94\001\002\000\070" +
    "\003\uff8d\012\uff8d\013\uff8d\014\uff8d\015\uff8d\016\uff8d\020" +
    "\uff8d\026\uff8d\027\uff8d\034\uff8d\036\uff8d\037\uff8d\040\uff8d" +
    "\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\050" +
    "\uff8d\051\uff8d\052\uff8d\053\uff8d\054\uff8d\055\uff8d\067\uff8d" +
    "\072\uff8d\001\002\000\026\004\042\005\033\006\045\007" +
    "\035\010\036\011\044\012\037\013\041\017\047\047\046" +
    "\001\002\000\004\020\113\001\002\000\070\003\uff89\012" +
    "\uff89\013\uff89\014\uff89\015\uff89\016\uff89\020\uff89\026\uff89" +
    "\027\uff89\034\uff89\036\uff89\037\uff89\040\uff89\041\uff89\042" +
    "\uff89\043\uff89\044\uff89\045\uff89\046\uff89\050\uff89\051\uff89" +
    "\052\uff89\053\uff89\054\uff89\055\uff89\067\uff89\072\uff89\001" +
    "\002\000\026\004\042\005\033\006\045\007\035\010\036" +
    "\011\044\012\037\013\041\017\047\047\046\001\002\000" +
    "\026\004\042\005\033\006\045\007\035\010\036\011\044" +
    "\012\037\013\041\017\047\047\046\001\002\000\026\004" +
    "\042\005\033\006\045\007\035\010\036\011\044\012\037" +
    "\013\041\017\047\047\046\001\002\000\026\004\042\005" +
    "\033\006\045\007\035\010\036\011\044\012\037\013\041" +
    "\017\047\047\046\001\002\000\042\003\uffa7\020\uffa7\026" +
    "\uffa7\027\uffa7\034\uffa7\036\uffa7\045\uffa7\046\uffa7\050\uffa7" +
    "\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\067\uffa7\072" +
    "\uffa7\001\002\000\026\004\042\005\033\006\045\007\035" +
    "\010\036\011\044\012\037\013\041\017\047\047\046\001" +
    "\002\000\026\004\042\005\033\006\045\007\035\010\036" +
    "\011\044\012\037\013\041\017\047\047\046\001\002\000" +
    "\056\003\uffa0\020\uffa0\026\uffa0\027\uffa0\034\uffa0\036\uffa0" +
    "\037\116\040\114\041\115\042\122\043\121\044\117\045" +
    "\uffa0\046\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0" +
    "\055\uffa0\067\uffa0\072\uffa0\001\002\000\042\003\uffa1\020" +
    "\uffa1\026\uffa1\027\uffa1\034\uffa1\036\uffa1\045\uffa1\046\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055\uffa1\067" +
    "\uffa1\072\uffa1\001\002\000\056\003\uffa0\020\uffa0\026\uffa0" +
    "\027\uffa0\034\uffa0\036\uffa0\037\116\040\114\041\115\042" +
    "\122\043\121\044\117\045\uffa0\046\uffa0\050\uffa0\051\uffa0" +
    "\052\uffa0\053\uffa0\054\uffa0\055\uffa0\067\uffa0\072\uffa0\001" +
    "\002\000\042\003\uffa4\020\uffa4\026\uffa4\027\uffa4\034\uffa4" +
    "\036\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4\053" +
    "\uffa4\054\uffa4\055\uffa4\067\uffa4\072\uffa4\001\002\000\056" +
    "\003\uffa0\020\uffa0\026\uffa0\027\uffa0\034\uffa0\036\uffa0\037" +
    "\116\040\114\041\115\042\122\043\121\044\117\045\uffa0" +
    "\046\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\067\uffa0\072\uffa0\001\002\000\042\003\uffa3\020\uffa3" +
    "\026\uffa3\027\uffa3\034\uffa3\036\uffa3\045\uffa3\046\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\067\uffa3" +
    "\072\uffa3\001\002\000\056\003\uffa0\020\uffa0\026\uffa0\027" +
    "\uffa0\034\uffa0\036\uffa0\037\116\040\114\041\115\042\122" +
    "\043\121\044\117\045\uffa0\046\uffa0\050\uffa0\051\uffa0\052" +
    "\uffa0\053\uffa0\054\uffa0\055\uffa0\067\uffa0\072\uffa0\001\002" +
    "\000\042\003\uffa5\020\uffa5\026\uffa5\027\uffa5\034\uffa5\036" +
    "\uffa5\045\uffa5\046\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\067\uffa5\072\uffa5\001\002\000\056\003" +
    "\uffa0\020\uffa0\026\uffa0\027\uffa0\034\uffa0\036\uffa0\037\116" +
    "\040\114\041\115\042\122\043\121\044\117\045\uffa0\046" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\067\uffa0\072\uffa0\001\002\000\042\003\uffa2\020\uffa2\026" +
    "\uffa2\027\uffa2\034\uffa2\036\uffa2\045\uffa2\046\uffa2\050\uffa2" +
    "\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055\uffa2\067\uffa2\072" +
    "\uffa2\001\002\000\056\003\uffa0\020\uffa0\026\uffa0\027\uffa0" +
    "\034\uffa0\036\uffa0\037\116\040\114\041\115\042\122\043" +
    "\121\044\117\045\uffa0\046\uffa0\050\uffa0\051\uffa0\052\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\067\uffa0\072\uffa0\001\002\000" +
    "\042\003\uffa6\020\uffa6\026\uffa6\027\uffa6\034\uffa6\036\uffa6" +
    "\045\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\067\uffa6\072\uffa6\001\002\000\070\003\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\020\uff91\026" +
    "\uff91\027\uff91\034\uff91\036\uff91\037\uff91\040\uff91\041\uff91" +
    "\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050\uff91\051" +
    "\uff91\052\uff91\053\uff91\054\uff91\055\uff91\067\uff91\072\uff91" +
    "\001\002\000\070\003\uff93\012\uff93\013\uff93\014\uff93\015" +
    "\uff93\016\uff93\020\uff93\026\uff93\027\uff93\034\uff93\036\uff93" +
    "\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93\045" +
    "\uff93\046\uff93\050\uff93\051\uff93\052\uff93\053\uff93\054\uff93" +
    "\055\uff93\067\uff93\072\uff93\001\002\000\070\003\uff8e\012" +
    "\uff8e\013\uff8e\014\uff8e\015\uff8e\016\uff8e\020\uff8e\026\uff8e" +
    "\027\uff8e\034\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042" +
    "\uff8e\043\uff8e\044\uff8e\045\uff8e\046\uff8e\050\uff8e\051\uff8e" +
    "\052\uff8e\053\uff8e\054\uff8e\055\uff8e\067\uff8e\072\uff8e\001" +
    "\002\000\026\004\042\005\033\006\045\007\035\010\036" +
    "\011\044\012\037\013\041\017\047\047\046\001\002\000" +
    "\036\003\uffab\020\uffab\026\uffab\027\uffab\034\uffab\036\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\067" +
    "\uffab\072\uffab\001\002\000\026\004\042\005\033\006\045" +
    "\007\035\010\036\011\044\012\037\013\041\017\047\047" +
    "\046\001\002\000\042\003\uffa8\020\uffa8\026\uffa8\027\uffa8" +
    "\034\uffa8\036\uffa8\045\144\046\142\050\uffa8\051\uffa8\052" +
    "\uffa8\053\uffa8\054\uffa8\055\uffa8\067\uffa8\072\uffa8\001\002" +
    "\000\036\003\uffa9\020\uffa9\026\uffa9\027\uffa9\034\uffa9\036" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\067\uffa9\072\uffa9\001\002\000\042\003\uffa8\020\uffa8\026" +
    "\uffa8\027\uffa8\034\uffa8\036\uffa8\045\144\046\142\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\067\uffa8\072" +
    "\uffa8\001\002\000\036\003\uffaa\020\uffaa\026\uffaa\027\uffaa" +
    "\034\uffaa\036\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\067\uffaa\072\uffaa\001\002\000\052\003\ufffc" +
    "\004\ufffc\033\ufffc\034\ufffc\050\ufffc\051\ufffc\052\ufffc\053" +
    "\ufffc\054\ufffc\055\ufffc\056\ufffc\060\ufffc\063\ufffc\064\ufffc" +
    "\065\ufffc\066\ufffc\067\ufffc\072\ufffc\073\ufffc\074\ufffc\001" +
    "\002\000\004\027\uffc4\001\002\000\010\021\uffbf\027\uffbf" +
    "\036\200\001\002\000\006\021\156\027\uffc3\001\002\000" +
    "\004\027\uffc1\001\002\000\026\004\162\005\033\006\045" +
    "\007\035\010\036\011\044\012\037\013\041\017\047\047" +
    "\046\001\002\000\004\027\uffbb\001\002\000\004\027\uffbd" +
    "\001\002\000\004\027\uffbc\001\002\000\052\012\uff8b\013" +
    "\uff8b\014\uff8b\015\uff8b\016\uff8b\017\171\021\156\022\167" +
    "\023\166\024\170\025\172\027\uff8b\037\uff8b\040\uff8b\041" +
    "\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b\046\uff8b\001\002" +
    "\000\004\027\uffbe\001\002\000\004\027\uffc2\001\002\000" +
    "\004\027\uffb6\001\002\000\004\027\uffb9\001\002\000\004" +
    "\027\uffba\001\002\000\026\004\042\005\033\006\045\007" +
    "\035\010\036\011\044\012\037\013\041\017\047\047\046" +
    "\001\002\000\004\006\174\001\002\000\026\004\042\005" +
    "\033\006\045\007\035\010\036\011\044\012\037\013\041" +
    "\017\047\047\046\001\002\000\004\027\uffb7\001\002\000" +
    "\004\020\175\001\002\000\016\021\156\022\167\023\166" +
    "\024\170\025\172\027\uffb3\001\002\000\004\027\uffaf\001" +
    "\002\000\004\027\uffb8\001\002\000\004\004\153\001\002" +
    "\000\006\021\uffc0\027\uffc0\001\002\000\004\002\uffff\001" +
    "\002\000\052\003\ufffd\004\ufffd\033\ufffd\034\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\060" +
    "\ufffd\063\ufffd\064\ufffd\065\ufffd\066\ufffd\067\ufffd\072\ufffd" +
    "\073\ufffd\074\ufffd\001\002\000\052\003\ufffa\004\ufffa\033" +
    "\ufffa\034\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\060\ufffa\063\ufffa\064\ufffa\065\ufffa\066" +
    "\ufffa\067\ufffa\072\ufffa\073\ufffa\074\ufffa\001\002\000\004" +
    "\027\uffc5\001\002\000\004\002\000\001\002\000\004\017" +
    "\u012d\001\002\000\004\017\u0127\001\002\000\004\004\212" +
    "\001\002\000\004\017\213\001\002\000\016\020\uffdc\050" +
    "\012\051\014\052\006\053\010\054\013\001\002\000\006" +
    "\020\uffda\036\u0125\001\002\000\004\020\221\001\002\000" +
    "\004\004\220\001\002\000\004\020\uffdd\001\002\000\006" +
    "\020\uffd9\036\uffd9\001\002\000\004\033\222\001\002\000" +
    "\046\003\017\004\240\033\241\034\ufff3\050\012\051\014" +
    "\052\006\053\010\054\013\055\024\056\236\060\227\064" +
    "\243\065\224\066\253\072\016\073\244\074\235\001\002" +
    "\000\004\027\u0124\001\002\000\004\033\u011c\001\002\000" +
    "\004\027\u011b\001\002\000\004\027\u011a\001\002\000\004" +
    "\017\u0108\001\002\000\050\003\uffec\004\uffec\033\uffec\034" +
    "\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec" +
    "\056\uffec\060\uffec\063\uffec\064\uffec\065\uffec\066\uffec\072" +
    "\uffec\073\uffec\074\uffec\001\002\000\004\027\u0107\001\002" +
    "\000\050\003\uffeb\004\uffeb\033\uffeb\034\uffeb\050\uffeb\051" +
    "\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\060\uffeb" +
    "\063\uffeb\064\uffeb\065\uffeb\066\uffeb\072\uffeb\073\uffeb\074" +
    "\uffeb\001\002\000\050\003\ufff2\004\ufff2\033\ufff2\034\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\056" +
    "\ufff2\060\ufff2\063\ufff2\064\ufff2\065\ufff2\066\ufff2\072\ufff2" +
    "\073\ufff2\074\ufff2\001\002\000\004\027\u0106\001\002\000" +
    "\004\017\u0103\001\002\000\004\017\360\001\002\000\050" +
    "\003\uffee\004\uffee\033\uffee\034\uffee\050\uffee\051\uffee\052" +
    "\uffee\053\uffee\054\uffee\055\uffee\056\uffee\060\uffee\063\uffee" +
    "\064\uffee\065\uffee\066\uffee\072\uffee\073\uffee\074\uffee\001" +
    "\002\000\020\017\341\021\337\022\167\023\166\024\170" +
    "\025\172\035\340\001\002\000\026\004\042\005\033\006" +
    "\045\007\035\010\036\011\044\012\037\013\041\017\047" +
    "\047\046\001\002\000\004\027\326\001\002\000\004\017" +
    "\317\001\002\000\004\017\312\001\002\000\050\003\uffed" +
    "\004\uffed\033\uffed\034\uffed\050\uffed\051\uffed\052\uffed\053" +
    "\uffed\054\uffed\055\uffed\056\uffed\060\uffed\063\uffed\064\uffed" +
    "\065\uffed\066\uffed\072\uffed\073\uffed\074\uffed\001\002\000" +
    "\050\003\ufff0\004\ufff0\033\ufff0\034\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056\ufff0\060\ufff0\063" +
    "\ufff0\064\ufff0\065\ufff0\066\ufff0\072\ufff0\073\ufff0\074\ufff0" +
    "\001\002\000\004\027\311\001\002\000\050\003\017\004" +
    "\240\033\241\034\ufff3\050\012\051\014\052\006\053\010" +
    "\054\013\055\024\056\236\060\227\063\ufff3\064\243\065" +
    "\224\066\253\072\016\073\244\074\235\001\002\000\050" +
    "\003\uffef\004\uffef\033\uffef\034\uffef\050\uffef\051\uffef\052" +
    "\uffef\053\uffef\054\uffef\055\uffef\056\uffef\060\uffef\063\uffef" +
    "\064\uffef\065\uffef\066\uffef\072\uffef\073\uffef\074\uffef\001" +
    "\002\000\004\034\304\001\002\000\004\017\257\001\002" +
    "\000\004\027\256\001\002\000\050\003\ufff1\004\ufff1\033" +
    "\ufff1\034\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1" +
    "\055\ufff1\056\ufff1\060\ufff1\063\ufff1\064\ufff1\065\ufff1\066" +
    "\ufff1\072\ufff1\073\ufff1\074\ufff1\001\002\000\050\003\ufff6" +
    "\004\ufff6\033\ufff6\034\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\060\ufff6\063\ufff6\064\ufff6" +
    "\065\ufff6\066\ufff6\072\ufff6\073\ufff6\074\ufff6\001\002\000" +
    "\016\027\260\050\012\051\014\052\006\053\010\054\013" +
    "\001\002\000\030\004\042\005\033\006\045\007\035\010" +
    "\036\011\044\012\037\013\041\017\047\027\uffcf\047\046" +
    "\001\002\000\004\004\153\001\002\000\004\027\264\001" +
    "\002\000\004\021\156\001\002\000\030\004\042\005\033" +
    "\006\045\007\035\010\036\011\044\012\037\013\041\017" +
    "\047\027\uffcf\047\046\001\002\000\004\027\267\001\002" +
    "\000\006\020\uffd0\027\uffd0\001\002\000\030\004\042\005" +
    "\033\006\045\007\035\010\036\011\044\012\037\013\041" +
    "\017\047\020\uffcf\047\046\001\002\000\004\020\271\001" +
    "\002\000\004\033\272\001\002\000\044\003\017\004\240" +
    "\033\241\050\012\051\014\052\006\053\010\054\013\055" +
    "\024\056\236\060\227\064\243\065\224\066\253\072\016" +
    "\073\244\074\235\001\002\000\004\034\274\001\002\000" +
    "\050\003\uffd2\004\uffd2\033\uffd2\034\uffd2\050\uffd2\051\uffd2" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\060\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\072\uffd2\073\uffd2\074\uffd2" +
    "\001\002\000\004\027\276\001\002\000\030\004\042\005" +
    "\033\006\045\007\035\010\036\011\044\012\037\013\041" +
    "\017\047\020\uffcf\047\046\001\002\000\004\020\300\001" +
    "\002\000\004\033\301\001\002\000\044\003\017\004\240" +
    "\033\241\050\012\051\014\052\006\053\010\054\013\055" +
    "\024\056\236\060\227\064\243\065\224\066\253\072\016" +
    "\073\244\074\235\001\002\000\004\034\303\001\002\000" +
    "\050\003\uffd1\004\uffd1\033\uffd1\034\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056\uffd1\060\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\072\uffd1\073\uffd1\074\uffd1" +
    "\001\002\000\004\070\306\001\002\000\024\003\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\067\uffe6" +
    "\072\uffe6\001\002\000\026\004\042\005\033\006\045\007" +
    "\035\010\036\011\044\012\037\013\041\017\047\047\046" +
    "\001\002\000\024\003\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\054\uffe5\055\uffe5\067\uffe5\072\uffe5\001\002\000\006" +
    "\034\ufff4\063\ufff4\001\002\000\050\003\ufff8\004\ufff8\033" +
    "\ufff8\034\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\060\ufff8\063\ufff8\064\ufff8\065\ufff8\066" +
    "\ufff8\072\ufff8\073\ufff8\074\ufff8\001\002\000\014\050\012" +
    "\051\014\052\006\053\010\054\013\001\002\000\004\036" +
    "\314\001\002\000\004\004\315\001\002\000\004\020\316" +
    "\001\002\000\004\027\uffcb\001\002\000\026\004\042\005" +
    "\033\006\045\007\035\010\036\011\044\012\037\013\041" +
    "\017\047\047\046\001\002\000\004\020\321\001\002\000" +
    "\004\065\322\001\002\000\004\033\323\001\002\000\046" +
    "\003\017\004\240\033\241\034\ufff3\050\012\051\014\052" +
    "\006\053\010\054\013\055\024\056\236\060\227\064\243" +
    "\065\224\066\253\072\016\073\244\074\235\001\002\000" +
    "\004\034\325\001\002\000\050\003\uffd8\004\uffd8\033\uffd8" +
    "\034\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\060\uffd8\063\uffd8\064\uffd8\065\uffd8\066\uffd8" +
    "\072\uffd8\073\uffd8\074\uffd8\001\002\000\050\003\ufff7\004" +
    "\ufff7\033\ufff7\034\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\055\ufff7\056\ufff7\060\ufff7\063\ufff7\064\ufff7\065" +
    "\ufff7\066\ufff7\072\ufff7\073\ufff7\074\ufff7\001\002\000\004" +
    "\034\330\001\002\000\004\030\331\001\002\000\030\004" +
    "\042\005\033\006\045\007\035\010\036\011\044\012\037" +
    "\013\041\017\047\033\241\047\046\001\002\000\006\026" +
    "\uffcd\027\uffcd\001\002\000\006\026\uffcc\027\uffcc\001\002" +
    "\000\004\026\335\001\002\000\030\004\042\005\033\006" +
    "\045\007\035\010\036\011\044\012\037\013\041\017\047" +
    "\033\241\047\046\001\002\000\006\026\uffce\027\uffce\001" +
    "\002\000\030\004\162\005\033\006\045\007\035\010\036" +
    "\011\044\012\037\013\041\017\047\021\031\047\046\001" +
    "\002\000\006\076\350\077\347\001\002\000\020\006\343" +
    "\020\uffdc\050\012\051\014\052\006\053\010\054\013\001" +
    "\002\000\004\020\345\001\002\000\004\020\344\001\002" +
    "\000\014\021\156\022\167\023\166\024\170\025\172\001" +
    "\002\000\004\027\346\001\002\000\050\003\uffe4\004\uffe4" +
    "\033\uffe4\034\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\055\uffe4\056\uffe4\060\uffe4\063\uffe4\064\uffe4\065\uffe4" +
    "\066\uffe4\072\uffe4\073\uffe4\074\uffe4\001\002\000\004\017" +
    "\354\001\002\000\004\017\351\001\002\000\026\004\042" +
    "\005\033\006\045\007\035\010\036\011\044\012\037\013" +
    "\041\017\047\047\046\001\002\000\004\020\353\001\002" +
    "\000\004\027\uffae\001\002\000\026\004\042\005\033\006" +
    "\045\007\035\010\036\011\044\012\037\013\041\017\047" +
    "\047\046\001\002\000\004\020\356\001\002\000\004\027" +
    "\uffad\001\002\000\004\027\uffac\001\002\000\026\004\042" +
    "\005\033\006\045\007\035\010\036\011\044\012\037\013" +
    "\041\017\047\047\046\001\002\000\004\020\362\001\002" +
    "\000\004\033\363\001\002\000\046\003\017\004\240\033" +
    "\241\034\ufff3\050\012\051\014\052\006\053\010\054\013" +
    "\055\024\056\236\060\227\064\243\065\224\066\253\072" +
    "\016\073\244\074\235\001\002\000\004\034\365\001\002" +
    "\000\052\003\uffd4\004\uffd4\033\uffd4\034\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\366" +
    "\060\uffd4\063\uffd4\064\uffd4\065\uffd4\066\uffd4\072\uffd4\073" +
    "\uffd4\074\uffd4\001\002\000\006\033\371\056\370\001\002" +
    "\000\050\003\uffd7\004\uffd7\033\uffd7\034\uffd7\050\uffd7\051" +
    "\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\060\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\066\uffd7\072\uffd7\073\uffd7\074" +
    "\uffd7\001\002\000\004\017\374\001\002\000\046\003\017" +
    "\004\240\033\241\034\ufff3\050\012\051\014\052\006\053" +
    "\010\054\013\055\024\056\236\060\227\064\243\065\224" +
    "\066\253\072\016\073\244\074\235\001\002\000\004\034" +
    "\373\001\002\000\050\003\uffd5\004\uffd5\033\uffd5\034\uffd5" +
    "\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\060\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\072\uffd5" +
    "\073\uffd5\074\uffd5\001\002\000\026\004\042\005\033\006" +
    "\045\007\035\010\036\011\044\012\037\013\041\017\047" +
    "\047\046\001\002\000\004\020\376\001\002\000\004\033" +
    "\377\001\002\000\046\003\017\004\240\033\241\034\ufff3" +
    "\050\012\051\014\052\006\053\010\054\013\055\024\056" +
    "\236\060\227\064\243\065\224\066\253\072\016\073\244" +
    "\074\235\001\002\000\004\034\u0101\001\002\000\052\003" +
    "\uffd4\004\uffd4\033\uffd4\034\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\366\060\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\072\uffd4\073\uffd4\074\uffd4" +
    "\001\002\000\050\003\uffd6\004\uffd6\033\uffd6\034\uffd6\050" +
    "\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6" +
    "\060\uffd6\063\uffd6\064\uffd6\065\uffd6\066\uffd6\072\uffd6\073" +
    "\uffd6\074\uffd6\001\002\000\026\004\042\005\033\006\045" +
    "\007\035\010\036\011\044\012\037\013\041\017\047\047" +
    "\046\001\002\000\004\020\u0105\001\002\000\004\027\uffca" +
    "\001\002\000\050\003\uffea\004\uffea\033\uffea\034\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056\uffea" +
    "\060\uffea\063\uffea\064\uffea\065\uffea\066\uffea\072\uffea\073" +
    "\uffea\074\uffea\001\002\000\050\003\uffe9\004\uffe9\033\uffe9" +
    "\034\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055" +
    "\uffe9\056\uffe9\060\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9" +
    "\072\uffe9\073\uffe9\074\uffe9\001\002\000\026\004\042\005" +
    "\033\006\045\007\035\010\036\011\044\012\037\013\041" +
    "\017\047\047\046\001\002\000\004\020\u010a\001\002\000" +
    "\004\033\u010b\001\002\000\010\034\uffc6\061\u010c\062\u010e" +
    "\001\002\000\026\004\042\005\033\006\045\007\035\010" +
    "\036\011\044\012\037\013\041\017\047\047\046\001\002" +
    "\000\004\034\u0113\001\002\000\004\026\u010f\001\002\000" +
    "\046\003\017\004\240\033\241\050\012\051\014\052\006" +
    "\053\010\054\013\055\024\056\236\060\227\063\ufff3\064" +
    "\243\065\224\066\253\072\016\073\244\074\235\001\002" +
    "\000\004\063\u0111\001\002\000\004\027\u0112\001\002\000" +
    "\004\034\uffc7\001\002\000\050\003\uffc9\004\uffc9\033\uffc9" +
    "\034\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\060\uffc9\063\uffc9\064\uffc9\065\uffc9\066\uffc9" +
    "\072\uffc9\073\uffc9\074\uffc9\001\002\000\004\026\u0115\001" +
    "\002\000\046\003\017\004\240\033\241\050\012\051\014" +
    "\052\006\053\010\054\013\055\024\056\236\060\227\063" +
    "\ufff3\064\243\065\224\066\253\072\016\073\244\074\235" +
    "\001\002\000\004\063\u0117\001\002\000\004\027\u0118\001" +
    "\002\000\010\034\uffc6\061\u010c\062\u010e\001\002\000\004" +
    "\034\uffc8\001\002\000\050\003\ufff9\004\ufff9\033\ufff9\034" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9" +
    "\056\ufff9\060\ufff9\063\ufff9\064\ufff9\065\ufff9\066\ufff9\072" +
    "\ufff9\073\ufff9\074\ufff9\001\002\000\050\003\uffe8\004\uffe8" +
    "\033\uffe8\034\uffe8\050\uffe8\051\uffe8\052\uffe8\053\uffe8\054" +
    "\uffe8\055\uffe8\056\uffe8\060\uffe8\063\uffe8\064\uffe8\065\uffe8" +
    "\066\uffe8\072\uffe8\073\uffe8\074\uffe8\001\002\000\046\003" +
    "\017\004\240\033\241\034\ufff3\050\012\051\014\052\006" +
    "\053\010\054\013\055\024\056\236\060\227\064\243\065" +
    "\224\066\253\072\016\073\244\074\235\001\002\000\004" +
    "\034\u011e\001\002\000\004\064\u011f\001\002\000\004\017" +
    "\u0120\001\002\000\002\001\002\000\004\020\u0122\001\002" +
    "\000\004\027\u0123\001\002\000\050\003\uffd3\004\uffd3\033" +
    "\uffd3\034\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\060\uffd3\063\uffd3\064\uffd3\065\uffd3\066" +
    "\uffd3\072\uffd3\073\uffd3\074\uffd3\001\002\000\050\003\ufff5" +
    "\004\ufff5\033\ufff5\034\ufff5\050\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\060\ufff5\063\ufff5\064\ufff5" +
    "\065\ufff5\066\ufff5\072\ufff5\073\ufff5\074\ufff5\001\002\000" +
    "\014\050\012\051\014\052\006\053\010\054\013\001\002" +
    "\000\004\020\uffdb\001\002\000\016\020\uffdc\050\012\051" +
    "\014\052\006\053\010\054\013\001\002\000\004\020\u0129" +
    "\001\002\000\004\033\u012a\001\002\000\046\003\017\004" +
    "\240\033\241\034\ufff3\050\012\051\014\052\006\053\010" +
    "\054\013\055\024\056\236\060\227\064\243\065\224\066" +
    "\253\072\016\073\244\074\235\001\002\000\004\034\u012c" +
    "\001\002\000\024\003\uffe7\050\uffe7\051\uffe7\052\uffe7\053" +
    "\uffe7\054\uffe7\055\uffe7\067\uffe7\072\uffe7\001\002\000\004" +
    "\053\u012e\001\002\000\004\004\u012f\001\002\000\004\031" +
    "\u0130\001\002\000\004\032\u0131\001\002\000\004\020\u0132" +
    "\001\002\000\004\033\u0133\001\002\000\046\003\017\004" +
    "\240\033\241\034\ufff3\050\012\051\014\052\006\053\010" +
    "\054\013\055\024\056\236\060\227\064\243\065\224\066" +
    "\253\072\016\073\244\074\235\001\002\000\004\034\u0135" +
    "\001\002\000\004\002\uffe3\001\002\000\004\002\001\001" +
    "\002\000\052\003\ufffb\004\ufffb\033\ufffb\034\ufffb\050\ufffb" +
    "\051\ufffb\052\ufffb\053\ufffb\054\ufffb\055\ufffb\056\ufffb\060" +
    "\ufffb\063\ufffb\064\ufffb\065\ufffb\066\ufffb\067\ufffb\072\ufffb" +
    "\073\ufffb\074\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0135\000\022\002\004\003\014\004\020\005\006\006" +
    "\017\010\022\027\021\056\003\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\002\205\003" +
    "\014\004\020\005\006\006\017\010\022\027\021\056\003" +
    "\001\001\000\006\010\204\027\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\201\003\014\004\020" +
    "\005\006\006\017\010\022\027\021\056\003\001\001\000" +
    "\006\043\151\044\153\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\047\050\057\047\060\051\062\033\064\037\066\042\001" +
    "\001\000\002\001\001\000\004\061\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\065\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\057\047\060\067\062\033\064\037" +
    "\066\042\001\001\000\004\067\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\047\053\057\047\060\051" +
    "\062\033\064\037\066\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\065\001\001\000\004\057\063" +
    "\001\001\000\004\057\061\001\001\000\002\001\001\000" +
    "\004\067\062\001\001\000\002\001\001\000\004\067\064" +
    "\001\001\000\002\001\001\000\004\067\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\057\047\060\074\062" +
    "\033\064\037\066\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\057\047\066\103\001\001\000\002\001" +
    "\001\000\006\057\047\066\101\001\001\000\004\065\102" +
    "\001\001\000\002\001\001\000\004\065\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\057\047\060\111\062\033\064\037\066" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\057\047\064\134\066\042\001\001\000\010\057\047\064" +
    "\132\066\042\001\001\000\010\057\047\064\130\066\042" +
    "\001\001\000\010\057\047\064\126\066\042\001\001\000" +
    "\002\001\001\000\010\057\047\064\124\066\042\001\001" +
    "\000\010\057\047\064\122\066\042\001\001\000\004\063" +
    "\123\001\001\000\002\001\001\000\004\063\125\001\001" +
    "\000\002\001\001\000\004\063\127\001\001\000\002\001" +
    "\001\000\004\063\131\001\001\000\002\001\001\000\004" +
    "\063\133\001\001\000\002\001\001\000\004\063\135\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\057\047\062\146\064\037\066" +
    "\042\001\001\000\002\001\001\000\012\057\047\062\144" +
    "\064\037\066\042\001\001\000\004\061\145\001\001\000" +
    "\002\001\001\000\004\061\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\041\154\001\001\000\002\001\001\000\022\012\160" +
    "\020\157\034\156\057\047\060\162\062\033\064\037\066" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\164\042\163\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\057\047\060\176\062\033\064" +
    "\037\066\042\001\001\000\002\001\001\000\014\057\047" +
    "\060\172\062\033\064\037\066\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\041\164\042\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\214\027\215\032\216\035\213\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\232\006\017\010\022\011\254\012\225\013\246" +
    "\014\241\017\253\020\222\021\251\022\245\023\236\024" +
    "\244\025\250\027\021\031\227\033\247\050\231\052\233" +
    "\054\230\055\224\056\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\041\164\042" +
    "\163\001\001\000\014\057\047\060\326\062\033\064\037" +
    "\066\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\056\003\232\006\017\010\022\011\254\012" +
    "\225\013\246\014\241\017\253\020\222\021\307\022\245" +
    "\023\236\024\244\025\250\027\021\031\227\033\247\050" +
    "\231\052\233\054\230\055\224\056\003\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\260" +
    "\001\001\000\016\051\274\057\047\060\265\062\033\064" +
    "\037\066\042\001\001\000\006\043\261\044\262\001\001" +
    "\000\002\001\001\000\004\041\154\001\001\000\016\051" +
    "\264\057\047\060\265\062\033\064\037\066\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\051\267\057" +
    "\047\060\265\062\033\064\037\066\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\003\232\006\017\010" +
    "\022\011\254\012\225\013\246\014\241\017\253\020\222" +
    "\022\245\023\236\024\244\025\250\027\021\031\227\033" +
    "\272\050\231\052\233\054\230\055\224\056\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\051\276\057\047\060\265\062\033\064\037\066\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\003" +
    "\232\006\017\010\022\011\254\012\225\013\246\014\241" +
    "\017\253\020\222\022\245\023\236\024\244\025\250\027" +
    "\021\031\227\033\301\050\231\052\233\054\230\055\224" +
    "\056\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\304\001\001\000\002\001\001\000\014\057\047" +
    "\060\306\062\033\064\037\066\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\057\047\060\317\062\033" +
    "\064\037\066\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\232\006\017\010\022" +
    "\011\254\012\225\013\246\014\241\017\253\020\222\021" +
    "\323\022\245\023\236\024\244\025\250\027\021\031\227" +
    "\033\247\050\231\052\233\054\230\055\224\056\003\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\052\331\053" +
    "\333\057\047\060\332\062\033\064\037\066\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\052\331\053\335\057\047\060\332\062\033\064\037" +
    "\066\042\001\001\000\002\001\001\000\024\012\160\020" +
    "\157\034\156\046\356\057\047\060\162\062\033\064\037" +
    "\066\042\001\001\000\002\001\001\000\012\026\341\027" +
    "\215\032\216\035\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\041\164\042\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\057\047\060\351\062\033\064\037\066\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\057\047" +
    "\060\354\062\033\064\037\066\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\057\047" +
    "\060\360\062\033\064\037\066\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\232\006\017\010\022" +
    "\011\254\012\225\013\246\014\241\017\253\020\222\021" +
    "\363\022\245\023\236\024\244\025\250\027\021\031\227" +
    "\033\247\050\231\052\233\054\230\055\224\056\003\001" +
    "\001\000\002\001\001\000\004\037\366\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\232\006\017\010\022\011\254\012\225\013\246\014\241" +
    "\017\253\020\222\021\371\022\245\023\236\024\244\025" +
    "\250\027\021\031\227\033\247\050\231\052\233\054\230" +
    "\055\224\056\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\057\047\060\374\062\033\064\037\066\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\056\003" +
    "\232\006\017\010\022\011\254\012\225\013\246\014\241" +
    "\017\253\020\222\021\377\022\245\023\236\024\244\025" +
    "\250\027\021\031\227\033\247\050\231\052\233\054\230" +
    "\055\224\056\003\001\001\000\002\001\001\000\004\037" +
    "\u0101\001\001\000\002\001\001\000\014\057\047\060\u0103" +
    "\062\033\064\037\066\042\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\057\047\060\u0108\062\033\064\037\066\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\040\u010c\001\001" +
    "\000\014\057\047\060\u0113\062\033\064\037\066\042\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\232" +
    "\006\017\010\022\011\254\012\225\013\246\014\241\017" +
    "\253\020\222\021\u010f\022\245\023\236\024\244\025\250" +
    "\027\021\031\227\033\247\050\231\052\233\054\230\055" +
    "\224\056\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\056\003\232\006\017\010\022\011\254\012\225\013\246" +
    "\014\241\017\253\020\222\021\u0115\022\245\023\236\024" +
    "\244\025\250\027\021\031\227\033\247\050\231\052\233" +
    "\054\230\055\224\056\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\u0118\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\056\003\232\006" +
    "\017\010\022\011\254\012\225\013\246\014\241\017\253" +
    "\020\222\021\u011c\022\245\023\236\024\244\025\250\027" +
    "\021\031\227\033\247\050\231\052\233\054\230\055\224" +
    "\056\003\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\036\u0120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\027\215\032\u0125\035\213\001\001\000\002\001\001" +
    "\000\012\026\u0127\027\215\032\216\035\213\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\232\006\017" +
    "\010\022\011\254\012\225\013\246\014\241\017\253\020" +
    "\222\021\u012a\022\245\023\236\024\244\025\250\027\021" +
    "\031\227\033\247\050\231\052\233\054\230\055\224\056" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\232" +
    "\006\017\010\022\011\254\012\225\013\246\014\241\017" +
    "\253\020\222\021\u0133\022\245\023\236\024\244\025\250" +
    "\027\021\031\227\033\247\050\231\052\233\054\230\055" +
    "\224\056\003\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    /**********************************************************************
     *             Creació i Gestió de la Taula de Simbols                *
     **********************************************************************/

    Taula taula_simbols = new Taula();

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    private boolean errorSemantic = false;

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);
    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> DECL PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= PROCEDIMENT PROGRAMA 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> PROCEDIMENT PROGRAMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= MAIN 
            {
              Object RESULT =null;
		System.out.println("PROGRAMA -> MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL ::= DECL_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= DECL_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("DECL -> DECL_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= DECL_CONST PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DECL ::= error PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODIF ::= MODIF_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> TUPLA PUNITCOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODIF ::= REM_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REM_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODIF ::= AFG_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> AFG_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIF ::= REDEF_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> REDEF_TUPLA PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIF ::= MODIF_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("MODIF -> MODIF_TIPUS PUNTICOMA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIES ::= SENT SENTENCIES 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> SENT SENTENCIES");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIES ::= 
            {
              Object RESULT =null;
		System.out.println("SENTENCIES -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENT ::= DECL 
            {
              Object RESULT =null;
		System.out.println("SENT -> DECL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= MODIF 
            {
              Object RESULT =null;
		System.out.println("SENT -> MODIF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= MENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= FMENTRE 
            {
              Object RESULT =null;
		System.out.println("SENT -> FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= IF 
            {
              Object RESULT =null;
		System.out.println("SENT -> IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= SWITCH 
            {
              Object RESULT =null;
		System.out.println("SENT -> SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= CRIDA_PROC 
            {
              Object RESULT =null;
		System.out.println("SENT -> CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= FOR 
            {
              Object RESULT =null;
		System.out.println("SENT -> FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENT ::= OP_CONDICIONAL PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> OP_CONDICIONAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENT ::= ENTRADAS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> ENTRADAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENT ::= SORTIDAS PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SENT -> SORTIDAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // PROCEDIMENT ::= metode ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PROCEDIMENT ::= metode TIPUS ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT RETURN 
            {
              Object RESULT =null;
		System.out.println("PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURN ::= retorna E 
            {
              Object RESULT =null;
		System.out.println("RETURN -> retorna E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CRIDA_PROC ::= ID LPAREN ARGS RPAREN PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("CRIDA_PROC");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDA_PROC",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MAIN ::= metode main LPAREN cadena ID LCORCH RCORCH RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("MAIN");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPUS ::= decimal 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> decimal");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPUS ::= enter 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> enter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPUS ::= logic 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> logic");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TIPUS ::= cadena 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> cadena");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TIPUS ::= caracter 
            {
              Object RESULT =null;
		System.out.println("TIPUS -> caracter");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGS ::= ARGS_1 
            {
              Object RESULT =null;
		System.out.println("ARGS -> ARGS_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARGS ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARGS_1 ::= ARG COMA ARGS_1 
            {
              Object RESULT =null;
		System.out.println("ARGS_1 -> ARG COMA ARGS_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARGS_1 ::= ARG 
            {
              Object RESULT =null;
		System.out.println("ARGS_1 -> ARG");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARG ::= TIPUS ID 
            {
              Object RESULT =null;
		System.out.println("ARG -> TIPUS ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MENTRE ::= mentres LPAREN E RPAREN fer LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("MENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MENTRE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF ::= si LPAREN E RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		System.out.println("IF");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // IF_1 ::= sino si LPAREN E RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		System.out.println("IF_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // IF_1 ::= sino LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("IF_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // IF_1 ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FMENTRE ::= fer LCLAUDAT SENTENCIES RCLAUDAT mentres LPAREN L RPAREN PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("FMENTRE");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FMENTRE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= per LPAREN TIPUS A PUNTICOMA FOR_1 PUNTICOMA FOR_1 RPAREN LCLAUDAT SENT RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FOR ::= per LPAREN PUNTICOMA FOR_1 PUNTICOMA FOR_1 RPAREN LCLAUDAT SENT RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("FOR");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FOR_1 ::= E 
            {
              Object RESULT =null;
		System.out.println("FOR_1 -> E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_1",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FOR_1 ::= 
            {
              Object RESULT =null;
		System.out.println("FOR_1 -> NULL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_1",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP_CONDICIONAL ::= LCLAUDAT E RCLAUDAT INTERROG OP_CONDICIONAL_1 DOSPUNTS OP_CONDICIONAL_1 
            {
              Object RESULT =null;
		System.out.println("OP_CONDICIONAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_CONDICIONAL",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OP_CONDICIONAL_1 ::= OP_CONDICIONAL 
            {
              Object RESULT =null;
		System.out.println("OP_CONDICIONAL_1 -> OP_CONDICIONAL");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_CONDICIONAL_1",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP_CONDICIONAL_1 ::= E 
            {
              Object RESULT =null;
		System.out.println("OP_CONDICIONAL_1 -> E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP_CONDICIONAL_1",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ENTRADAS ::= entradaS LPAREN TIPUS COMA ID RPAREN 
            {
              Object RESULT =null;
		System.out.println("ENTRADAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENTRADAS",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SORTIDAS ::= sortidaS LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("SORTIDAS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SORTIDAS",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SWITCH ::= seleccio LPAREN E RPAREN LCLAUDAT SWITCH_1 RCLAUDAT 
            {
              Object RESULT =null;
		System.out.println("SWITCH");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SWITCH_1 ::= cas E DOSPUNTS SENTENCIES acaba PUNTICOMA SWITCH_1 
            {
              Object RESULT =null;
		System.out.println("SWITCH_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SWITCH_1 ::= pdefecte DOSPUNTS SENTENCIES acaba PUNTICOMA 
            {
              Object RESULT =null;
		System.out.println("SWITCH_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SWITCH_1 ::= 
            {
              Object RESULT =null;
		System.out.println("@");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECL_CONST ::= constant DECL_TIPUS 
            {
              Object RESULT =null;
		System.out.println("DECL_CONST -> constant DECL_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_CONST",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECL_TIPUS ::= TIPUS A 
            {
              Object RESULT =null;
		System.out.println("DECL_TIPUS -> TIPUS A ");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECL_TIPUS ::= TIPUS A_1 
            {
              Object RESULT =null;
		System.out.println("DECL_TIPUS -> TIPUS A_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // MODIF_TIPUS ::= ID I_1 
            {
              Object RESULT =null;
		System.out.println("MODIF_TIPUS -> ID I_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // A ::= A_1 I 
            {
              Object RESULT =null;
		System.out.println("A");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // A_1 ::= ID COMA A_1 
            {
              Object RESULT =null;
		System.out.println("A_1 -> ID COMA A_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // A_1 ::= ID 
            {
              Object RESULT =null;
		System.out.println("A_1 -> ID");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // I ::= ASSIGN E 
            {
              Object RESULT =null;
		System.out.println("I -> ASSIGN E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // I ::= ASSIGN MODIF_TIPUS 
            {
              Object RESULT =null;
		System.out.println("ASSIGN MODIF_TIPUS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // I ::= ASSIGN MODIF_TUPLA 
            {
              Object RESULT =null;
		System.out.println("ASSIGN MODIF_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // I ::= ASSIGN VAL_TUPLA 
            {
              Object RESULT =null;
		System.out.println("ASSIGN VAL_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // I_1 ::= AUTOSUM 
            {
              Object RESULT =null;
		System.out.println("I_1 -> AUTOSUM");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // I_1 ::= AUTOSUB 
            {
              Object RESULT =null;
		System.out.println("I_1 -> AUTOSUB");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // I_1 ::= SUMAHI E 
            {
              Object RESULT =null;
		System.out.println("I_1 -> SUMAHI E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // I_1 ::= RESTAHI E 
            {
              Object RESULT =null;
		System.out.println("I_1 -> RESTAHI E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // I_1 ::= I 
            {
              Object RESULT =null;
		System.out.println("I_1 -> I");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // VALORS ::= E 
            {
              Object RESULT =null;
		System.out.println("VALORS -> E");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VALORS ::= E COMA VALORS 
            {
              Object RESULT =null;
		System.out.println("VALORS -> E  COMA VALORS");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VAL_TUPLA ::= ID LPAREN venter RPAREN 
            {
              Object RESULT =null;
		System.out.println("VAL_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VAL_TUPLA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECL_TUPLA ::= tupla ID LPAREN RPAREN NOVA_TUPLA 
            {
              Object RESULT =null;
		System.out.println("DECL_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECL_TUPLA ::= tupla ID LPAREN RPAREN 
            {
              Object RESULT =null;
		System.out.println("DECL_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NOVA_TUPLA ::= ASSIGN LPAREN VALORS RPAREN 
            {
              Object RESULT =null;
		System.out.println("NOVA_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TUPLA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MODIF_TUPLA ::= ID LPAREN venter RPAREN I_1 
            {
              Object RESULT =null;
		System.out.println("MODIF_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TUPLA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // REM_TUPLA ::= ID PUNT borra LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("REM_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REM_TUPLA",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AFG_TUPLA ::= ID PUNT afegeix LPAREN E RPAREN 
            {
              Object RESULT =null;
		System.out.println("ARG_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AFG_TUPLA",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // REDEF_TUPLA ::= ID ASSIGN NOVA_TUPLA 
            {
              Object RESULT =null;
		System.out.println("REDEF_TUPLA");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REDEF_TUPLA",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // E ::= T E_1 
            {
              SimbolE RESULT =null;
		System.out.println("E -> T E_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // E_1 ::= AND T E_1 
            {
              SimbolEp RESULT =null;
		System.out.println("E_1 -> AND T E_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // E_1 ::= OR T E_1 
            {
              SimbolEp RESULT =null;
		System.out.println("E_1 -> OR T E_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // E_1 ::= 
            {
              SimbolEp RESULT =null;
		System.out.println("E_1 -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E_1",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // T ::= N T_1 
            {
              SimbolT RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // T_1 ::= IGIG N T_1 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> IGIG N T_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // T_1 ::= DIF N T_1 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> DIF N T_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // T_1 ::= MENOR N T_1 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> MENOR N T_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // T_1 ::= MAJOR N T_1 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> MAJOR N T_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // T_1 ::= MENORI N T_1 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> MENORI N T_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // T_1 ::= MAJORI N T_1 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> MAJORI N T_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // T_1 ::= 
            {
              SimbolTp RESULT =null;
		System.out.println("T_1 -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("T_1",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // N ::= M N_1 
            {
              SimbolN RESULT =null;
		System.out.println("N -> M N_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // N_1 ::= ADD M N_1 
            {
              SimbolNp RESULT =null;
		System.out.println("N_1 -> ADD M N_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // N_1 ::= SUB M N_1 
            {
              SimbolNp RESULT =null;
		System.out.println("N_1 -> SUB M N_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // N_1 ::= 
            {
              SimbolNp RESULT =null;
		System.out.println("N_1 -> @");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("N_1",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // M ::= F M_1 
            {
              SimbolM RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M -> F M_1");
        if(errorSemantic){
            RESULT = new SimbolM();
        }else{
            if(m.getTsb()=="ts_nul"){ //vol dir que M_1 -> @
                RESULT = new SimbolM(f.getTsb(),f.getTipus(),f.getMode());
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f
                m.setTs_heretat(f.getTsb());
                
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // M_1 ::= MULT F M_1 
            {
              SimbolMp RESULT =null;
		System.out.println("M_1 -> MULT F M_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // M_1 ::= DIV F M_1 
            {
              SimbolMp RESULT =null;
		System.out.println("M_1 -> DIV F M_1");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // M_1 ::= MOD F M_1 
            {
              SimbolMp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolF f = (SimbolF)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimbolMp m = (SimbolMp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("M_1 -> MOD F M_1");

        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if(m.getTsb() == "ts_nul"){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error("El terminal no es adequat per una operació de mòdul", f);
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MOD,"moderesult");
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")){
                    report_error("El terminal no es adequat per una operació de mòdul", f);
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = cadena o decimal o caracter 
                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    if(resultat == "ts_nul"){
                        report_error("No es pot fer una operació de mòdul amb decimals", f);
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.MOD,"moderesult");
                    }

                }
            }
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // M_1 ::= 
            {
              SimbolMp RESULT =null;
		System.out.println("M_1 -> @");
        RESULT = new SimbolMp();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("M_1",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // F ::= LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("F -> LPAREN E RPAREN");
                if(errorSemantic){
                    RESULT = new SimbolF();
                }else{
                    if(e.getTsb() == "ts_nul"){
                        RESULT = new SimbolF(); // cas -(id)-> -(F) -> -(E) on id es una tupla, E tendrà ts_nul
                        //considerar si hauriem d'afegir el tipus de E així i tot.
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult"); //no tenc clar es mode
                    }   
                } 
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // F ::= venter 
            {
              SimbolF RESULT =null;
		System.out.println("F -> venter");
                RESULT = new SimbolF("ts_enter","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // F ::= SUB venter 
            {
              SimbolF RESULT =null;
		System.out.println("F -> SUB venter");
                RESULT = new SimbolF("ts_enter","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // F ::= ADD venter 
            {
              SimbolF RESULT =null;
		System.out.println("F -> ADD venter");
                RESULT = new SimbolF("ts_enter","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // F ::= vdecimal 
            {
              SimbolF RESULT =null;
		System.out.println("F -> vdecimal");
                RESULT = new SimbolF("ts_decimal","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // F ::= ADD vdecimal 
            {
              SimbolF RESULT =null;
		System.out.println("F -> ADD vdecimal");
                RESULT = new SimbolF("ts_decimal","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // F ::= SUB vdecimal 
            {
              SimbolF RESULT =null;
		System.out.println("F -> SUB vdecimal");
                RESULT = new SimbolF("ts_decimal","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // F ::= vcaracter 
            {
              SimbolF RESULT =null;
		System.out.println("F -> vcaracter");
                RESULT = new SimbolF("ts_caracter","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // F ::= ADD vcaracter 
            {
              SimbolF RESULT =null;
		System.out.println("F -> ADD");
                RESULT = new SimbolF("ts_caracter","id_nula","modeconst"); //assegurar que a car hi posam ts_caracter
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // F ::= SUB vcaracter 
            {
              SimbolF RESULT =null;
		System.out.println("F -> SUB");
                RESULT = new SimbolF("ts_caracter","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // F ::= vcadena 
            {
              SimbolF RESULT =null;
		System.out.println("F -> vcadena");
                RESULT = new SimbolF("ts_cadena","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // F ::= ID 
            {
              SimbolF RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> ID");
                Descripcio descripcio = taula_simbols.consulta(id);
                if(descripcio == null){ //si l'identificador no es troba a la taula de símbols
                    report_error("Undefined id \""+id+"\"", id);
                    errorSemantic = true;
                    RESULT  = new SimbolF();
                }else{ //mirar si accepta tuples
                    if(descripcio instanceof Dvar){
                        Dvar var = (Dvar) descripcio;
                        Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR
                        RESULT = new SimbolF(tipus.dt().tipus_subjacent(),var.tipus(),"modevar");
                    }else if(descripcio instanceof Dconst){
                        Dconst cons = (Dconst) descripcio;
                        Dtipus tipus = (Dtipus) taula_simbols.consulta(cons.tipus()); //ALERTA EN NO TROBAR
                        RESULT = new SimbolF(tipus.dt().tipus_subjacent(),cons.tipus(),"modeconst");
                    }else{
                        report_error("L'identificador: "+id+" té el tipus erroni per a expresions",id);
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // F ::= vlogic 
            {
              SimbolF RESULT =null;
		System.out.println("F -> vlogic");
                RESULT = new SimbolF("ts_boolea","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // F ::= SUB LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("F -> SUB LPAREN E RPAREN"); //REVISAR

                if(errorSemantic){ //si s'ha comés un error Semantic a E
                   RESULT  = new SimbolF(); 
                }else{
                    if(e.getTsb() == "ts_nul"){
                        RESULT = new SimbolF(); // cas -(id)-> -(F) -> -(E) on id es una tupla, E tendrà ts_nul
                    }else if((e.getTsb() != "ts_enter")&&(e.getTsb() != "ts_decimal")&&(e.getTsb() != "ts_caracter")){
                        report_error("L'expresió E no té un tipus subjacent adequat",e);
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult");
                    } 
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // F ::= NOT vlogic 
            {
              SimbolF RESULT =null;
		System.out.println("F -> NOT vlogic");
                RESULT = new SimbolF("ts_boolea","id_nula","modeconst");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // F ::= NOT ID 
            {
              SimbolF RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		System.out.println("F -> NOT ID");
                Descripcio descripcio = taula_simbols.consulta(id);

                if(descripcio == null){ //si l'identificador no es troba a la taula de símbols
                    report_error("Undefined id \""+id+"\"", id);
                    errorSemantic = true;
                    RESULT  = new SimbolF();
                }else{
                    if(descripcio instanceof Dvar){
                        Dvar var = (Dvar) descripcio;
                        Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR

                        if(tipus.dt().tipus_subjacent()!= "ts_boolea"){
                            report_error("L'identificador: "+id+" té el tipus erroni per al NOT",id);
                            errorSemantic = true;
                            RESULT  = new SimbolF();
                        }else{
                            RESULT = new SimbolF(tipus.dt().tipus_subjacent(),var.tipus(),"modeconst");
                        }
                        
                    }else if(descripcio instanceof Dconst){
                        Dconst cons = (Dconst) descripcio;
                        Dtipus tipus = (Dtipus) taula_simbols.consulta(cons.tipus()); //ALERTA EN NO TROBAR

                        if(tipus.dt().tipus_subjacent()!= "ts_boolea"){
                            report_error("L'identificador: "+id+" té el tipus erroni per al NOT",id);
                            errorSemantic = true;
                            RESULT  = new SimbolF();
                        }else{
                          RESULT = new SimbolF(tipus.dt().tipus_subjacent(),cons.tipus(),"moderesult");  
                        }
                    }else{
                        report_error("L'identificador: "+id+" té el tipus erroni per al NOT",id);
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }
                }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // F ::= NOT LPAREN E RPAREN 
            {
              SimbolF RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimbolE e = (SimbolE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		System.out.println("F -> NOT LPAREN E RPAREN"); //posar error semantic
                if(errorSemantic){ //si a E s'ha comés un error semántic
                    RESULT  = new SimbolF();
                }else{
                    if(e.getTsb() == "ts_nul"){
                        RESULT = new SimbolF(); // cas -(id)-> -(F) -> -(E) on id es una tupla, E tendrà ts_nul
                    }else if(e.getTsb() != "ts_boolea"){
                        report_error("L'expresió E no té un tipus subjacent adequat",e);
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult");
                    }   
                }
                
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
