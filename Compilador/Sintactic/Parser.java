
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

package Compilador.Sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java.io.PrintStream;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\166\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\011\004\000\002\011\004\000" +
    "\002\011\004\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\003\000\002\021\004\000\002\021" +
    "\002\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\004\012\000\002\004\014\000\002" +
    "\030\004\000\002\032\007\000\002\005\015\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\026\003\000\002\026\002\000" +
    "\002\033\005\000\002\033\003\000\002\035\004\000\002" +
    "\022\012\000\002\023\012\000\002\037\013\000\002\037" +
    "\006\000\002\037\002\000\002\025\013\000\002\024\011" +
    "\000\002\040\011\000\002\040\007\000\002\040\002\000" +
    "\002\010\004\000\002\010\004\000\002\020\004\000\002" +
    "\043\004\000\002\044\005\000\002\044\003\000\002\041" +
    "\004\000\002\041\004\000\002\041\004\000\002\041\004" +
    "\000\002\042\003\000\002\042\003\000\002\042\004\000" +
    "\002\042\004\000\002\042\003\000\002\007\010\000\002" +
    "\007\006\000\002\046\007\000\002\046\005\000\002\056" +
    "\003\000\002\056\005\000\002\031\003\000\002\015\007" +
    "\000\002\016\005\000\002\006\007\000\002\006\006\000" +
    "\002\047\006\000\002\012\007\000\002\013\010\000\002" +
    "\014\010\000\002\017\005\000\002\045\004\000\002\051" +
    "\005\000\002\051\005\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\051\002\000\002\050\005\000" +
    "\002\050\003\000\002\050\004\000\002\050\004\000\002" +
    "\050\003\000\002\050\004\000\002\050\004\000\002\050" +
    "\003\000\002\050\004\000\002\050\004\000\002\050\003" +
    "\000\002\050\003\000\002\050\003\000\002\036\003\000" +
    "\002\036\005\000\002\036\005\000\002\036\003\000\002" +
    "\053\003\000\002\053\003\000\002\052\006\000\002\052" +
    "\005\000\002\052\003\000\002\054\005\000\002\054\006" +
    "\000\002\054\006\000\002\054\007\000\002\055\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\055\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\020\050\011\051\013\052\005\053\007\054" +
    "\012\055\021\067\010\001\002\000\004\002\u0110\001\002" +
    "\000\004\004\uffe3\001\002\000\004\002\ufffe\001\002\000" +
    "\004\004\uffe2\001\002\000\020\004\217\050\011\051\013" +
    "\052\005\053\007\054\012\075\220\001\002\000\004\004" +
    "\uffe5\001\002\000\004\004\uffe1\001\002\000\004\004\uffe4" +
    "\001\002\000\020\050\011\051\013\052\005\053\007\054" +
    "\012\055\021\067\010\001\002\000\004\027\215\001\002" +
    "\000\020\050\011\051\013\052\005\053\007\054\012\055" +
    "\021\067\010\001\002\000\004\004\144\001\002\000\004" +
    "\027\142\001\002\000\004\004\024\001\002\000\004\027" +
    "\023\001\002\000\040\004\ufffc\020\ufffc\034\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055\ufffc\056\ufffc\060" +
    "\ufffc\063\ufffc\064\ufffc\065\ufffc\067\ufffc\001\002\000\004" +
    "\017\025\001\002\000\004\020\026\001\002\000\006\021" +
    "\030\027\uffb8\001\002\000\004\027\uffb9\001\002\000\004" +
    "\017\031\001\002\000\026\004\041\005\033\006\045\007" +
    "\034\010\035\011\043\012\037\013\040\017\046\047\044" +
    "\001\002\000\010\020\uffbe\034\uffbe\036\140\001\002\000" +
    "\100\004\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\020\uffa7\026\uffa7\027\uffa7\034\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056" +
    "\uffa7\060\uffa7\063\uffa7\064\uffa7\065\uffa7\067\uffa7\001\002" +
    "\000\100\004\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\020\uff9f\026\uff9f\027\uff9f\034\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054\uff9f\055\uff9f" +
    "\056\uff9f\060\uff9f\063\uff9f\064\uff9f\065\uff9f\067\uff9f\001" +
    "\002\000\100\004\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1" +
    "\016\uffa1\020\uffa1\026\uffa1\027\uffa1\034\uffa1\036\uffa1\037" +
    "\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\050\uffa1\051\uffa1\052\uffa1\053\uffa1\054\uffa1\055" +
    "\uffa1\056\uffa1\060\uffa1\063\uffa1\064\uffa1\065\uffa1\067\uffa1" +
    "\001\002\000\052\004\uff96\020\uff96\026\uff96\027\uff96\034" +
    "\uff96\036\uff96\045\uff96\046\uff96\050\uff96\051\uff96\052\uff96" +
    "\053\uff96\054\uff96\055\uff96\056\uff96\060\uff96\063\uff96\064" +
    "\uff96\065\uff96\067\uff96\001\002\000\010\005\135\006\136" +
    "\011\137\001\002\000\010\005\132\006\133\011\134\001" +
    "\002\000\100\004\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\016\uffa0\020\uffa0\026\uffa0\027\uffa0\034\uffa0\036\uffa0\037" +
    "\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045\uffa0" +
    "\046\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055" +
    "\uffa0\056\uffa0\060\uffa0\063\uffa0\064\uffa0\065\uffa0\067\uffa0" +
    "\001\002\000\046\004\uffbc\020\uffbc\026\uffbc\027\uffbc\034" +
    "\uffbc\036\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc" +
    "\055\uffbc\056\uffbc\060\uffbc\063\uffbc\064\uffbc\065\uffbc\067" +
    "\uffbc\001\002\000\100\004\uffa4\012\uffa4\013\uffa4\014\uffa4" +
    "\015\uffa4\016\uffa4\020\uffa4\026\uffa4\027\uffa4\034\uffa4\036" +
    "\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4" +
    "\045\uffa4\046\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\055\uffa4\056\uffa4\060\uffa4\063\uffa4\064\uffa4\065\uffa4" +
    "\067\uffa4\001\002\000\024\004\041\005\033\006\045\007" +
    "\034\010\035\011\043\012\037\013\040\017\122\001\002" +
    "\000\100\004\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016" +
    "\uffaa\020\uffaa\026\uffaa\027\uffaa\034\uffaa\036\uffaa\037\uffaa" +
    "\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa\045\uffaa\046" +
    "\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054\uffaa\055\uffaa" +
    "\056\uffaa\060\uffaa\063\uffaa\064\uffaa\065\uffaa\067\uffaa\001" +
    "\002\000\026\004\041\005\033\006\045\007\034\010\035" +
    "\011\043\012\037\013\040\017\046\047\044\001\002\000" +
    "\100\004\uffac\012\103\013\101\014\102\015\104\016\100" +
    "\020\uffac\026\uffac\027\uffac\034\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\060\uffac\063\uffac\064\uffac\065\uffac\067\uffac\001\002" +
    "\000\052\004\uff9e\020\uff9e\026\uff9e\027\uff9e\034\uff9e\036" +
    "\uff9e\045\064\046\053\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\054\uff9e\055\uff9e\056\uff9e\060\uff9e\063\uff9e\064\uff9e\065" +
    "\uff9e\067\uff9e\001\002\000\004\020\074\001\002\000\066" +
    "\004\uff9b\020\uff9b\026\uff9b\027\uff9b\034\uff9b\036\uff9b\037" +
    "\056\040\063\041\062\042\054\043\055\044\057\045\064" +
    "\046\053\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054\uff9b\055" +
    "\uff9b\056\uff9b\060\uff9b\063\uff9b\064\uff9b\065\uff9b\067\uff9b" +
    "\001\002\000\026\004\uff99\005\uff99\006\uff99\007\uff99\010" +
    "\uff99\011\uff99\012\uff99\013\uff99\017\uff99\047\uff99\001\002" +
    "\000\026\004\uff90\005\uff90\006\uff90\007\uff90\010\uff90\011" +
    "\uff90\012\uff90\013\uff90\017\uff90\047\uff90\001\002\000\026" +
    "\004\uff8f\005\uff8f\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012" +
    "\uff8f\013\uff8f\017\uff8f\047\uff8f\001\002\000\026\004\uff8c" +
    "\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c\012\uff8c\013" +
    "\uff8c\017\uff8c\047\uff8c\001\002\000\026\004\uff8e\005\uff8e" +
    "\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e\017" +
    "\uff8e\047\uff8e\001\002\000\026\004\041\005\033\006\045" +
    "\007\034\010\035\011\043\012\037\013\040\017\067\047" +
    "\066\001\002\000\026\004\041\005\033\006\045\007\034" +
    "\010\035\011\043\012\037\013\040\017\046\047\044\001" +
    "\002\000\026\004\uff91\005\uff91\006\uff91\007\uff91\010\uff91" +
    "\011\uff91\012\uff91\013\uff91\017\uff91\047\uff91\001\002\000" +
    "\026\004\uff8d\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d" +
    "\012\uff8d\013\uff8d\017\uff8d\047\uff8d\001\002\000\026\004" +
    "\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a" +
    "\013\uff9a\017\uff9a\047\uff9a\001\002\000\046\004\uff9c\020" +
    "\uff9c\026\uff9c\027\uff9c\034\uff9c\036\uff9c\050\uff9c\051\uff9c" +
    "\052\uff9c\053\uff9c\054\uff9c\055\uff9c\056\uff9c\060\uff9c\063" +
    "\uff9c\064\uff9c\065\uff9c\067\uff9c\001\002\000\024\004\041" +
    "\005\033\006\045\007\034\010\035\011\043\012\037\013" +
    "\040\017\067\001\002\000\024\004\041\005\033\006\045" +
    "\007\034\010\035\011\043\012\037\013\040\017\067\001" +
    "\002\000\052\004\uff95\020\uff95\026\uff95\027\uff95\034\uff95" +
    "\036\uff95\045\uff95\046\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\060\uff95\063\uff95\064\uff95" +
    "\065\uff95\067\uff95\001\002\000\004\020\072\001\002\000" +
    "\100\004\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\020\uffab\026\uffab\027\uffab\034\uffab\036\uffab\037\uffab\040" +
    "\uffab\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab" +
    "\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056" +
    "\uffab\060\uffab\063\uffab\064\uffab\065\uffab\067\uffab\001\002" +
    "\000\052\004\uff93\020\uff93\026\uff93\027\uff93\034\uff93\036" +
    "\uff93\045\uff93\046\uff93\050\uff93\051\uff93\052\uff93\053\uff93" +
    "\054\uff93\055\uff93\056\uff93\060\uff93\063\uff93\064\uff93\065" +
    "\uff93\067\uff93\001\002\000\004\027\uffb7\001\002\000\026" +
    "\004\041\005\033\006\045\007\034\010\035\011\043\012" +
    "\037\013\040\017\046\047\044\001\002\000\046\004\uff9d" +
    "\020\uff9d\026\uff9d\027\uff9d\034\uff9d\036\uff9d\050\uff9d\051" +
    "\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\060\uff9d" +
    "\063\uff9d\064\uff9d\065\uff9d\067\uff9d\001\002\000\066\004" +
    "\uffb2\020\uffb2\026\uffb2\027\uffb2\034\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\046" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\055\uffb2" +
    "\056\uffb2\060\uffb2\063\uffb2\064\uffb2\065\uffb2\067\uffb2\001" +
    "\002\000\024\004\041\005\033\006\045\007\034\010\035" +
    "\011\043\012\037\013\040\017\067\001\002\000\024\004" +
    "\041\005\033\006\045\007\034\010\035\011\043\012\037" +
    "\013\040\017\067\001\002\000\024\004\041\005\033\006" +
    "\045\007\034\010\035\011\043\012\037\013\040\017\067" +
    "\001\002\000\024\004\041\005\033\006\045\007\034\010" +
    "\035\011\043\012\037\013\040\017\067\001\002\000\024" +
    "\004\041\005\033\006\045\007\034\010\035\011\043\012" +
    "\037\013\040\017\067\001\002\000\100\004\uffac\012\103" +
    "\013\101\014\102\015\104\016\100\020\uffac\026\uffac\027" +
    "\uffac\034\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051\uffac\052" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\060\uffac\063\uffac" +
    "\064\uffac\065\uffac\067\uffac\001\002\000\066\004\uffae\020" +
    "\uffae\026\uffae\027\uffae\034\uffae\036\uffae\037\uffae\040\uffae" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046\uffae\050" +
    "\uffae\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\056\uffae" +
    "\060\uffae\063\uffae\064\uffae\065\uffae\067\uffae\001\002\000" +
    "\100\004\uffac\012\103\013\101\014\102\015\104\016\100" +
    "\020\uffac\026\uffac\027\uffac\034\uffac\036\uffac\037\uffac\040" +
    "\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\060\uffac\063\uffac\064\uffac\065\uffac\067\uffac\001\002" +
    "\000\066\004\uffb1\020\uffb1\026\uffb1\027\uffb1\034\uffb1\036" +
    "\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\045\uffb1\046\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\054" +
    "\uffb1\055\uffb1\056\uffb1\060\uffb1\063\uffb1\064\uffb1\065\uffb1" +
    "\067\uffb1\001\002\000\100\004\uffac\012\103\013\101\014" +
    "\102\015\104\016\100\020\uffac\026\uffac\027\uffac\034\uffac" +
    "\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\050\uffac\051\uffac\052\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\060\uffac\063\uffac\064\uffac\065" +
    "\uffac\067\uffac\001\002\000\066\004\uffaf\020\uffaf\026\uffaf" +
    "\027\uffaf\034\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf\063" +
    "\uffaf\064\uffaf\065\uffaf\067\uffaf\001\002\000\100\004\uffac" +
    "\012\103\013\101\014\102\015\104\016\100\020\uffac\026" +
    "\uffac\027\uffac\034\uffac\036\uffac\037\uffac\040\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056\uffac\060\uffac" +
    "\063\uffac\064\uffac\065\uffac\067\uffac\001\002\000\066\004" +
    "\uffb0\020\uffb0\026\uffb0\027\uffb0\034\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046" +
    "\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0" +
    "\056\uffb0\060\uffb0\063\uffb0\064\uffb0\065\uffb0\067\uffb0\001" +
    "\002\000\100\004\uffac\012\103\013\101\014\102\015\104" +
    "\016\100\020\uffac\026\uffac\027\uffac\034\uffac\036\uffac\037" +
    "\uffac\040\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\046\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055" +
    "\uffac\056\uffac\060\uffac\063\uffac\064\uffac\065\uffac\067\uffac" +
    "\001\002\000\066\004\uffad\020\uffad\026\uffad\027\uffad\034" +
    "\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\046\uffad\050\uffad\051\uffad\052\uffad\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\060\uffad\063\uffad\064\uffad" +
    "\065\uffad\067\uffad\001\002\000\004\020\121\001\002\000" +
    "\020\020\072\037\056\040\063\041\062\042\054\043\055" +
    "\044\057\001\002\000\052\004\uff97\020\uff97\026\uff97\027" +
    "\uff97\034\uff97\036\uff97\045\uff97\046\uff97\050\uff97\051\uff97" +
    "\052\uff97\053\uff97\054\uff97\055\uff97\056\uff97\060\uff97\063" +
    "\uff97\064\uff97\065\uff97\067\uff97\001\002\000\026\004\041" +
    "\005\033\006\045\007\034\010\035\011\043\012\037\013" +
    "\040\017\046\047\044\001\002\000\016\037\056\040\063" +
    "\041\062\042\054\043\055\044\057\001\002\000\026\004" +
    "\041\005\033\006\045\007\034\010\035\011\043\012\037" +
    "\013\040\017\067\047\125\001\002\000\024\004\041\005" +
    "\033\006\045\007\034\010\035\011\043\012\037\013\040" +
    "\017\067\001\002\000\052\004\uff94\020\uff94\026\uff94\027" +
    "\uff94\034\uff94\036\uff94\045\uff94\046\uff94\050\uff94\051\uff94" +
    "\052\uff94\053\uff94\054\uff94\055\uff94\056\uff94\060\uff94\063" +
    "\uff94\064\uff94\065\uff94\067\uff94\001\002\000\052\004\uff92" +
    "\020\uff92\026\uff92\027\uff92\034\uff92\036\uff92\045\uff92\046" +
    "\uff92\050\uff92\051\uff92\052\uff92\053\uff92\054\uff92\055\uff92" +
    "\056\uff92\060\uff92\063\uff92\064\uff92\065\uff92\067\uff92\001" +
    "\002\000\004\020\131\001\002\000\052\004\uff98\020\uff98" +
    "\026\uff98\027\uff98\034\uff98\036\uff98\045\uff98\046\uff98\050" +
    "\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056\uff98" +
    "\060\uff98\063\uff98\064\uff98\065\uff98\067\uff98\001\002\000" +
    "\100\004\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5" +
    "\020\uffa5\026\uffa5\027\uffa5\034\uffa5\036\uffa5\037\uffa5\040" +
    "\uffa5\041\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5" +
    "\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5\056" +
    "\uffa5\060\uffa5\063\uffa5\064\uffa5\065\uffa5\067\uffa5\001\002" +
    "\000\100\004\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\020\uffa9\026\uffa9\027\uffa9\034\uffa9\036\uffa9\037\uffa9" +
    "\040\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045\uffa9\046" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\060\uffa9\063\uffa9\064\uffa9\065\uffa9\067\uffa9\001" +
    "\002\000\100\004\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\020\uffa2\026\uffa2\027\uffa2\034\uffa2\036\uffa2\037" +
    "\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\060\uffa2\063\uffa2\064\uffa2\065\uffa2\067\uffa2" +
    "\001\002\000\100\004\uffa6\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\020\uffa6\026\uffa6\027\uffa6\034\uffa6\036\uffa6" +
    "\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6" +
    "\055\uffa6\056\uffa6\060\uffa6\063\uffa6\064\uffa6\065\uffa6\067" +
    "\uffa6\001\002\000\100\004\uffa8\012\uffa8\013\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\020\uffa8\026\uffa8\027\uffa8\034\uffa8\036" +
    "\uffa8\037\uffa8\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8" +
    "\045\uffa8\046\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054" +
    "\uffa8\055\uffa8\056\uffa8\060\uffa8\063\uffa8\064\uffa8\065\uffa8" +
    "\067\uffa8\001\002\000\100\004\uffa3\012\uffa3\013\uffa3\014" +
    "\uffa3\015\uffa3\016\uffa3\020\uffa3\026\uffa3\027\uffa3\034\uffa3" +
    "\036\uffa3\037\uffa3\040\uffa3\041\uffa3\042\uffa3\043\uffa3\044" +
    "\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3" +
    "\054\uffa3\055\uffa3\056\uffa3\060\uffa3\063\uffa3\064\uffa3\065" +
    "\uffa3\067\uffa3\001\002\000\026\004\041\005\033\006\045" +
    "\007\034\010\035\011\043\012\037\013\040\017\046\047" +
    "\044\001\002\000\006\020\uffbd\034\uffbd\001\002\000\040" +
    "\004\ufffb\020\ufffb\034\ufffb\050\ufffb\051\ufffb\052\ufffb\053" +
    "\ufffb\054\ufffb\055\ufffb\056\ufffb\060\ufffb\063\ufffb\064\ufffb" +
    "\065\ufffb\067\ufffb\001\002\000\004\027\uffd1\001\002\000" +
    "\012\021\uffcc\027\uffcc\031\176\036\175\001\002\000\006" +
    "\021\147\027\uffd0\001\002\000\004\027\uffce\001\002\000" +
    "\026\004\153\005\033\006\045\007\034\010\035\011\043" +
    "\012\037\013\040\017\046\047\044\001\002\000\040\004" +
    "\uffc8\020\uffc8\027\uffc8\034\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\060\uffc8\063\uffc8\064" +
    "\uffc8\065\uffc8\001\002\000\040\004\uffca\020\uffca\027\uffca" +
    "\034\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\056\uffca\060\uffca\063\uffca\064\uffca\065\uffca\001\002" +
    "\000\040\004\uffc9\020\uffc9\027\uffc9\034\uffc9\050\uffc9\051" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9" +
    "\063\uffc9\064\uffc9\065\uffc9\001\002\000\110\004\uffa0\012" +
    "\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0\017\163\020\uffa0" +
    "\021\147\022\160\023\155\024\164\025\156\027\uffa0\031" +
    "\157\034\uffa0\037\uffa0\040\uffa0\041\uffa0\042\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\050\uffa0\051\uffa0\052\uffa0\053" +
    "\uffa0\054\uffa0\055\uffa0\056\uffa0\060\uffa0\063\uffa0\064\uffa0" +
    "\065\uffa0\001\002\000\040\004\uffcb\020\uffcb\027\uffcb\034" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb" +
    "\056\uffcb\060\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002\000" +
    "\040\004\uffc6\020\uffc6\027\uffc6\034\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6\063" +
    "\uffc6\064\uffc6\065\uffc6\001\002\000\026\004\041\005\033" +
    "\006\045\007\034\010\035\011\043\012\037\013\040\017" +
    "\046\047\044\001\002\000\004\006\171\001\002\000\040" +
    "\004\uffc7\020\uffc7\027\uffc7\034\uffc7\050\uffc7\051\uffc7\052" +
    "\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7\060\uffc7\063\uffc7" +
    "\064\uffc7\065\uffc7\001\002\000\040\004\uffcf\020\uffcf\027" +
    "\uffcf\034\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\056\uffcf\060\uffcf\063\uffcf\064\uffcf\065\uffcf\001" +
    "\002\000\040\004\uffc3\020\uffc3\027\uffc3\034\uffc3\050\uffc3" +
    "\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\060" +
    "\uffc3\063\uffc3\064\uffc3\065\uffc3\001\002\000\004\006\166" +
    "\001\002\000\026\004\041\005\033\006\045\007\034\010" +
    "\035\011\043\012\037\013\040\017\046\047\044\001\002" +
    "\000\040\004\uffc5\020\uffc5\027\uffc5\034\uffc5\050\uffc5\051" +
    "\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5\060\uffc5" +
    "\063\uffc5\064\uffc5\065\uffc5\001\002\000\004\020\167\001" +
    "\002\000\014\021\147\022\160\023\155\024\164\025\156" +
    "\001\002\000\040\004\uffb6\020\uffb6\027\uffb6\034\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\060\uffb6\063\uffb6\064\uffb6\065\uffb6\001\002\000\004\032" +
    "\172\001\002\000\014\021\147\022\160\023\155\024\164" +
    "\025\156\001\002\000\040\004\uffbb\020\uffbb\027\uffbb\034" +
    "\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb" +
    "\056\uffbb\060\uffbb\063\uffbb\064\uffbb\065\uffbb\001\002\000" +
    "\040\004\uffc4\020\uffc4\027\uffc4\034\uffc4\050\uffc4\051\uffc4" +
    "\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\060\uffc4\063" +
    "\uffc4\064\uffc4\065\uffc4\001\002\000\004\004\212\001\002" +
    "\000\004\032\177\001\002\000\006\021\200\027\uffc1\001" +
    "\002\000\006\033\202\071\203\001\002\000\004\027\uffc2" +
    "\001\002\000\026\004\041\005\033\006\045\007\034\010" +
    "\035\011\043\012\037\013\040\017\046\047\044\001\002" +
    "\000\004\004\204\001\002\000\004\031\205\001\002\000" +
    "\004\006\206\001\002\000\004\032\207\001\002\000\004" +
    "\027\uffc0\001\002\000\004\034\211\001\002\000\004\027" +
    "\uffbf\001\002\000\010\021\uffcc\027\uffcc\036\175\001\002" +
    "\000\006\021\uffcd\027\uffcd\001\002\000\004\002\uffff\001" +
    "\002\000\040\004\ufffd\020\ufffd\034\ufffd\050\ufffd\051\ufffd" +
    "\052\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\060\ufffd\063" +
    "\ufffd\064\ufffd\065\ufffd\067\ufffd\001\002\000\004\002\000" +
    "\001\002\000\004\017\u010a\001\002\000\004\017\u0101\001" +
    "\002\000\004\004\222\001\002\000\004\017\223\001\002" +
    "\000\016\020\uffdf\050\011\051\013\052\005\053\007\054" +
    "\012\001\002\000\006\020\uffdd\036\377\001\002\000\004" +
    "\020\231\001\002\000\004\004\230\001\002\000\004\020" +
    "\uffe0\001\002\000\006\020\uffdc\036\uffdc\001\002\000\004" +
    "\033\232\001\002\000\032\004\245\034\ufff2\050\011\051" +
    "\013\052\005\053\007\054\012\055\021\056\255\060\240" +
    "\064\257\065\244\001\002\000\004\027\376\001\002\000" +
    "\036\004\ufff4\020\ufff4\034\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\060\ufff4\063\ufff4\064" +
    "\ufff4\065\ufff4\001\002\000\036\004\ufff0\020\ufff0\034\ufff0" +
    "\050\ufff0\051\ufff0\052\ufff0\053\ufff0\054\ufff0\055\ufff0\056" +
    "\ufff0\060\ufff0\063\ufff0\064\ufff0\065\ufff0\001\002\000\036" +
    "\004\245\020\ufff2\034\ufff2\050\011\051\013\052\005\053" +
    "\007\054\012\055\021\056\255\060\240\063\ufff2\064\257" +
    "\065\244\001\002\000\036\004\uffec\020\uffec\034\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\060\uffec\063\uffec\064\uffec\065\uffec\001\002\000\004\017" +
    "\353\001\002\000\004\027\352\001\002\000\036\004\uffed" +
    "\020\uffed\034\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054" +
    "\uffed\055\uffed\056\uffed\060\uffed\063\uffed\064\uffed\065\uffed" +
    "\001\002\000\036\004\uffef\020\uffef\034\uffef\050\uffef\051" +
    "\uffef\052\uffef\053\uffef\054\uffef\055\uffef\056\uffef\060\uffef" +
    "\063\uffef\064\uffef\065\uffef\001\002\000\004\017\342\001" +
    "\002\000\022\017\324\021\322\022\160\023\155\024\164" +
    "\025\156\031\157\035\323\001\002\000\004\027\321\001" +
    "\002\000\004\027\320\001\002\000\036\004\ufff1\020\ufff1" +
    "\034\ufff1\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055" +
    "\ufff1\056\ufff1\060\ufff1\063\ufff1\064\ufff1\065\ufff1\001\002" +
    "\000\036\004\uffeb\020\uffeb\034\uffeb\050\uffeb\051\uffeb\052" +
    "\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\060\uffeb\063\uffeb" +
    "\064\uffeb\065\uffeb\001\002\000\004\027\317\001\002\000" +
    "\004\034\313\001\002\000\004\027\312\001\002\000\004" +
    "\017\267\001\002\000\036\004\uffee\020\uffee\034\uffee\050" +
    "\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056\uffee" +
    "\060\uffee\063\uffee\064\uffee\065\uffee\001\002\000\004\017" +
    "\260\001\002\000\026\004\041\005\033\006\045\007\034" +
    "\010\035\011\043\012\037\013\040\017\046\047\044\001" +
    "\002\000\004\020\262\001\002\000\004\065\263\001\002" +
    "\000\004\033\264\001\002\000\032\004\245\034\ufff2\050" +
    "\011\051\013\052\005\053\007\054\012\055\021\056\255" +
    "\060\240\064\257\065\244\001\002\000\004\034\266\001" +
    "\002\000\036\004\uffdb\020\uffdb\034\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\060\uffdb\063" +
    "\uffdb\064\uffdb\065\uffdb\001\002\000\026\004\041\005\033" +
    "\006\045\007\034\010\035\011\043\012\037\013\040\017" +
    "\046\047\044\001\002\000\004\020\271\001\002\000\004" +
    "\033\272\001\002\000\032\004\245\034\ufff2\050\011\051" +
    "\013\052\005\053\007\054\012\055\021\056\255\060\240" +
    "\064\257\065\244\001\002\000\004\034\274\001\002\000" +
    "\040\004\uffd7\020\uffd7\034\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\275\060\uffd7\063" +
    "\uffd7\064\uffd7\065\uffd7\001\002\000\006\033\300\056\277" +
    "\001\002\000\036\004\uffda\020\uffda\034\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\060\uffda" +
    "\063\uffda\064\uffda\065\uffda\001\002\000\004\017\303\001" +
    "\002\000\032\004\245\034\ufff2\050\011\051\013\052\005" +
    "\053\007\054\012\055\021\056\255\060\240\064\257\065" +
    "\244\001\002\000\004\034\302\001\002\000\036\004\uffd8" +
    "\020\uffd8\034\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054" +
    "\uffd8\055\uffd8\056\uffd8\060\uffd8\063\uffd8\064\uffd8\065\uffd8" +
    "\001\002\000\026\004\041\005\033\006\045\007\034\010" +
    "\035\011\043\012\037\013\040\017\046\047\044\001\002" +
    "\000\004\020\305\001\002\000\004\033\306\001\002\000" +
    "\032\004\245\034\ufff2\050\011\051\013\052\005\053\007" +
    "\054\012\055\021\056\255\060\240\064\257\065\244\001" +
    "\002\000\004\034\310\001\002\000\040\004\uffd7\020\uffd7" +
    "\034\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055" +
    "\uffd7\056\uffd7\057\275\060\uffd7\063\uffd7\064\uffd7\065\uffd7" +
    "\001\002\000\036\004\uffd9\020\uffd9\034\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\060\uffd9" +
    "\063\uffd9\064\uffd9\065\uffd9\001\002\000\036\004\ufff9\020" +
    "\ufff9\034\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9" +
    "\055\ufff9\056\ufff9\060\ufff9\063\ufff9\064\ufff9\065\ufff9\001" +
    "\002\000\004\070\315\001\002\000\020\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\067\uffe9\001\002\000" +
    "\026\004\041\005\033\006\045\007\034\010\035\011\043" +
    "\012\037\013\040\017\046\047\044\001\002\000\020\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\067\uffe8" +
    "\001\002\000\036\004\ufff5\020\ufff5\034\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\060\ufff5" +
    "\063\ufff5\064\ufff5\065\ufff5\001\002\000\036\004\ufff8\020" +
    "\ufff8\034\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8" +
    "\055\ufff8\056\ufff8\060\ufff8\063\ufff8\064\ufff8\065\ufff8\001" +
    "\002\000\036\004\ufff6\020\ufff6\034\ufff6\050\ufff6\051\ufff6" +
    "\052\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\060\ufff6\063" +
    "\ufff6\064\ufff6\065\ufff6\001\002\000\034\004\153\005\033" +
    "\006\045\007\034\010\035\011\043\012\037\013\040\017" +
    "\046\021\030\033\202\047\044\071\203\001\002\000\006" +
    "\076\331\077\330\001\002\000\020\006\166\020\uffdf\050" +
    "\011\051\013\052\005\053\007\054\012\001\002\000\004" +
    "\020\326\001\002\000\004\027\327\001\002\000\036\004" +
    "\uffe7\020\uffe7\034\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\054\uffe7\055\uffe7\056\uffe7\060\uffe7\063\uffe7\064\uffe7\065" +
    "\uffe7\001\002\000\004\017\335\001\002\000\004\017\332" +
    "\001\002\000\026\004\041\005\033\006\045\007\034\010" +
    "\035\011\043\012\037\013\040\017\046\047\044\001\002" +
    "\000\004\020\334\001\002\000\004\027\uffb5\001\002\000" +
    "\026\004\041\005\033\006\045\007\034\010\035\011\043" +
    "\012\037\013\040\017\046\047\044\001\002\000\004\020" +
    "\337\001\002\000\004\027\uffb4\001\002\000\004\027\uffba" +
    "\001\002\000\004\027\uffb3\001\002\000\032\004\245\020" +
    "\ufff2\050\011\051\013\052\005\053\007\054\012\055\021" +
    "\056\255\060\240\064\257\065\244\001\002\000\004\020" +
    "\344\001\002\000\004\064\345\001\002\000\004\017\346" +
    "\001\002\000\026\004\041\005\033\006\045\007\034\010" +
    "\035\011\043\012\037\013\040\017\046\047\044\001\002" +
    "\000\004\020\350\001\002\000\004\027\351\001\002\000" +
    "\036\004\uffd6\020\uffd6\034\uffd6\050\uffd6\051\uffd6\052\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6\063\uffd6\064" +
    "\uffd6\065\uffd6\001\002\000\036\004\ufffa\020\ufffa\034\ufffa" +
    "\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\060\ufffa\063\ufffa\064\ufffa\065\ufffa\001\002\000\026" +
    "\004\041\005\033\006\045\007\034\010\035\011\043\012" +
    "\037\013\040\017\046\047\044\001\002\000\004\020\355" +
    "\001\002\000\004\033\356\001\002\000\010\034\uffd2\061" +
    "\357\062\361\001\002\000\026\004\041\005\033\006\045" +
    "\007\034\010\035\011\043\012\037\013\040\017\046\047" +
    "\044\001\002\000\004\034\366\001\002\000\004\026\362" +
    "\001\002\000\032\004\245\050\011\051\013\052\005\053" +
    "\007\054\012\055\021\056\255\060\240\063\ufff2\064\257" +
    "\065\244\001\002\000\004\063\364\001\002\000\004\027" +
    "\365\001\002\000\004\034\uffd3\001\002\000\036\004\uffd5" +
    "\020\uffd5\034\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\056\uffd5\060\uffd5\063\uffd5\064\uffd5\065\uffd5" +
    "\001\002\000\004\026\370\001\002\000\032\004\245\050" +
    "\011\051\013\052\005\053\007\054\012\055\021\056\255" +
    "\060\240\063\ufff2\064\257\065\244\001\002\000\004\063" +
    "\372\001\002\000\004\027\373\001\002\000\010\034\uffd2" +
    "\061\357\062\361\001\002\000\004\034\uffd4\001\002\000" +
    "\010\020\ufff3\034\ufff3\063\ufff3\001\002\000\036\004\ufff7" +
    "\020\ufff7\034\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\060\ufff7\063\ufff7\064\ufff7\065\ufff7" +
    "\001\002\000\014\050\011\051\013\052\005\053\007\054" +
    "\012\001\002\000\004\020\uffde\001\002\000\004\053\u0102" +
    "\001\002\000\004\004\u0103\001\002\000\004\031\u0104\001" +
    "\002\000\004\032\u0105\001\002\000\004\020\u0106\001\002" +
    "\000\004\033\u0107\001\002\000\032\004\245\034\ufff2\050" +
    "\011\051\013\052\005\053\007\054\012\055\021\056\255" +
    "\060\240\064\257\065\244\001\002\000\004\034\u0109\001" +
    "\002\000\004\002\uffe6\001\002\000\016\020\uffdf\050\011" +
    "\051\013\052\005\053\007\054\012\001\002\000\004\020" +
    "\u010c\001\002\000\004\033\u010d\001\002\000\032\004\245" +
    "\034\ufff2\050\011\051\013\052\005\053\007\054\012\055" +
    "\021\056\255\060\240\064\257\065\244\001\002\000\004" +
    "\034\u010f\001\002\000\020\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\054\uffea\055\uffea\067\uffea\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010e\000\022\002\003\003\013\004\015\005\005\006" +
    "\014\007\021\010\017\027\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\002\215\003\013\004\015\005" +
    "\005\006\014\007\021\010\017\027\016\001\001\000\002" +
    "\001\001\000\022\002\213\003\013\004\015\005\005\006" +
    "\014\007\021\010\017\027\016\001\001\000\006\043\142" +
    "\044\144\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\047\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\031\036\041\045\051\050\046" +
    "\052\047\054\035\056\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\045\122" +
    "\050\046\001\001\000\002\001\001\000\012\045\117\050" +
    "\046\052\116\054\035\001\001\000\004\051\076\001\001" +
    "\000\004\053\074\001\001\000\002\001\001\000\006\053" +
    "\060\055\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\045\067\050\046\001\001\000\014\036\064\045\051" +
    "\050\046\052\047\054\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\045\072\050\046\001\001\000\006\045\070\050\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\036\075\045" +
    "\051\050\046\052\047\054\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\114\001\001\000\004\050" +
    "\112\001\001\000\004\050\110\001\001\000\004\050\106" +
    "\001\001\000\004\050\104\001\001\000\004\051\105\001" +
    "\001\000\002\001\001\000\004\051\107\001\001\000\002" +
    "\001\001\000\004\051\111\001\001\000\002\001\001\000" +
    "\004\051\113\001\001\000\002\001\001\000\004\051\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\057\001\001\000\002\001\001\000\012\045\117\050\046" +
    "\052\127\054\035\001\001\000\004\055\123\001\001\000" +
    "\006\045\125\050\046\001\001\000\006\045\126\050\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\031\031\036\041\045\051\050\046" +
    "\052\047\054\035\056\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\041\145\001\001\000\002\001\001\000\024\012\151\015" +
    "\147\020\150\031\153\036\041\045\051\050\046\052\047" +
    "\054\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\041\161\042\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\031\173\036\041\045" +
    "\051\050\046\052\047\054\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\031\164\036\041\045\051\050\046" +
    "\052\047\054\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\161\042\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\161\042\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\212\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\200\001" +
    "\001\000\002\001\001\000\020\031\031\036\041\045\051" +
    "\050\046\052\047\054\035\056\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\224" +
    "\027\225\033\226\035\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\247\006\014\007" +
    "\021\010\017\011\234\012\240\013\253\014\246\015\232" +
    "\016\245\017\251\020\233\021\252\022\242\023\241\024" +
    "\236\025\255\027\016\032\250\034\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\247\006\014\007\021\010\017\011\234\012\240\013\253" +
    "\014\246\015\232\016\245\017\251\020\233\021\374\022" +
    "\242\023\241\024\236\025\255\027\016\032\250\034\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\041\161\042\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\031\260" +
    "\036\041\045\051\050\046\052\047\054\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\052" +
    "\003\247\006\014\007\021\010\017\011\234\012\240\013" +
    "\253\014\246\015\232\016\245\017\251\020\233\021\264" +
    "\022\242\023\241\024\236\025\255\027\016\032\250\034" +
    "\235\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\031\267\036\041\045\051\050\046\052\047\054\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\247" +
    "\006\014\007\021\010\017\011\234\012\240\013\253\014" +
    "\246\015\232\016\245\017\251\020\233\021\272\022\242" +
    "\023\241\024\236\025\255\027\016\032\250\034\235\001" +
    "\001\000\002\001\001\000\004\037\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\052\003" +
    "\247\006\014\007\021\010\017\011\234\012\240\013\253" +
    "\014\246\015\232\016\245\017\251\020\233\021\300\022" +
    "\242\023\241\024\236\025\255\027\016\032\250\034\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\031" +
    "\303\036\041\045\051\050\046\052\047\054\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\003\247\006" +
    "\014\007\021\010\017\011\234\012\240\013\253\014\246" +
    "\015\232\016\245\017\251\020\233\021\306\022\242\023" +
    "\241\024\236\025\255\027\016\032\250\034\235\001\001" +
    "\000\002\001\001\000\004\037\310\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\030\313\001\001\000\002" +
    "\001\001\000\016\031\315\036\041\045\051\050\046\052" +
    "\047\054\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\012\151\015" +
    "\147\020\150\031\153\036\041\045\051\046\337\047\340" +
    "\050\046\052\047\054\035\001\001\000\002\001\001\000" +
    "\012\026\324\027\225\033\226\035\223\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\031\332\036\041\045\051" +
    "\050\046\052\047\054\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\031\335\036\041\045\051\050\046" +
    "\052\047\054\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\247" +
    "\006\014\007\021\010\017\011\234\012\240\013\253\014" +
    "\246\015\232\016\245\017\251\020\233\021\342\022\242" +
    "\023\241\024\236\025\255\027\016\032\250\034\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\036\346\045\051\050\046\052\047\054\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\031\353\036\041\045\051\050" +
    "\046\052\047\054\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\040\357\001\001\000\016\031\366\036" +
    "\041\045\051\050\046\052\047\054\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\052\003\247\006\014\007" +
    "\021\010\017\011\234\012\240\013\253\014\246\015\232" +
    "\016\245\017\251\020\233\021\362\022\242\023\241\024" +
    "\236\025\255\027\016\032\250\034\235\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\052\003\247\006\014\007\021" +
    "\010\017\011\234\012\240\013\253\014\246\015\232\016" +
    "\245\017\251\020\233\021\370\022\242\023\241\024\236" +
    "\025\255\027\016\032\250\034\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\040\373\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\027" +
    "\225\033\377\035\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\003\247" +
    "\006\014\007\021\010\017\011\234\012\240\013\253\014" +
    "\246\015\232\016\245\017\251\020\233\021\u0107\022\242" +
    "\023\241\024\236\025\255\027\016\032\250\034\235\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\u010a" +
    "\027\225\033\226\035\223\001\001\000\002\001\001\000" +
    "\002\001\001\000\052\003\247\006\014\007\021\010\017" +
    "\011\234\012\240\013\253\014\246\015\232\016\245\017" +
    "\251\020\233\021\u010d\022\242\023\241\024\236\025\255" +
    "\027\016\032\250\034\235\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    /**********************************************************************
     *             Creació i Gestió de la Taula de Simbols                *
     **********************************************************************/


    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAMA EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // PROGRAMA ::= DECL PROGRAMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAMA ::= PROCEDIMENT PROGRAMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PROGRAMA ::= MAIN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROGRAMA",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DECL ::= DECL_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DECL ::= DECL_TAULA PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= DECL_TIPUS PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // MODIF ::= MODIF_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODIF ::= REM_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODIF ::= AFG_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // MODIF ::= MODIF_TAULA PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MODIF ::= REDEF_TAULA PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MODIF ::= REDEF_TUPLA PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MODIF ::= MODIF_TIPUS 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIES ::= SENT SENTENCIES 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIES ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIES",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENT ::= DECL 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENT ::= MODIF 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENT ::= MENTRE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENT ::= FMENTRE 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENT ::= IF 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENT ::= SWITCH 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENT ::= CRIDA_PROC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENT",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // PROCEDIMENT ::= metode ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // PROCEDIMENT ::= metode TIPUS ID LPAREN ARGS RPAREN LCLAUDAT SENTENCIES RCLAUDAT RETURN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PROCEDIMENT",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // RETURN ::= retorna VALOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CRIDA_PROC ::= ID LPAREN ARGS RPAREN PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CRIDA_PROC",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MAIN ::= metode main LPAREN cadena ID LCORCH RCORCH RPAREN LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MAIN",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPUS ::= decimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TIPUS ::= enter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TIPUS ::= logic 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TIPUS ::= cadena 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPUS ::= caracter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPUS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARGS ::= ARGS_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARGS ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARGS_1 ::= ARG COMA ARGS_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGS_1 ::= ARG 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGS_1",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARG ::= TIPUS ID 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARG",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // MENTRE ::= mentres LPAREN VALOR RPAREN fer LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MENTRE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // IF ::= si LPAREN VALOR RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IF_1 ::= sino si LPAREN VALOR RPAREN LCLAUDAT SENTENCIES RCLAUDAT IF_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IF_1 ::= sino LCLAUDAT SENTENCIES RCLAUDAT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // IF_1 ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_1",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FMENTRE ::= fer LPAREN SENTENCIES RPAREN mentres LPAREN L RPAREN PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FMENTRE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SWITCH ::= seleccio LPAREN VALOR RPAREN LCLAUDAT SWITCH_1 RCLAUDAT 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SWITCH_1 ::= cas VALOR DOSPUNTS SENTENCIES acaba PUNTICOMA SWITCH_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SWITCH_1 ::= pdefecte DOSPUNTS SENTENCIES acaba PUNTICOMA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SWITCH_1 ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_1",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECL_TIPUS ::= TIPUS A 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECL_TIPUS ::= TIPUS A_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TIPUS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // MODIF_TIPUS ::= ID I_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TIPUS",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // A ::= A_1 I 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // A_1 ::= ID COMA A_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // A_1 ::= ID 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("A_1",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // I ::= ASSIGN VALOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // I ::= ASSIGN MODIF_TIPUS 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // I ::= ASSIGN MODIF_TUPLA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // I ::= ASSIGN MODIF_TAULA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // I_1 ::= AUTOSUM 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // I_1 ::= AUTOSUB 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // I_1 ::= SUMAHI VALOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // I_1 ::= RESTAHI VALOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // I_1 ::= I 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("I_1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECL_TAULA ::= TIPUS ID LCORCH RCORCH ASSIGN NOVA_TAULA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TAULA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECL_TAULA ::= TIPUS ID LCORCH RCORCH 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TAULA",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NOVA_TAULA ::= nou ID LCORCH venter RCORCH 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TAULA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // NOVA_TAULA ::= LCLAUDAT VALORS RCLAUDAT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TAULA",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALORS ::= VALOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // VALORS ::= VALOR COMA VALORS 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORS",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // VALOR ::= L 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MODIF_TAULA ::= ID LCORCH venter RCORCH I_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TAULA",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // REDEF_TAULA ::= ID ASSIGN NOVA_TAULA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REDEF_TAULA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECL_TUPLA ::= tupla ID LPAREN RPAREN NOVA_TUPLA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECL_TUPLA ::= tupla ID LPAREN RPAREN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECL_TUPLA",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // NOVA_TUPLA ::= ASSIGN LPAREN VALORS RPAREN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NOVA_TUPLA",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MODIF_TUPLA ::= ID LPAREN venter RPAREN I_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MODIF_TUPLA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // REM_TUPLA ::= ID PUNT borra LPAREN VALOR RPAREN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REM_TUPLA",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // AFG_TUPLA ::= ID PUNT afegeix LPAREN VALOR RPAREN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AFG_TUPLA",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // REDEF_TUPLA ::= ID ASSIGN NOVA_TUPLA 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REDEF_TUPLA",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // E ::= F OP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("E",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP ::= ADD F OP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP ::= SUB F OP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP ::= MULT F OP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OP ::= DIV F OP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OP ::= MOD F OP 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OP ::= 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OP",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // F ::= LPAREN E RPAREN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // F ::= venter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // F ::= SUB venter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // F ::= ADD venter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // F ::= vdecimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // F ::= ADD vdecimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // F ::= SUB vdecimal 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // F ::= vcaracter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // F ::= ADD vcaracter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // F ::= SUB vcaracter 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // F ::= vcadena 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // F ::= ID 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // F ::= vlogic 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("F",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // L ::= EXPRESIO 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // L ::= EXPRESIO COMP_LOG L 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // L ::= E COMP_LOG L 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // L ::= E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("L",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COMP_LOG ::= OR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP_LOG",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COMP_LOG ::= AND 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP_LOG",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPRESIO ::= NOT LPAREN EXPRESIO RPAREN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPRESIO ::= LPAREN EXPRESIO RPAREN 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPRESIO ::= EXPRESIO_1 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPRESIO_1 ::= E COMP E 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // EXPRESIO_1 ::= NOT E COMP E 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESIO_1 ::= E COMP NOT E 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESIO_1 ::= NOT E COMP NOT E 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIO_1",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // COMP ::= MENORI 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COMP ::= MAJORI 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COMP ::= MENOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // COMP ::= MAJOR 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // COMP ::= IGIG 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COMP ::= DIF 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMP",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
