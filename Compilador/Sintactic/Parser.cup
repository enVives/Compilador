package Compilador.Sintactic;

import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.ComplexSymbolFactory.Location;
import Compilador.Lexic.Scanner.Token;
import Compilador.Intermedi.TaulaIntermedi;
import Compilador.Intermedi.TaulaIntermedi.Sentencia;
import Compilador.Intermedi.Operacio;
import Compilador.Intermedi.TaulaVariables;
import Compilador.Intermedi.TaulaProcediments;
import Compilador.Intermedi.TaulaProcediments.*;
import java.io.BufferedWriter;
import java.io.FileWriter;

import java.io.PrintStream;
import java.util.HashMap;
import Compilador.TSimbols.Taula;
import Compilador.TSimbols.DT.*;
import Compilador.TSimbols.TD.*;
import Compilador.Sintactic.Simbols.*;
import Compilador.Sintactic.Simbols.SimbolValsTupla.KeyValue;
import Compilador.Intermedi.TaulaVariables.*;
import java.util.Iterator;
import java.util.Stack;
import java.util.ArrayList;
import Compilador.TSimbols.Dada1;
import Compilador.TSimbols.Dada2;
import Compilador.Sintactic.Simbols.SimbolArgsp.KeyValor;
import java.util.Stack;
import java.io.IOException;

import java.io.DataOutputStream;
import java.io.FileOutputStream;

class Parser;


parser code {:
/***
    private Scanner scanner;
    public Parser(Scanner scanner) { 
        this.scanner = scanner;
    }
***/
    /*********************************************************************
    *                       Generacio Ensamblador                        *
    **********************************************************************/

    String cEnsamblador = "";

    public void genera_ensablador(){
        if(taula_intermedi.size() > 0){ //si no hi ha hagut fallos
            ArrayList<Sentencia> llista_intermedi = taula_intermedi.get_Llista();
            ArrayList<Entrada> llista_variables = taula_variables.getFiles();
            ArrayList<InfoProcediment> llista_procediments = taula_procediments.getLlista();

            String filename = "executable.X68";

            try {
                FileOutputStream fileOutputStream = new FileOutputStream(filename);
                DataOutputStream dataOutputStream = new DataOutputStream(fileOutputStream);

                cEnsamblador = "*-----------------------------------------------------------\n" +
                        "* Title      : Compilador\n" +
                        "* Written by : Pere Joan Vives Morey\n" +
                        "* Date       : 2/02/2024\n" +
                        "* Description: \n" +
                        "*-----------------------------------------------------------\n" +
                        "          ORG    $1000\n";

                Iterator<Entrada> it = llista_variables.iterator();
                Integer n = 0;
                while(it.hasNext()){
                    Entrada variable = (Entrada) it.next();
                    if(variable.getSubprograma() == null){
                        switch(variable.ocupacio()){
                            case 1:
                                cEnsamblador += "V"+n+" DS.B 1\n";
                                break;
                            case  2:
                                cEnsamblador += "V"+n+" DS.W 1\n";
                                break;
                            case 4:
                                cEnsamblador += "V"+n+" DS.L 1\n";
                                break;
                            default:
                                Integer nwords = variable.ocupacio()/4;
                                cEnsamblador += "V"+n+" DS.W "+nwords+"\n";
                                break;
                        }
                    }
                    n++;
                }

                cEnsamblador += "START:\n";

                Iterator<Sentencia> it1 = llista_intermedi.iterator();
                Boolean dins_procediment = false;


                while(it1.hasNext()){
                    Sentencia sent = (Sentencia) it1.next();

                    if(sent.getOperacio() == 10){ //etiqueta
                        if(taula_procediments.conte_etiqueta((Integer)sent.getDesti())){
                            dins_procediment = true;
                        }
                    }

                    if(!dins_procediment){ //generar sentencia

                    }

                    if (sent.getOperacio() == 26) {
                        //sortim de subrutines
                        dins_procediment = false;
                    }
                }

                //crear procediment main
                //crear la resta de procediments

                dataOutputStream.writeBytes(cEnsamblador);
                dataOutputStream.close();
                fileOutputStream.close();
                
            } catch (IOException e) {
                System.out.println(e.toString());
            }
        }
    }


    public void creaSubCodi(Sentencia c3a) {
        Integer operacio = c3a.getOperacio();
        Object op1 = c3a.getOp1();
        Integer op2 = c3a.getOp2();
        Object op3 = c3a.getDesti();



        String sop1,sop2,dest;

        switch(c3a.operacio) {
            //Copia -> copia,tn,null,tdesti
            case 0:
                Entrada e1 = taula_variables.cerca_variable((Integer)op1);
                Entrada e2 = taula_variables.cerca_variable((Integer)op2);
                if(e1.getPosicio_pila()!=null){ //variable local
                    if(e2.getPosicio_pila()!=null){ //variable local

                    }
                }else{
                    if(e2.getPosicio_pila()!=null){ //variable local

                    }
                }
                break;
            //Suma -> suma,t1,t2,tdesti
            case 1:
                break;
            //Resta -> resta t1,t2,tdesti
            case 2:
                break;
            //Producte -> producte t1,t2,tdesti
            case 3:
                break;
            //Divisio -> divisio t1,t2,tdesti
            case 4:
                break;
            //Modul -> modul t1,t2,tdesti
            case 5:
                break;
            //Menys -> menys, t1, null, tdesti
            case 6:
                break;
            //And
            case 7:
                break;
            //Or
            case 8:
                break;
            //Not
            case 9:
                break;
        }

    /**********************************************************************
     *             Creació i Gestió de la Taula de Simbols                *
     **********************************************************************/

    Taula taula_simbols = new Taula();

    /**********************************************************************
     *             Tot sobre el codi Intermedi                            *
     **********************************************************************/

    //Pila de subprograma actual

    Stack<Integer> pila_procediments = new Stack<>();
    Integer etiquetes = 0; //anirà incrementant
    TaulaIntermedi taula_intermedi = new TaulaIntermedi();
    TaulaVariables taula_variables = new TaulaVariables();
    TaulaProcediments taula_procediments = new TaulaProcediments();
    Stack<Integer> pila_pendents = new Stack<>();

    public Integer novavar(Boolean temporal,Integer ocupacio){ //revisar lo des parametres
        if(temporal){
            new Dvar(); //incrementam n antes de afegir-ho
        }
        if(!pila_procediments.isEmpty()){
            Integer procediment = pila_procediments.peek();
            taula_variables.afegeix_variable(procediment,null,ocupacio,null);
        }else{
            taula_variables.afegeix_variable(null,null,ocupacio,null);
        }
        return taula_variables.n(); //darrer n
    }

    public Integer novavar(Boolean temporal){ //revisar lo des parametres
        if(temporal){
            new Dvar(); //incrementam n antes de afegir-ho
        }
        if(!pila_procediments.isEmpty()){
            Integer procediment = pila_procediments.peek();
            taula_variables.afegeix_variable(procediment,null,null,null);
        }else{
            taula_variables.afegeix_variable(null,null,null,null);
        }
        return taula_variables.n(); //darrer n
    }

    public void nouproc(Integer nivell, Integer parametres, Integer etiqueta, Integer np){
        Integer ocupacio = ocupacio(np);
        taula_procediments.afegeix_procediment(np,etiqueta,ocupacio,parametres);
    }

    public Integer ocupacio(Integer np){
        ArrayList<Entrada> llista = taula_variables.getFiles();
        Iterator <Entrada> it = llista.iterator();
        Integer ocupacio =0;

        while(it.hasNext()){
            Entrada ent = (Entrada) it.next();
            if(ent.getSubprograma() == np){
                if(ent.ocupacio()!=null){
                    ent.set_Ocupacio(ocupacio); //afegim a la posicio de la pila on es trobarà la variable local
                    ocupacio += ent.ocupacio();  
                } 
            }
        }

        return ocupacio;
    }

    public void mostra_intermedi() throws IOException {
      FileWriter sortidap;
      BufferedWriter sortida;

      sortidap = new FileWriter("Intermedi.txt");
      sortida = new BufferedWriter(sortidap);
    

        ArrayList<Sentencia> llista = taula_intermedi.get_Llista();
        Iterator<Sentencia> iterator = llista.iterator();
        while (iterator.hasNext()) {
        Sentencia s = iterator.next();
        try {
            sortida.write(
                "Operacio: " + s.getOperacio() + " Op1: " + s.getOp1() + " Op2: " + s.getOp2() + " Desti: " + s.getDesti());
                sortida.write("\n");
        } catch (IOException error) {
            System.out.println(error.toString());
        }
        }

        try {
        sortida.close();
        } catch (IOException error) {
        System.out.println(error.toString());
        }
    }

    /**********************************************************************
     * sobrecàrrega de mètodes per gestionar els errors que es localitzin *
     **********************************************************************/

    private boolean errorSemantic = false;

    @Override
    public void unrecovered_syntax_error(Symbol cur_token) throws Exception {
        report_error("Error sintàctic catastròfic", cur_token);
        done_parsing();        
    }

    @Override
    public void syntax_error(Symbol cur_token) {
        report_error("de sintaxis", cur_token);
    }

    @Override
    public void report_error(String message, Object info) {
        StringBuilder msg = new StringBuilder("ERROR");
        if (info instanceof Symbol) {
            ComplexSymbol token = (ComplexSymbol)info;
            Location l = token.getLeft();
            
            if (l != null) {
                msg.append(" (fila: ")
                   .append(l.getLine())
                   .append(", columna: ")
                   .append(l.getColumn())
                   .append(")");
            }
        }
        msg.append(": ").append(message);
        
        System.err.println(msg);

    }

    public void report_error_semantic(String message,Location left, Location right){
        System.err.println("ERROR "+message+" desde: "+left.getLine()+"/"+left.getColumn()+" fins: "+right.getLine()+"/"+right.getColumn());

    }

    @Override
    public void report_fatal_error(String message, Object info) throws Exception {
        report_error("Error catastròfic ("+message+")", info);
        done_parsing();
    }
:}


/**
 ** També aquí es poden afegir accions a realitzar quan es requereix un token.
scan with {:     next_token(); :}
**/


terminal Token ID; //String
terminal Token vdecimal; //double
terminal Token venter; //int
terminal Token vlogic; //boolean
terminal Token vcaracter; //char
terminal Token entradaS;

terminal  Token  ADD,SUB,MULT,DIV,MOD;
terminal Token LPAREN,RPAREN;
terminal Token AUTOSUM,AUTOSUB,SUMAHI,RESTAHI,ASSIGN;
terminal DOSPUNTS,PUNTICOMA,INTERROG,LCORCH
    ,RCORCH,LCLAUDAT, RCLAUDAT,PUNT, COMA;

terminal Token DIF, IGIG, MENORI, MAJORI, MENOR, MAJOR, OR, AND , NOT;

terminal decimal,enter,logic,caracter,tupla,si,sino,seleccio,cas,pdefecte,acaba
    ,mentres,fer,per,metode,retorna,nou,constant,sortidaS,main,borra,afegeix;

non terminal PROGRAMA,DECL,PROCEDIMENT,MAIN,DECL_TAULA,MODIF,
    MODIF_TUPLA, REM_TUPLA, AFG_TUPLA, MODIF_TAULA, REDEF_TAULA, REDEF_TUPLA,
    SENTENCIES, MENTRE, SWITCH, FMENTRE, CRIDA_PROC, SENT,VAL_TUPLA,
    L,SWITCH_1, I, A_1,NOVA_TAULA, NOVA_TUPLA,
    FOR,OP_CONDICIONAL,OP_CONDICIONAL_1,SORTIDAS,DECL_CONST;    

non terminal SimbolF F;
non terminal SimbolE E;
non terminal SimbolEp E_1;
non terminal SimbolT T;
non terminal SimbolTp T_1;
non terminal SimbolN N;
non terminal SimbolNp N_1;
non terminal SimbolM M;
non terminal SimbolMp M_1;
non terminal SimbolR R;
non terminal SimbolValsTupla VALS_TUPLA;
non terminal SimbolValors VALORS;
non terminal SimbolDeclTupla DECL_TUPLA;
non terminal M0;
non terminal M1;
non terminal IF;
non terminal M2;
non terminal M3;
non terminal SimbolEntrada ENTRADAS;
non terminal SimbolValors VALS;
non terminal M4;
non terminal SimbolIf1 IF_1;
non terminal SimbolCondicio CONDICIO;
non terminal SimbolResta RESTA;
non terminal PROG;
non terminal SimbolI I_1;
non terminal SimbolA A;
non terminal SimbolDeclTipus DECL_TIPUS ;
non terminal SimbolTipus TIPUS;
non terminal SimbolModifTipus MODIF_TIPUS;
non terminal SimbolArg ARG;
non terminal SimbolArgsp ARGS_1;
non terminal SimbolArgs ARGS;
non terminal SimbolReturn RETURN;
non terminal SimbolResta INICI;
non terminal SimbolResta FOR_2;
non terminal SimbolCondicio FOR_1;
non terminal DEF;
non terminal SimbolProcediment2 PROCEDIMENT_1;
non terminal SimbolProcediment2 PROCEDIMENT_2;

precedence left  ADD, SUB;
precedence left  MULT, DIV, MOD;

start with PROG;

PROG ::= M0 PROGRAMA {:System.out.println("PROG -> M0 PROGRAMA");
        if(errorSemantic){
            taula_intermedi.clear();
        }:};

PROGRAMA ::= DECL PUNTICOMA PROGRAMA {:System.out.println("PROGRAMA -> DECL PROGRAMA");:}
            | PROCEDIMENT PROGRAMA {:System.out.println("PROGRAMA -> PROCEDIMENT PROGRAMA");:}
            | MAIN {:System.out.println("PROGRAMA -> MAIN");:}
            ;

M0 ::= {:System.out.println("Inicialització");
        taula_simbols.posar("ent", new Dtipus(new Escalar("ts_enter", Integer.MIN_VALUE, Integer.MAX_VALUE,4)));
        taula_simbols.posar("decimal", new Dtipus(new Escalar("ts_decimal", (int)Double.MIN_VALUE, (int)Double.MAX_VALUE,4)));
        //taula_simbols.posar("cad", new Dtipus(new DefinicioTipus("ts_cadena")));
        taula_simbols.posar("bool", new Dtipus(new Escalar("ts_boolea", -1, 0,1)));
        taula_simbols.posar("car", new Dtipus(new Escalar("ts_enter", 0, 255,2)));
        taula_simbols.posar("tupla", new Dtipus(new Tupla()));
        taula_simbols.posar("VER", new Dconst(-1,"boolea"));
        taula_simbols.posar("FALS", new Dconst(0,"boolea"));
        :};

DECL ::= DECL_TUPLA  {:System.out.println("DECL -> DECL TUPLA");:} 
        |DECL_TIPUS  {:System.out.println("DECL -> DECL_TIPUS");:}
        |DECL_CONST {::}
        |error PUNTICOMA {::}
        ;

M1 ::= {:System.out.println("Reiniciar Error Semantic");
        errorSemantic = false;
        :};

MODIF ::= REDEF_TUPLA  {:System.out.println("MODIF -> REDEF_TUPLA PUNTICOMA");:}
        | MODIF_TIPUS  {:System.out.println("MODIF -> MODIF_TIPUS PUNTICOMA");:}
        ;

SENTENCIES ::= SENT SENTENCIES {:System.out.println("SENTENCIES -> SENT SENTENCIES");:}
                | {:System.out.println("SENTENCIES -> @");:}
                ;

SENT ::= DECL PUNTICOMA {:System.out.println("SENT -> DECL");:}
            |MODIF PUNTICOMA {:System.out.println("SENT -> MODIF");:}
            |MENTRE {:System.out.println("SENT -> MENTRE");:}
            |FMENTRE {:System.out.println("SENT -> FMENTRE");:}
            |IF {:System.out.println("SENT -> IF");:}
            |CRIDA_PROC PUNTICOMA{:System.out.println("SENT -> CRIDA_PROC");:}
            |FOR {:System.out.println("SENT -> FOR");:}
            |SORTIDAS PUNTICOMA {:System.out.println("SENT -> SORTIDAS");:}
            ;

PROCEDIMENT_1 ::= metode ID:i LPAREN ARGS:a RPAREN {:System.out.println("PROCEDIMENT_1");

                    if(!errorSemantic){
                        String nom = (String) i.valor;
                        Stack<KeyValor> llista = a.getLlista();

                        Dproc procediment = new Dproc();
                        Boolean bol = taula_simbols.posar(nom, procediment);

                        if(bol == false){
                            report_error_semantic("No es pot crear el procediment amb nom "+(String)i.valor+" ja hi un altre component amb aquest nom", i.esquerre,i.dreta);
                            errorSemantic = true;
                        }else{
                            Integer par = 0;

                            Integer etiqueta = etiquetes++;
                            taula_intermedi.genera(Operacio.skip,null,null,etiqueta);
                            
                            while(!llista.isEmpty()){
                                    KeyValor k = llista.pop();
                                    String id = k.key; //nom del paràmetre
                                    String tipus = k.tipus; //valor o variable a afegir

                                    Darg g = new Darg(tipus,id);
                                    bol = taula_simbols.posarparam(nom,id,g);
                                    if(bol == false){
                                        report_error_semantic("Ja hi ha un argument amb el nom "+id+" al subprograma "+(String) i.valor, i.esquerre,i.dreta);
                                        errorSemantic = true;
                                        break;
                                    }
                                    nom += "_"+tipus;
                                    par++;
                            }

                            RESULT = new SimbolProcediment2(taula_simbols.getN(),etiqueta,par,procediment.np());

                            taula_simbols.entra_bloc();

                            Dada2 dada = taula_simbols.primer_parametre(nom);
                            while(dada!=null){
                                String idparam = dada.idcamp();
                                Darg d = (Darg) dada.td();

                                Dvar var = new Dvar();
                                Integer n = novavar(false);

                                Dargin arg = new Dargin(var.getMy_nv(), d.tipus());
                                taula_intermedi.genera(Operacio.pmb,null,null,var.getMy_nv());
                                taula_simbols.posar(idparam, arg);
                                dada = dada.next();
                            }

                            pila_procediments.push(procediment.np());
                        }
                    }   
:};

PROCEDIMENT_2 ::= metode TIPUS:t ID:i LPAREN ARGS:a RPAREN{:System.out.println("PROCEDIMENT_2");
                        if(!errorSemantic){
                            String nom = (String) i.valor;
                            Stack<KeyValor> llista = a.getLlista();

                            Dproc procediment = new Dproc(t.getTipus());
                            Boolean bol = taula_simbols.posar(nom, procediment);

                            if(bol == false){
                                report_error_semantic("No es pot crear el procediment amb nom "+(String)i.valor+" ja hi un altre component amb aquest nom", i.esquerre,i.dreta);
                                errorSemantic = true;
                            }else{
                                Integer par = 0;

                                Integer etiqueta = etiquetes++;
                                taula_intermedi.genera(Operacio.skip,null,null,etiqueta);

                                while(!llista.isEmpty()){
                                        KeyValor k = llista.pop();
                                        String id = k.key; //nom del paràmetre
                                        String tipus = k.tipus; //valor o variable a afegir

                                        Darg g = new Darg(tipus,id);
                                        bol = taula_simbols.posarparam(nom,id,g);
                                        if(false){
                                            report_error_semantic("Ja hi ha un argument amb el nom "+id+" al subprograma "+(String) i.valor, i.esquerre,i.dreta);
                                            errorSemantic = true;
                                            break;
                                        }
                                        nom += "_"+tipus;
                                        par++;
                                }

                                Integer nivell = taula_simbols.getN();

                                taula_simbols.entra_bloc();

                                Dada2 dada = taula_simbols.primer_parametre(nom);
                                while(dada!=null){
                                    String idparam = dada.idcamp();
                                    Darg d = (Darg) dada.td();

                                    Dvar var = new Dvar();
                                    Integer n = novavar(false);
                                    Dargin arg = new Dargin(var.getMy_nv(), d.tipus());
                                    taula_intermedi.genera(Operacio.pmb,null,null,var.getMy_nv());
                                    taula_simbols.posar(idparam, arg);
                                    dada = dada.next();
                                }
                                
                                pila_procediments.push(procediment.np());
                                RESULT = new SimbolProcediment2(t.getTipus(),nivell,etiqueta,par,procediment.np());    
                            }   
                        }
                                        
:}; 

PROCEDIMENT ::= PROCEDIMENT_1:p LCLAUDAT SENTENCIES RCLAUDAT {:System.out.println("PROC");
                    if(!errorSemantic){
                        Integer n = p.getNivell();
                        Integer parametres = p.getParametres();
                        Integer etiqueta = p.getEtiqueta();
                        Integer np = p.getNp();

                        taula_intermedi.genera(Operacio.retorn,null,null,np);

                        nouproc(n,parametres,etiqueta,np);
                        taula_simbols.surtbloc();
                        pila_procediments.pop();  
                    }
                :}
                | PROCEDIMENT_2:p LCLAUDAT SENTENCIES RETURN:r RCLAUDAT {:System.out.println("PROC");
                    if(!errorSemantic){
                        Dtipus ti = (Dtipus) taula_simbols.consulta(p.getTipus());
                        if(ti.dt().tipus_subjacent()!=r.getExpresio().getTsb()){
                            report_error_semantic("El tipus de retorn es diferent del procediment", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                        }

                        Integer n = p.getNivell();
                        Integer parametres = p.getParametres();
                        Integer etiqueta = p.getEtiqueta();
                        Integer np = p.getNp();


                        taula_intermedi.genera(Operacio.retorn,r.getExpresio().getR(),null,np);
                        nouproc(n,parametres,etiqueta,np);
                        taula_simbols.surtbloc();
                        pila_procediments.pop();  
                    }
                :}
                ;
RETURN ::= retorna E:e PUNTICOMA {:System.out.println("RETURN -> retorna E");
        RESULT = new SimbolReturn(e,e.getEsquerre(),e.getDreta());
        :};

ARGS ::= ARGS_1:a {:System.out.println("ARGS -> ARGS_1");
                RESULT = new SimbolArgs(a.getLlista());
            :}
            | {:System.out.println("@");
                RESULT = new SimbolArgs();
            :}
            ;
ARGS_1 ::= ARG:a COMA ARGS_1:b {:System.out.println("ARGS_1 -> ARG COMA ARGS_1");
                b.afegeix(a.getId(),a.getTipus());
                RESULT = b;
            :}
            | ARG:a {:System.out.println("ARGS_1 -> ARG");
                SimbolArgsp p = new SimbolArgsp();
                p.afegeix(a.getId(),a.getTipus());
                RESULT = p;
            :}
            ;
ARG ::= TIPUS:t ID:d {:System.out.println("ARG -> TIPUS ID");
    RESULT = new SimbolArg((String)d.valor,t.getTipus());
    :};

CRIDA_PROC ::= R:r {:System.out.println("CRIDA_PROC");
            if(!errorSemantic){
                if(r.getMvp() =="procc"){

                }else{
                    report_error_semantic("No es pot posar una referència tota sola", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                }        
            }
            
            :};

MAIN ::= metode main LPAREN M2 RPAREN LCLAUDAT SENTENCIES RCLAUDAT M3 {:System.out.println("MAIN");:}
        ;

M2 ::= {:System.out.println("M2");
    taula_simbols.entra_bloc();
    taula_intermedi.genera(Operacio.skip,null,null,-1);
    pila_procediments.push(-1);:};

M3 ::= {:System.out.println("M3");
    nouproc(1,0,-1,-1);
    taula_simbols.surtbloc();
    taula_intermedi.genera(Operacio.retorn,null,null,-1);:};

TIPUS ::= decimal {:System.out.println("TIPUS -> decimal");
                RESULT = new SimbolTipus("decimal");
            :}
            |enter {:System.out.println("TIPUS -> enter");
                RESULT = new SimbolTipus("ent");
            :}
            |logic {:System.out.println("TIPUS -> logic");
                RESULT = new SimbolTipus("bool");
                :}
            |caracter {:System.out.println("TIPUS -> caracter");
                RESULT = new SimbolTipus("car");
                :}
            ;


MENTRE ::= mentres M4 CONDICIO:c fer RESTA:r {:System.out.println("MENTRE");
            if(!errorSemantic){
                Integer nostra = etiquetes++;
                Integer fin = etiquetes++;
                taula_intermedi.afegeix_Llista(c.getLlista());
                Integer n = novavar(true,1);
                taula_intermedi.genera(Operacio.copia_valor,0,null,n);
                taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),fin);
                taula_intermedi.afegeix_Llista(r.getLlista());
                taula_intermedi.genera(Operacio.salt_incondicional,null,null,nostra);
                taula_intermedi.genera(Operacio.skip,null,null,fin);
                taula_intermedi.canvia_etiqueta(nostra,pila_pendents.pop());
            }
            :} ;

M4 ::= {:System.out.println("M4");
        taula_intermedi.genera(Operacio.skip,null,null,-1);
        pila_pendents.push(taula_intermedi.size()-1);:};

IF ::=  si CONDICIO:c RESTA:r IF_1:i {:System.out.println("IF");
                if(!errorSemantic){
                        if(i!=null){
                            Integer et = i.getEtiqueta(); //etiqueta final
                            Integer nostra = etiquetes++;
                            ArrayList<Sentencia> llista1 = c.getLlista();
                            ArrayList<Sentencia> llista2 = r.getLlista();
                            ArrayList<Sentencia> llista3 = new ArrayList<>();
                            llista3.addAll(taula_intermedi.get_Llista());
                            taula_intermedi.clear();

                            taula_intermedi.set_Llista(llista1);
                            Integer n = novavar(true,1);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);
                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista2);
                            taula_intermedi.genera(Operacio.salt_incondicional,null,null,et);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);

                            taula_intermedi.afegeix_Llista(llista3);   
                        }else{
                            Integer nostra = etiquetes++;

                            ArrayList<Sentencia> llista1 = c.getLlista();
                            ArrayList<Sentencia> llista2 = r.getLlista();
                            taula_intermedi.clear();

                            taula_intermedi.set_Llista(llista1);
                            Integer n = novavar(true,1);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);
                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista2);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);
                        }
                    }
            :};

CONDICIO ::= LPAREN E:e RPAREN {:
        System.out.println("CONDICIO");
        if(e.getTsb()!="ts_boolea"){
            report_error_semantic("La expresió ha de ser de tipus booleà", e.getEsquerre(),e.getDreta());
            errorSemantic = true;
        }else{ 
            RESULT = new SimbolCondicio(taula_intermedi.get_Llista(),e.getR());
            taula_intermedi.clear();
        }
    :};

RESTA ::= LCLAUDAT SENTENCIES RCLAUDAT {:
    System.out.println("RESTA");
    RESULT = new SimbolResta(taula_intermedi.get_Llista());
    taula_intermedi.clear();
    :};
            
IF_1 ::= sino si CONDICIO:c  RESTA:r IF_1:i {:System.out.println("IF_1");
                if(!errorSemantic){
                        if(i!=null){
                            Integer et = i.getEtiqueta(); //etiqueta final
                            Integer nostra = etiquetes++;
                            
                            ArrayList<Sentencia> llista1 = r.getLlista();
                            ArrayList<Sentencia> llista2 = c.getLlista();
                            ArrayList<Sentencia> llista3 = new ArrayList<>();
                            llista3.addAll(taula_intermedi.get_Llista());
                            taula_intermedi.clear();

                            taula_intermedi.afegeix_Llista(llista2);
                            Integer n = novavar(true,1);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);

                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista1);
                            taula_intermedi.genera(Operacio.salt_incondicional,null,null,et);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);
                            taula_intermedi.afegeix_Llista(llista3);
                            RESULT = new SimbolIf1(et);  
                        }else{
                            Integer nostra = etiquetes++;
                            ArrayList<Sentencia> llista1 = r.getLlista();
                            ArrayList<Sentencia> llista2 = c.getLlista();
                            taula_intermedi.clear();

                            taula_intermedi.afegeix_Llista(llista2);
                            Integer n = novavar(true,1);
                            taula_intermedi.genera(Operacio.copia_valor,0,null,n);

                            taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                            taula_intermedi.afegeix_Llista(llista1);
                            taula_intermedi.genera(Operacio.skip,null,null,nostra);
                            RESULT = new SimbolIf1(nostra);
                        }
                }
            :}
            | sino LCLAUDAT SENTENCIES RCLAUDAT {:System.out.println("sino");
                taula_intermedi.genera(Operacio.skip,null,null,etiquetes);
                RESULT = new SimbolIf1(etiquetes++);
            :}

            | {:System.out.println("@");
                RESULT = new SimbolIf1();
                :}
            ;

FMENTRE ::= fer M4 RESTA:r mentres CONDICIO:c PUNTICOMA {:System.out.println("FMENTRE");
            if(!errorSemantic){
                Integer nostra = etiquetes++;
                taula_intermedi.afegeix_Llista(r.getLlista());
                taula_intermedi.afegeix_Llista(c.getLlista());
                Integer n = novavar(true,1);
                taula_intermedi.genera(Operacio.copia_valor,-1,null,n);
                taula_intermedi.genera(Operacio.salt_condicional_igual,n,c.getR(),nostra);
                taula_intermedi.canvia_etiqueta(nostra,pila_pendents.pop());
            }
        :};

ENTRADAS ::= entradaS:s LPAREN TIPUS:t RPAREN:r {:System.out.println("ENTRADAS");
            if(!errorSemantic){
                Dtipus d = (Dtipus) taula_simbols.consulta(t.getTipus());
                Escalar e = (Escalar) d.dt();
                Integer n = novavar(true,e.getBytes());
                RESULT = new SimbolEntrada(t.getTipus(),d.dt().tipus_subjacent(),n,s.esquerre,r.dreta);
            }
            :} ;
SORTIDAS ::= sortidaS LPAREN E:e RPAREN {:System.out.println("SORTIDAS");
        if(!errorSemantic){
            if((e.getTsb()=="ts_nul")&&(e.getTsb()=="ts_record")){
                report_error_semantic("Tipus erroni de sortida de teclat", e.getEsquerre(),e.getDreta());
                errorSemantic = true;
            }else{
                taula_intermedi.genera(Operacio.console_write,null,null,e.getR());
            } 
        }
        :};

DECL_CONST ::= constant TIPUS:t ID:a ASSIGN E:e  {:System.out.println("DECL_CONST -> constant TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                    errorSemantic = true;
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Integer n = novavar(true,taula_variables.get_ocupacio(e.getR()));
                    Boolean bol = taula_simbols.posar((String)a.valor,new Dconst(ti,n));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //*****************Intermedi********************
                        taula_intermedi.genera(Operacio.copia,e.getR(),null,n);
                        //****************************************************
                    }
                }
            }
        :}
        | constant TIPUS:t ID:a ASSIGN MODIF_TIPUS:m {:System.out.println("DECL_CONST -> constant TIPUS A ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat",a.esquerre,a.dreta);
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificador
                    Integer n = novavar(true,taula_variables.get_ocupacio(m.getR()));
                    Boolean bol = taula_simbols.posar((String)a.valor,new Dconst(ti,n));
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //*****************Intermedi********************
                        taula_intermedi.genera(Operacio.copia,m.getR(),null,n);
                        //****************************************************
                    }
                }
            }    
        
        :} //una tupla sempre és constant
;

DECL_TIPUS ::= TIPUS:t ID:a {:System.out.println("DECL_TIPUS -> TIPUS ID ");
            String tipus = t.getTipus(); //tipus que afegirem als identificadors
            Dvar d = new Dvar(tipus);
            Boolean bol = taula_simbols.posar((String) a.valor,d);
            if(!bol){
                report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                errorSemantic = true;
            }
        
        :}
        | TIPUS:t ID:a ASSIGN E:e {:System.out.println("DECL_TIPUS -> TIPUS A ASSIGN E");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());
                if(tipus.dt().tipus_subjacent()!=e.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat", a.esquerre,e.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Dvar var = new Dvar(ti);
                    Boolean bol = taula_simbols.posar((String) a.valor,var);
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //*****************Intermedi********************
                        Integer n = novavar(false,((Escalar) tipus.dt()).getBytes());
                        taula_intermedi.genera(Operacio.copia,e.getR(),null,var.getMy_nv());
                        //****************************************************
                    }

                }
            }
        :}
        | TIPUS:t ID:a ASSIGN MODIF_TIPUS:m {:System.out.println("DECL_TIPUS -> TIPUS ID ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolDeclTipus();
            }else{
                Dtipus tipus = (Dtipus) taula_simbols.consulta(t.getTipus());

                if(tipus.dt().tipus_subjacent()!=m.getTsb()){
                    report_error_semantic("El tipus de les variables es diferent del valor assignat",a.esquerre,a.dreta);
                    errorSemantic = true;
                    RESULT = new SimbolDeclTipus();
                }else{
                    String ti = t.getTipus(); //tipus que afegirem als identificadors
                    Dvar var = new Dvar(ti);
                    Boolean bol = taula_simbols.posar((String) a.valor,var);
                    if(!bol){
                        report_error_semantic("ja hi ha un identificador amb el nom: '"+(String)a.valor+"' dins el mateix àmbit", a.esquerre,a.dreta);
                        errorSemantic = true;
                    }else{
                        //****************************Intermedi**********************************
                        Integer n = novavar(false,((Escalar) tipus.dt()).getBytes());
                        taula_intermedi.genera(Operacio.copia,m.getR(),null,var.getMy_nv());
                        //***********************************************************************
                    }

                }
            }
        
        :}
        ;

MODIF_TIPUS ::= R:r I_1:i {:System.out.println("MODIF_TIPUS -> R I_1");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{
                if(r.getMvp()=="const"){ //malament
                    report_error_semantic("No es pot modificar una constant", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else if(r.getMvp()=="procc"){
                    report_error_semantic("No es pot modificar un procediment", r.getEsquerre(),r.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else{
                    switch(i.getOperacio()){
                    case "as": //cas ++
                        if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_decimal")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("Tipus equivocat per a la operació ++", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            //******************Intermedi******************
                            Integer n = novavar(true,4);
                            taula_intermedi.genera(Operacio.copia_valor,1,null,n);
                            taula_intermedi.genera(Operacio.suma,r.getR(),n,r.getR()); //r.getR()++
                            //********************************************
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());
                        }
                        break;
                    case "ar": //--
                        if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_decimal")&&(r.getTsb()!="ts_caracter")){
                            report_error_semantic("Tipus equivocat per a la operació --", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            //******************Intermedi******************
                            Integer n = novavar(true,4);
                            taula_intermedi.genera(Operacio.copia_valor,1,null,n);
                            taula_intermedi.genera(Operacio.resta,r.getR(),n,r.getR()); //r.getR()--
                            //********************************************
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());
                        }
                        break;
                    case "si": //+=
                        if((i.getTsb()!="ts_enter")&&(i.getTsb()!="ts_caracter")&&(i.getTsb()!="ts_decimal")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: +=", i.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_caracter")&&(r.getTsb()!="ts_decimal")){
                            report_error_semantic("La Referència te un tipus equivocat per l'operació: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                            }else{
                                //******************Intermedi******************
                                taula_intermedi.genera(Operacio.suma,r.getR(),i.getR(),r.getR()); //r.getR() += I
                                //********************************************

                                RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());  
                            }
                        }
                        break;
                    case "ri": //-=
                        if((i.getTsb()!="ts_enter")&&(i.getTsb()!="ts_caracter")&&(i.getTsb()!="ts_decimal")){
                            report_error_semantic("La Expresió té un tipus equivocat per l'operacio: -=", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            if((r.getTsb()!="ts_enter")&&(r.getTsb()!="ts_caracter")&&(r.getTsb()!="ts_decimal")){
                            report_error_semantic("La Referència te un tipus equivocat per l'operació: +=", r.getEsquerre(),r.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                            }else{
                                //******************Intermedi******************
                                taula_intermedi.genera(Operacio.resta,r.getR(),i.getR(),r.getR()); //r.getR() += I
                                //********************************************
                                RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR()); 
                            }
                        }
                        break;
                    case "ig":
                        if(!(i.getTsb().equals(r.getTsb()))){
                            report_error_semantic("El tipus de la referència i la expresió no coincideixen amb l'operacio: =", r.getEsquerre(),i.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolModifTipus();
                        }else{
                            //******************Intermedi******************
                                taula_intermedi.genera(Operacio.copia,i.getR(),null,r.getR()); //r.getR() += I
                            //********************************************
                            RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),i.getDreta(),r.getR());
                        }
                        break;
                }
                }
                
            }

            :}
            | R:r ASSIGN MODIF_TIPUS:m {:System.out.println("MODIF_TIPUS -> R ASSIGN MODIF_TIPUS");
            if(errorSemantic){
                RESULT = new SimbolModifTipus();
            }else{

                if(!m.getTsb().equals(r.getTsb())){
                    report_error_semantic("El tipus de la referència i la modificacio no coincideixen amb l'operacio: =", r.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolModifTipus();
                }else{
                    //******************Intermedi******************
                        taula_intermedi.genera(Operacio.copia,m.getR(),null,r.getR()); //r.getR() += I
                    //********************************************
                    RESULT = new SimbolModifTipus(r.getTsb(),r.getTipus(),r.getEsquerre(),m.getDreta(),r.getR()); 
                }
            }
            
            :}; //R només pot ser id var o constant

//Si R.tsb = ts_record -> referència a tupla
//Si R.tsb = int -> pot venir de id1.id2 on id1.tsb = ts_record

R ::= ID:d {:System.out.println("R -> ID ");
        Descripcio descripcio = taula_simbols.consulta((String)d.valor);
        if(descripcio == null){ //no es troba a la taula de simbols
            report_error_semantic("Undefined id \""+d.valor+"\"", d.esquerre,d.dreta);
            errorSemantic = true;
            RESULT  = new SimbolR();
        }else{ //no hem considerat els DargIns
            if(descripcio instanceof Dvar){ //variable
                Dvar var = (Dvar) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR
                RESULT = new SimbolR((String)d.valor,(String)d.valor,tipus.dt().tipus_subjacent(),var.tipus(),"var",var.getMy_nv(),-1,var.tipus(),d.esquerre,d.dreta);
            }else if(descripcio instanceof Dconst){ //variable o tupla
                Dconst c = (Dconst) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(c.tipus()); //ALERTA EN NO TROBAR

                RESULT = new SimbolR((String)d.valor,(String)d.valor,tipus.dt().tipus_subjacent(),c.tipus(),"const",c.getTemporal(),-1,c.tipus(),d.esquerre,d.dreta);
                //el tipus pot ser tupla També
                //això es per quan ens interessa ficar una tupla dins una tupla o un subprograma
                //id(a) on 'a' és una tupla.
            }else if(descripcio instanceof Dargin){
                Dargin var = (Dargin) descripcio;
                Dtipus tipus = (Dtipus) taula_simbols.consulta(var.tipus()); //ALERTA EN NO TROBAR
                RESULT = new SimbolR((String)d.valor,(String)d.valor,tipus.dt().tipus_subjacent(),var.tipus(),"var",var.nv(),-1,var.tipus(),d.esquerre,d.dreta);

            }else{ //si no es tracta ni d'una variable, ni d'una constant, error
                report_error_semantic("ID es un procediment \""+d.valor+"\"", d.esquerre,d.dreta);
                errorSemantic = true;
                RESULT  = new SimbolR();
            }
        }
        :} //per identificadors, constants i variables
    //Idea: cercar id a la ts i mirar si es un subprograma
    //agafar els tipus de tots els valors i cercar el nom amb els tipus.
    | ID:id LPAREN VALORS:v RPAREN:r {:System.out.println("R -> ID (VALORS)"); //subprograma
        //1: mirar si id es un subprograma, amb els valors
        //2: comprovar si el subprograma te un tipus subjacent
        //si en té l'afegim a R amb la resta de informació

        if(v == null){ //crida a un subprograma fora paràmetres
           Descripcio descripcio = taula_simbols.consulta((String)id.valor);
           if(descripcio == null){
            report_error_semantic("Undefined id \""+id.valor+"\"", id.esquerre,id.dreta);
            errorSemantic = true;
            RESULT  = new SimbolR();
            }else{
                if(descripcio instanceof Dproc){
                    Dproc proc = (Dproc) descripcio;
                    String tipus = proc.getTipus(); //miram si el procediment té algun tipus de retorn
                    if(tipus == "id_nula"){
                      RESULT = new SimbolR((String)id.valor,"ts_nul","id_nula","procc",id.esquerre,id.dreta);
                      taula_intermedi.genera(Operacio.crida,null,null,proc.np());  
                    }else{
                        Descripcio t = taula_simbols.consulta(proc.getTipus());
                        if(t instanceof Dtipus){ //no fa falta crec
                            Dtipus t1 = (Dtipus) t;

                            //**********************Intermedi*************************
                            Integer nova = novavar(true);
                            taula_intermedi.genera(Operacio.crida,nova,null,proc.np());
                            //******************************************************** 

                            RESULT = new SimbolR((String)id.valor,t1.dt().tipus_subjacent(),tipus,"procc",nova,-1,tipus,id.esquerre,id.dreta);
                        }else{
                            report_error_semantic("El tipus del subprograma \""+id.valor+"\" es erroni", id.esquerre,id.dreta);
                            errorSemantic = true;
                            RESULT  = new SimbolR();
                        }
                    }
                    
                }else{
                    report_error_semantic("L'ID \""+id.valor+"\" no és un subprograma", id.esquerre,id.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }
            } 
        }else{
            ArrayList<SimbolE> llista = v.getLlista(); //llista amb els paràmetres
            Iterator <SimbolE> it = llista.iterator();
            String nom = (String)id.valor;
            while(it.hasNext()){
                SimbolE e = it.next();
                if(e.getTsb() == "ts_nul"){
                    report_error_semantic("El paràmetre no té el tipus adecuat per un subprograma", e.getEsquerre(),e.getDreta());
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }else{
                    switch(e.getTsb()){
                        case "ts_boolea":
                                nom += "_"+"bool";
                                break;
                        case "ts_cadena":
                                nom+= "_"+"cad";
                                break;
                        case "ts_decimal":
                                nom+= "_"+"decimal";
                                break;
                        case "ts_enter":
                                nom+= "_"+"ent";
                                break;
                        case "ts_caracter":
                                nom+= "_"+"car";
                                break;
                        case "ts_record":
                                nom+= "_"+"tupla";
                                break;
                    }
                    taula_intermedi.genera(Operacio.param_simple,null,null,e.getR());
                }
            }
            Descripcio descripcio = taula_simbols.consulta(nom);
            if(descripcio == null){
                report_error_semantic("El subprograma amb aquests paràmetres no existeix", id.esquerre,r.dreta);
                errorSemantic = true;
                RESULT  = new SimbolR();
            }else{
                if(descripcio instanceof Dproc){
                    Dproc proc = (Dproc) descripcio;
                    if(proc.getTipus() == "id_nula"){
                        RESULT = new SimbolR(nom,"ts_nul","id_nula","procc",id.esquerre,r.dreta);
                        taula_intermedi.genera(Operacio.crida,null,null,proc.np());
                    }else{
                      Dtipus tipus = (Dtipus) taula_simbols.consulta(proc.getTipus()); //alerta
                        //**********************Intermedi*************************
                            Integer nova = novavar(true);
                            taula_intermedi.genera(Operacio.crida,nova,null,proc.np());
                        //******************************************************** 
                        
                        RESULT = new SimbolR(nom,tipus.dt().tipus_subjacent(),proc.getTipus(),"procc",nova,-1,proc.getTipus(),id.esquerre,r.dreta);
                    }
                }else{ //per si acàs
                    report_error_semantic("Id no és un subprograma", id.esquerre,r.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR();
                }
            }
        }
        :} //per subprogrames
    | R:r PUNT ID:i {:System.out.println("R -> R PUNT ID "+(String)i.valor);
        if(errorSemantic){
            RESULT  = new SimbolR();
        }else{
            if((r.getMvp()=="const")&&(r.getTsb()=="ts_record")){
                Dcamp c = (Dcamp) taula_simbols.consultacamp(r.getIdb_dreta(),(String)i.valor);
                if(c!=null){
                    Dtipus tipus = (Dtipus) taula_simbols.consulta(c.tipus());
                    Integer despl = c.getDespl();
                    //despl += r.getDpc();
                    
                    if(c.tipus()=="tupla"){ //comprovar cas pel intermedi
                        Dconst cons = (Dconst) taula_simbols.consulta(c.getIdb());
                        RESULT = new SimbolR(r.getIdb_dreta(),c.getIdb(),tipus.dt().tipus_subjacent(),c.tipus(),"const",cons.getTemporal(),0,c.tipus(),r.getEsquerre(),i.dreta);
                    }else{
                        RESULT = new SimbolR(r.getIdb(),(String)i.valor,tipus.dt().tipus_subjacent(),c.tipus(),"var",r.getR(),despl,c.tipus(),r.getEsquerre(),i.dreta);
                    }
                }else{
                    report_error_semantic("Id no es un camp de la tupla: "+r.getIdb_dreta(), i.esquerre,i.dreta);
                    errorSemantic = true;
                    RESULT  = new SimbolR(); 
                }
            }else{
            report_error_semantic("La referència "+r.getIdb_dreta()+" no és una tupla", r.getEsquerre(),r.getDreta());
                errorSemantic = true;
                RESULT  = new SimbolR(); 
            } 
        }
    :}; //per tuples

I_1 ::= AUTOSUM:a {:System.out.println("I_1 -> AUTOSUM");
    RESULT = new SimbolI("as","id_nula","ts_nul",a.esquerre,a.dreta);
    :}
    | AUTOSUB:a {:System.out.println("I_1 -> AUTOSUB");
    RESULT = new SimbolI("ar","id_nula","ts_nul",a.esquerre,a.dreta);
    :}
    | SUMAHI:s E:e {:System.out.println("I_1 -> SUMAHI E");
        if(errorSemantic){
        RESULT = new SimbolI();
        }else{
        RESULT = new SimbolI("si",e.getTipus(),e.getTsb(),s.esquerre,e.getDreta(),e.getR());   
        }
    :}
    | RESTAHI:r E:e {:System.out.println("I_1 -> RESTAHI E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ri",e.getTipus(),e.getTsb(),r.esquerre,e.getDreta(),e.getR());   
        }
    :}
    | ASSIGN:a E:e  {:System.out.println("I_1 -> ASSIGN E");
        if(errorSemantic){
            RESULT = new SimbolI();
        }else{
            RESULT = new SimbolI("ig",e.getTipus(),e.getTsb(),a.esquerre,e.getDreta(),e.getR());   
        }
    
    :}
    ;

//REVISAR que ens pot arribar per E

VALORS ::= VALS:v {:System.out.println("VALORS -> VALS");
        RESULT = v;:}
        |   {:System.out.println("VALORS -> @");
            RESULT = new SimbolValors();:};

VALS ::= E:e {:System.out.println("VALORS -> E");
        if(errorSemantic){ //error a E
            RESULT = new SimbolValors();
        }else{
            SimbolValors v = new SimbolValors();
            v.afegirE(e); //afegim e
            RESULT = v;
        }
        :}
        | E:e COMA VALS:v {:System.out.println("VALORS -> E  COMA VALORS");
            if(errorSemantic){
                RESULT = new SimbolValors();
            }else{
                v.afegirE(e); //alreves, hauriem d'agafar la llista, i després ficarli
                RESULT = new SimbolValors(v.getLlista());
            }
            :}
        ;

//una tupla no serà mai buida

VALS_TUPLA ::= E:e COMA VALS_TUPLA:v {:System.out.println("VALS_TUPLA -> E COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix("buit", e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            :}
            | E:e DOSPUNTS ID:d COMA VALS_TUPLA:v {:System.out.println("VALS_TUPLA -> E DOSPUNTS ID COMA VALS_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    v.afegeix((String)d.valor, e);
                    RESULT = new SimbolValsTupla(v.getLlista());
                }
            :}
            | E:e {:System.out.println("VALS_TUPLA -> E");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix("buit", e);
                    RESULT = sim;
                }  
            :}
            | E:e DOSPUNTS ID:d {:System.out.println("VALS_TUPLA -> E DOSPUNTS ID");
                if(errorSemantic){
                    RESULT = new SimbolValsTupla();
                }else{
                    SimbolValsTupla sim = new SimbolValsTupla();
                    sim.afegeix((String) d.valor, e);
                    RESULT = sim;
                }  
                :};

DECL_TUPLA ::= tupla ID:i LPAREN RPAREN ASSIGN LPAREN:r VALS_TUPLA:v RPAREN {:System.out.println("DECL_TUPLA");
                if(errorSemantic){
                    RESULT = new SimbolDeclTupla();
                }else{
                    //Gestió
                    int n =0;
                    Stack<KeyValue> llista = v.getLlista();
                    Integer nv = novavar(true,0); //per guardar els elements de la tupla
                    Entrada ent = taula_variables.cerca_variable(nv);

                    Boolean bol = taula_simbols.posar((String)i.valor,new Dconst("tupla",nv)); //mirar si posar es true o false
                    if(bol){
                        //*********Gestió Intermedi************
                        //Integer nv = novavar(true,0); //per guardar els elements de la tupla
                        Integer n2 =0;
                        //*************************************

                        while(!llista.isEmpty()){
                            KeyValue k = llista.pop();
                            String nom = k.key; //nom del paràmetre
                            SimbolE simbol = k.value; //valor o variable a afegir
                            if(nom == "buit"){ //no té identificador
                                nom = "Item"+n; //nom que li posam als camps que no tenen id
                            }

                            ent.afegeixOcupacio(taula_variables.get_ocupacio(simbol.getR()));
                            if(simbol.getTsb()=="ts_record"){

                                taula_intermedi.genera(Operacio.ind_assign,simbol.getR(),n,nv); //op,1,2,3 -> 3[2] = 1
                                bol = taula_simbols.posarcamp((String)i.valor,nom,new Dcamp(simbol.getIdb(),simbol.getTipus(),n++,simbol.getTsb()));
                            }else{

                                taula_intermedi.genera(Operacio.ind_assign,simbol.getR(),n,nv); //op,1,2,3 -> 3[2] = 1
                                bol = taula_simbols.posarcamp((String)i.valor,nom,new Dcamp(simbol.getTipus(),n++,simbol.getTsb()));
                            }


                            if(bol == false){
                                report_error_semantic("El camp amb nom \""+nom+"\" ja existeix", simbol.getEsquerre(),simbol.getDreta());
                                errorSemantic = true;
                                //break; //pensar be
                            }
                        }
                        //no retornam res encara
                    }else{
                        report_error_semantic("La tupla \""+(String)i.valor+"\" ja existeix", i.esquerre,r.dreta);
                        errorSemantic = true;
                    }
                }
                :};


E ::= T:t E_1:e {:System.out.println("E -> T E_1");
    if(errorSemantic){
        RESULT = new SimbolE();
    }else{
        if((e==null)||(e.getTsb()=="ts_nul")){
            RESULT = new SimbolE(t.getIdb(),t.getTsb(),t.getTipus(),t.getMode(),t.getEsquerre(),t.getDreta(),t.getR());
        }else{
           if(t.getTsb()!="ts_boolea"){
                report_error_semantic("L'operand ha de ser de tipus booleà", t.getEsquerre(),t.getDreta());
                errorSemantic = true;
                RESULT = new SimbolE();
            }else{
                e.setTs_heretat("ts_boolea");
                //*********************Intermedi*********************************
                    Integer n1 = novavar(true,1);
                    switch(e.getOperacio()){
                        case ParserSym.AND:
                            taula_intermedi.genera(Operacio.and,t.getR(),e.getR(),n1);
                            break;
                        case ParserSym.OR:
                            taula_intermedi.genera(Operacio.or,t.getR(),e.getR(),n1);
                            break;
                    }
                    //***************************************************************
                RESULT = new SimbolE("ts_boolea","id_nula","moderesult",t.getEsquerre(),e.getDreta(),n1);
            } 
        }
    }
    :};

E_1 ::= AND:op T:t E_1:e {:System.out.println("E_1 -> AND T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació AND", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",t.getDreta(),t.getR());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    e.setTs_heretat("ts_boolea");
                    //*********************Intermedi*********************************
                    Integer n1 = novavar(true,1);
                    switch(e.getOperacio()){
                        case ParserSym.AND:
                            taula_intermedi.genera(Operacio.and,t.getR(),e.getR(),n1);
                            break;
                        case ParserSym.OR:
                            taula_intermedi.genera(Operacio.or,t.getR(),e.getR(),n1);
                            break;
                    }
                    //***************************************************************
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.AND,"moderesult",e.getDreta(),n1);
                }  
            }
        }
    :}
    | OR:op T:t E_1:e {:System.out.println("E_1 -> OR T E_1");
        if(errorSemantic){
            RESULT = new SimbolEp();
        }else{
            if((e==null)||(e.getTsb() == "ts_nul")){ //venim de Ep -> @
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació OR", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",t.getDreta(),t.getR());
                }
            }else{
                if(t.getTsb() != "ts_boolea"){ //error, no podem operar amb valors que no son booleans
                    report_error_semantic("L'operand ha de ser de tipus booleà per una operació booleana", t.getEsquerre(),t.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolEp();
                }else{ 
                    e.setTs_heretat("ts_boolea");
                    //*********************Intermedi*********************************
                    Integer n1 = novavar(true,1);
                    switch(e.getOperacio()){
                        case ParserSym.AND:
                            taula_intermedi.genera(Operacio.and,t.getR(),e.getR(),n1);
                            break;
                        case ParserSym.OR:
                            taula_intermedi.genera(Operacio.or,t.getR(),e.getR(),n1);
                            break;
                    }
                    //***************************************************************
                    RESULT = new SimbolEp("ts_boolea","id_nula",ParserSym.OR,"moderesult",e.getDreta(),n1);
                }  
            }
        }
        :}
    | {:System.out.println("E_1 -> @");
        RESULT = new SimbolEp();
        :}
    ;

T ::= N:n T_1:t {:System.out.println("T -> N T_1");
    if(errorSemantic){
        RESULT = new SimbolT();
    }else{
        if((t==null)||(t.getTsb() == "ts_nul")){ //venim de Tp -> @
            RESULT = new SimbolT(n.getIdb(),n.getTsb(),n.getTipus(),n.getMode(),n.getEsquerre(),n.getDreta(),n.getR());
        }else{
            if((n.getTsb() == "ts_nul")){
                report_error_semantic("El terminal no es adequat per una operació lògica", n.getEsquerre(),n.getDreta()); //arreglar
                errorSemantic = true;
                RESULT = new SimbolT();
            }else{
                t.setTs_heretat(n.getTsb()); //li afegim per si després hem de fer operacions
                //****************************Intermedi**************************************
                Integer e1 = etiquetes;
                etiquetes++;
                Integer e2 = etiquetes;
                etiquetes++;
                Integer n1 = novavar(true,1);

                switch(t.getOperacio()){
                    case ParserSym.IGIG:
                        taula_intermedi.genera(Operacio.salt_condicional_igual,n.getR(),t.getR(),e1);
                    break;
                    case ParserSym.DIF:
                        taula_intermedi.genera(Operacio.salt_condicional_diferent,n.getR(),t.getR(),e1);
                    break;
                    case ParserSym.MENOR:
                        if((n.getTsb() != "ts_boolea")){
                            taula_intermedi.genera(Operacio.salt_condicional_menor,n.getR(),t.getR(),e1);
                        }else{
                            report_error_semantic("El terminal no es adequat per una operació lògica", n.getEsquerre(),n.getDreta()); //arreglar
                            errorSemantic = true;
                            RESULT = new SimbolT();
                        }
                    break;
                    case ParserSym.MENORI:
                            if((n.getTsb() != "ts_boolea")){
                                taula_intermedi.genera(Operacio.salt_condicional_menorigual,n.getR(),t.getR(),e1);
                            }else{
                                report_error_semantic("El terminal no es adequat per una operació lògica", n.getEsquerre(),n.getDreta()); //arreglar
                                errorSemantic = true;
                                RESULT = new SimbolT();
                            }
                    break;
                    case ParserSym.MAJOR:
                            if((n.getTsb() != "ts_boolea")){
                                taula_intermedi.genera(Operacio.salt_condicional_major,n.getR(),t.getR(),e1);
                            }else{
                                report_error_semantic("El terminal no es adequat per una operació lògica", n.getEsquerre(),n.getDreta()); //arreglar
                                errorSemantic = true;
                                RESULT = new SimbolT();
                            }
                    break;
                    case ParserSym.MAJORI:
                            if((n.getTsb() != "ts_boolea")){
                                taula_intermedi.genera(Operacio.salt_condicional_majorigual,n.getR(),t.getR(),e1);
                            }else{
                                report_error_semantic("El terminal no es adequat per una operació lògica", n.getEsquerre(),n.getDreta()); //arreglar
                                errorSemantic = true;
                                RESULT = new SimbolT();
                            }
                    break;
                }

                if(!errorSemantic){
                    taula_intermedi.genera(Operacio.copia_valor,0,null,n1);
                    taula_intermedi.genera(Operacio.salt_incondicional,null,null,e2);
                    taula_intermedi.genera(Operacio.skip,null,null,e1);
                    taula_intermedi.genera(Operacio.copia_valor,-1,null,n1);
                    taula_intermedi.genera(Operacio.skip,null,null,e2);

                    //***************************************************************************

                    RESULT = new SimbolT("ts_boolea","id_nula","moderesult",n.getEsquerre(),t.getDreta(),n1); 
                }
                
            }   
        }
    }

    :};

T_1 ::= IGIG N:n {:System.out.println("T_1 -> IGIG N T_1");
    if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")){
                        report_error_semantic("El terminal no es adequat per una operació de comparacio", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.IGIG,"moderesult",n.getDreta(),n.getR());
                    }
        }
    :} //hauriem de llevar tp, no volem repetició en aquest cas
    | DIF N:n {:System.out.println("T_1 -> DIF N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")){
                        report_error_semantic("El terminal no es adequat per una operació de DIF", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.DIF,"moderesult",n.getDreta(),n.getR());
                    }
        }
        :}
    |MENOR N:n {:System.out.println("T_1 -> MENOR N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MENOR", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MENORI,"moderesult",n.getDreta(),n.getR());
                    }
        }
        :}
    |MAJOR N:n {:System.out.println("T_1 -> MAJOR N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MAJOR", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MAJOR,"moderesult",n.getDreta(),n.getR());
                    }
        }
        :}
    |MENORI N:n {:System.out.println("T_1 -> MENORI N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MENORI", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MENORI,"moderesult",n.getDreta(),n.getR());
                    }
        }
        :}
    |MAJORI N:n {:System.out.println("T_1 -> MAJORI N ");
        if(errorSemantic){
            RESULT = new SimbolTp();
        }else{
            if((n.getTsb() == "ts_nul")||(n.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de MAJORI", n.getEsquerre(),n.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolTp();
                    }else{ //assumim que a n.tsb = decimal o caracter 
                        RESULT = new SimbolTp(n.getTsb(),n.getTipus(),ParserSym.MAJORI,"moderesult",n.getDreta(),n.getR());
                    }
        }
        :}
    | {:System.out.println("T_1 -> @");
        RESULT = new SimbolTp();
        :}
;

N ::= M:m N_1:n {:System.out.println("N -> M N_1");
        if(errorSemantic){
            RESULT = new SimbolN();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolN(m.getIdb(),m.getTsb(),m.getTipus(),m.getMode(),m.getEsquerre(),m.getDreta(),m.getR()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((m.getTsb() == "ts_nul")||(m.getTsb()=="ts_boolea")){
                   report_error_semantic("El terminal no té un tipus adequat", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolN(); 
                }else{
                    n.setTs_heretat(m.getTsb());
                    String tsb = n.obtenir_sintetitzat();

                    if(tsb == "ts_nul"){
                            report_error_semantic("No és pot fer una operació amb aquest tipus", m.getEsquerre(),m.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolN();
                    }else{
                        //**************Intermedi******************
                            Integer n1 = novavar(true,4);
                            switch(n.getOperacio()){
                                case ParserSym.ADD:
                                    taula_intermedi.genera(Operacio.suma,m.getR(),n.getR(),n1);
                                    break;
                                case ParserSym.SUB:
                                    taula_intermedi.genera(Operacio.resta,m.getR(),n.getR(),n1);
                                    break;
                            }
                        //*****************************************
                        RESULT = new SimbolN(tsb,"id_nula","moderesult",m.getEsquerre(),n.getDreta(),n1);
                    }
                }
                
            }
        }
        :};

N_1 ::= ADD M:m N_1:n {:System.out.println("N_1 -> ADD M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb() == "ts_nul")||(m.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.ADD,"moderesult",m.getDreta(),m.getR());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb() == "ts_nul")||(m.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de suma", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 
                        n.setTs_heretat(m.getTsb());
                        String resultat = n.obtenir_sintetitzat();

                        if(resultat == "ts_nul"){
                            report_error_semantic("No és pot fer una operació amb aquest tipus", m.getEsquerre(),m.getDreta());
                            errorSemantic = true;
                            RESULT = new SimbolNp();
                        }else{
                            //**************Intermedi******************
                            Integer n1 = novavar(true,4);
                            switch(n.getOperacio()){
                                case ParserSym.ADD:
                                    taula_intermedi.genera(Operacio.suma,m.getR(),n.getR(),n1);
                                    break;
                                case ParserSym.SUB:
                                    taula_intermedi.genera(Operacio.resta,m.getR(),n.getR(),n1);
                                    break;
                            }
                            //*****************************************
                            RESULT = new SimbolNp(resultat,"id_nula",ParserSym.ADD,"moderesult",n.getDreta(),n1);
                        }

                    }
            }
        }
        :}
    | SUB M:m N_1:n {:System.out.println("N_1 -> SUB M N_1");
        if(errorSemantic){
            RESULT = new SimbolNp();
        }else{
            if((n==null)||(n.getTsb()=="ts_nul")){ //vol dir que N_1 -> @
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de resta", m.getDreta(),m.getEsquerre());
                    errorSemantic = true;
                    RESULT = new SimbolNp();
                }else{
                    RESULT = new SimbolNp(m.getTsb(),m.getTipus(),ParserSym.ADD,"moderesult",m.getDreta(),m.getR());
                }
            }else{ // N_1 té tsb i una operació associada
                if((m.getTsb() == "ts_nul")||(m.getTsb() == "ts_cadena")||(m.getTsb()=="ts_boolea")){
                        report_error_semantic("El terminal no es adequat per una operació de resta", m.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolNp();
                    }else{ //assumim que a m.tsb = cadena o decimal o caracter 
                        n.setTs_heretat(m.getTsb());
                        String resultat = n.obtenir_sintetitzat();

                        if(resultat == "ts_nul"){
                            report_error_semantic("No es pot fer una operació amb aquest tipus", m.getDreta(),m.getEsquerre());
                            errorSemantic = true;
                            RESULT = new SimbolNp();
                        }else{
                            //**************Intermedi******************
                            Integer n1 = novavar(true,4);
                            switch(n.getOperacio()){
                                case ParserSym.ADD:
                                    taula_intermedi.genera(Operacio.producte,m.getR(),n.getR(),n1);
                                    break;
                                case ParserSym.SUB:
                                    taula_intermedi.genera(Operacio.divisio,m.getR(),n.getR(),n1);
                                    break;
                            }
                            //*****************************************
                            RESULT = new SimbolNp(resultat,"id_nula",ParserSym.SUB,"moderesult",n.getDreta(),n1);
                        }

                    }
            }
        }
        :}
    | {:System.out.println("N_1 -> @");
        RESULT = new SimbolNp();
        :}
    ;

M ::= F:f M_1:m {:System.out.println("M -> F M_1");
        if(errorSemantic){
            RESULT = new SimbolM();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //vol dir que M_1 -> @
                RESULT = new SimbolM(f.getIdb(),f.getTsb(),f.getTipus(),f.getMode(),f.getEsquerre(),f.getDreta(),f.getR()); //pot ser tupla
            }else{ //M_1 ha fet qualque operació, hem de passar el tsb de f

                if((f.getTsb() == "ts_nul")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de suma/resta/multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolM();
                }else{
                    //comprovar si f es decimal
                    m.setTs_heretat(f.getTsb());
                    String tsb = m.obtenir_sintetitzat();

                    if(tsb=="ts_nul"){
                        report_error_semantic("no es pot fer el mòdul d'un decimal ", f.getEsquerre(),f.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolM();
                    }else{
                        //**************Intermedi******************
                        Integer n = novavar(true);
                        switch(m.getOperacio()){
                            case ParserSym.MULT:
                                taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.DIV:
                                taula_intermedi.genera(Operacio.divisio,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.MOD:
                                taula_intermedi.genera(Operacio.modul,f.getR(),m.getR(),n);
                                break;
                        }
                        //*****************************************

                        RESULT = new SimbolM(tsb,"id_nula","moderesult",f.getEsquerre(),m.getDreta(),n); 
                    }
                }
            }
        }
        :};

M_1 ::= MULT:e F:f M_1:m {:System.out.println("M_1 -> MULT F M_1");
        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb()=="ts_boolea")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MULT,"moderesult",f.getDreta(),f.getR());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de multiplicació", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = cadena o decimal o caracter 
                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    if(resultat == "ts_nul"){
                        report_error_semantic("no es pot fer el mòdul d'un decimal ", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                        //**************Intermedi******************
                        Integer n = novavar(true);
                        switch(m.getOperacio()){
                            case ParserSym.MULT:
                                taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.DIV:
                                taula_intermedi.genera(Operacio.divisio,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.MOD:
                                taula_intermedi.genera(Operacio.modul,f.getR(),m.getR(),n);
                                break;
                        }
                        //*****************************************
                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.MULT,"moderesult",m.getDreta(),n);
                    }

                }
            }
        }

        :}

    | DIV:d F:f M_1:m {:System.out.println("M_1 -> DIV F M_1");

        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de divisió", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{

                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.DIV,"moderesult",f.getDreta(),f.getR());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")){
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = cadena o decimal o caracter 
                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    if(resultat == "ts_nul"){
                        report_error_semantic("no es pot fer el mòdul amb un nombre decimal", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{
                        //**************Intermedi******************
                        Integer n = novavar(true);
                        switch(m.getOperacio()){
                            case ParserSym.MULT:
                                taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.DIV:
                                taula_intermedi.genera(Operacio.divisio,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.MOD:
                                taula_intermedi.genera(Operacio.modul,f.getR(),m.getR(),n);
                                break;
                        }
                        //*****************************************

                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.DIV,"moderesult",m.getDreta(),n);
                    }

                }
            }
        }
        :}

    | MOD:e F:f M_1:m {:System.out.println("M_1 -> MOD F M_1");

        if(errorSemantic){
            RESULT = new SimbolMp();
        }else{
            if((m==null)||(m.getTsb() == "ts_nul")){ //la producció M_1 -> @, comprovar el tipus de f

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_decimal")){ //es tracta d'un tsb que no volem per operacions, error
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{
                    RESULT = new SimbolMp(f.getTsb(),f.getTipus(),ParserSym.MOD,"moderesult",f.getDreta(),f.getR());
                }
            }else{ //M_1 té tipus subjacent i operació

                if((f.getTsb() == "ts_nul")||(f.getTsb() == "ts_cadena")||(f.getTsb()=="ts_boolea")||(f.getTsb()=="ts_decimal")){
                    report_error_semantic("El terminal no es adequat per una operació de mòdul", f.getEsquerre(),f.getDreta());
                    errorSemantic = true;
                    RESULT = new SimbolMp();
                }else{ //assumim que a f.tsb = enter o caracter

                    m.setTs_heretat(f.getTsb());
                    String resultat = m.obtenir_sintetitzat();

                    //pensant que resultat tendrà un ts correcte

                    if(resultat == "ts_decimal"){
                        report_error_semantic("No es pot fer el mòdul d'un valor decimal", f.getEsquerre(),m.getDreta());
                        errorSemantic = true;
                        RESULT = new SimbolMp();
                    }else{

                        //**************Intermedi******************
                        Integer n = novavar(true);
                        switch(m.getOperacio()){
                            case ParserSym.MULT:
                                taula_intermedi.genera(Operacio.producte,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.DIV:
                                taula_intermedi.genera(Operacio.divisio,f.getR(),m.getR(),n);
                                break;
                            case ParserSym.MOD:
                                taula_intermedi.genera(Operacio.modul,f.getR(),m.getR(),n);
                                break;
                        }
                        //*****************************************

                        RESULT = new SimbolMp(resultat,"id_nula",ParserSym.MOD,"moderesult",m.getDreta(),n);  
                    }
                }
            }
        }
        :}
    | {:System.out.println("M_1 -> @");
        RESULT = new SimbolMp();
    :}
    ;

//canviar simbolF, afegir-hi posició primera i darrera

F ::= LPAREN:l E:e RPAREN:r {:System.out.println("F -> LPAREN E RPAREN"); //pendent intermedi
                if(errorSemantic){
                    RESULT = new SimbolF();
                }else{
                    if(e.getTsb() == "ts_nul"){ //ho trob error
                        report_error("(E) té tsb null", e);
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",l.esquerre,l.dreta); //no tenc clar es mode
                    }   
                } 
                    :}

    | venter:v {:System.out.println("F -> venter");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor,null,n);
                RESULT = new SimbolF("ts_enter","ent","modeconst",v.esquerre,v.dreta,n);
                :} 
    | ENTRADAS:s {:System.out.println("F -> ENTRADAS");
                taula_intermedi.genera(Operacio.console_read,null,null,s.getR());
                RESULT = new SimbolF(s.getTsb(),s.getTipus(),"modeconst",s.getEsquerre(),s.getDreta(),s.getR());
                :}
    | SUB:s venter:v {:System.out.println("F -> SUB venter");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor*-1,null,n);
                RESULT = new SimbolF("ts_enter","ent","modeconst",s.esquerre,v.dreta,n);
                :}
    | ADD:a venter:v {:System.out.println("F -> ADD venter");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor,null,n);
                RESULT = new SimbolF("ts_enter","ent","modeconst",a.esquerre,v.dreta,n);
                :}
    | vdecimal:v {:System.out.println("F -> vdecimal");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Double)v.valor,null,n);
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",v.esquerre,v.dreta,n);
                :}
    | ADD:a vdecimal:v {:System.out.println("F -> ADD vdecimal");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Double)v.valor,null,n);
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",a.esquerre,a.dreta,n);
                :}
    | SUB:s vdecimal:v {:System.out.println("F -> SUB vdecimal");
                Integer n = novavar(true,4);
                taula_intermedi.genera(Operacio.copia_valor,(Double)v.valor*-1,null,n);
                RESULT = new SimbolF("ts_decimal","decimal","modeconst",s.esquerre,s.dreta,n);
                :}
    | vcaracter:v {:System.out.println("F -> vcaracter");
                Integer n = novavar(true,2);
                taula_intermedi.genera(Operacio.copia_valor,(Character)v.valor,null,n);
                RESULT = new SimbolF("ts_enter","car","modeconst",v.esquerre,v.dreta,n);
                :}
    | ADD:a vcaracter:v {:System.out.println("F -> ADD");
                Integer n = novavar(true,2);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor,null,n); //revisar si passar a decimal o enter
                RESULT = new SimbolF("ts_enter","car","modeconst",a.esquerre,v.dreta,n); //assegurar que a car hi posam ts_caracter
                :}
    | SUB:s vcaracter:v {:System.out.println("F -> SUB");
                Integer n = novavar(true,2);
                taula_intermedi.genera(Operacio.copia_valor,(Integer)v.valor*-1,null,n); //revisar si passar a decimal o enter
                RESULT = new SimbolF("ts_enter","car","modeconst",s.esquerre,v.dreta,n);
                :}
    | R: r {:System.out.println("F -> ID");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            Integer n;
                            if(r.getDpc()!=-1){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }
                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n);
                        }else if(r.getMvp() == "const"){

                            Integer n;
                            if(r.getDpc()!=-1){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }

                            RESULT = new SimbolF(r.getIdb(),r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n);
                        }else if(r.getMvp() == "procc"){ //gestionar el return
                            RESULT = new SimbolF(r.getIdb(),r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),r.getR());
                        }
                    }  
                }
                :}
    | SUB:s R:r {:System.out.println("F -> SUB R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",s.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }
                            Integer n2 = novavar(true);
                            taula_intermedi.genera(Operacio.menys,n,null,n2);

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n2);
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){

                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }
                            Integer n2 = novavar(true);
                            taula_intermedi.genera(Operacio.menys,n,null,n2);

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n2);
                        }
                    }  
                }
                :}

    | ADD:a R:r {:System.out.println("F -> ADD R");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",a.esquerre,r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n);
                        }else if((r.getMvp() == "const")||(r.getMvp() == "procc")){
                            Integer n;
                            if(r.getDpc()!=0){
                                n = novavar(true);
                                taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n);
                            }else{
                                n = r.getR();
                            }

                            RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta(),n);
                        }
                    }  
                }
                :}
    | vlogic:v {:System.out.println("F -> vlogic");
                Integer n = novavar(true,1);
                switch((String)v.valor){
                    case "FALS":
                        taula_intermedi.genera(Operacio.copia_valor,false,null,n); //revisar si passar a decimal o enter
                        break;
                    default:
                        taula_intermedi.genera(Operacio.copia_valor,true,null,n); //revisar si passar a decimal o enter
                        break;
                }
                RESULT = new SimbolF("ts_boolea","bool","modeconst",v.esquerre,v.dreta,n);
                :} 

    | SUB:s LPAREN E:e RPAREN:r {:System.out.println("F -> SUB LPAREN E RPAREN"); //REVISAR

                if(errorSemantic){ //si s'ha comés un error Semantic a E
                   RESULT  = new SimbolF(); 
                }else{
                    if(e.getTsb() == "ts_nul"){
                        report_error_semantic("No es pot restar l'expresió entre parèntesis", e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else if((e.getTsb() != "ts_enter")&&(e.getTsb() != "ts_decimal")&&(e.getTsb() != "ts_caracter")){
                        report_error_semantic("No es pot restar l'expresió entre parèntesis",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer n = novavar(true);
                        taula_intermedi.genera(Operacio.menys,e.getR(),null,n);
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",s.esquerre,r.dreta,n);
                    } 
                }
                :}
    | NOT:n vlogic:v {:System.out.println("F -> NOT vlogic");
                Integer ni = novavar(true,1);
                switch((String)v.valor){
                    case "FALS":
                        taula_intermedi.genera(Operacio.copia_valor,true,null,ni); //revisar si passar a decimal o enter
                    break;
                    default:
                        taula_intermedi.genera(Operacio.copia_valor,false,null,ni); //revisar si passar a decimal o enter
                    break;
                }
                
                RESULT = new SimbolF("ts_boolea","bool","modeconst",n.esquerre,v.dreta,ni);
                :}
    | NOT:n R:r {:System.out.println("F -> NOT ID");
                if(errorSemantic){
                    RESULT  = new SimbolF(); 
                }else{
                    if(r.getTsb() == "ts_nul"){ //error
                        report_error_semantic("La referència "+r.getIdb()+" te tipus subjacent nul",r.getEsquerre(),r.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        if(r.getMvp() == "var"){
                            if(r.getTsb() != "ts_boolea"){
                                report_error_semantic("La referència "+r.getIdb()+" no té tsb booleà", n.esquerre,r.getDreta());
                                errorSemantic = true;
                                RESULT  = new SimbolF();
                            }else{
                                Integer n1;
                                if(r.getDpc()!=0){
                                    n1 = novavar(true);
                                    taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n1);
                                }else{
                                    n1 = r.getR();
                                }
                                Integer n2 = novavar(true);
                                taula_intermedi.genera(Operacio.not,n1,null,n2);
                                RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modevar",r.getEsquerre(),r.getDreta(),n2);  
                            }
                            
                        }else if(r.getMvp() == "const"){
                            if(r.getTsb() != "ts_boolea"){
                                report_error_semantic("La referència "+r.getIdb()+" no té tsb booleà", n.esquerre,r.getDreta());
                                errorSemantic = true;
                             RESULT  = new SimbolF();
                            }else{
                                Integer n1;
                                if(r.getDpc()!=0){
                                    n1 = novavar(true);
                                    taula_intermedi.genera(Operacio.ind_param,r.getR(),r.getDpc(),n1);
                                }else{
                                    n1 = r.getR();
                                }
                                Integer n2 = novavar(true);
                                taula_intermedi.genera(Operacio.not,n1,null,n2);

                                RESULT = new SimbolF(r.getTsb(),r.getTipus(),"modeconst",r.getEsquerre(),r.getDreta());  
                            }
                        }
                    }  
                }
                :}
    | NOT:n LPAREN:l E:e RPAREN:r {:System.out.println("F -> NOT LPAREN E RPAREN"); //posar error semantic
                if(errorSemantic){ //si a E s'ha comés un error semántic
                    RESULT  = new SimbolF();
                }else{
                    if(e.getTsb() != "ts_boolea"){
                        report_error_semantic("L'expresió no és booleana ",e.getEsquerre(),e.getDreta());
                        errorSemantic = true;
                        RESULT  = new SimbolF();
                    }else{
                        Integer n1 = novavar(true);
                        taula_intermedi.genera(Operacio.not,e.getR(),null,n1);
                        RESULT = new SimbolF(e.getTsb(),e.getTipus(),"moderesult",n.esquerre,r.dreta,n1);
                    }   
                }
                :}
    ;